	.TITLE	S2CORE
	.ASECT

; Special comments-warnings in the code:
; !!MUT-CMD!! - the command mutable, means other code changes it
; !!MUT-ARG!! - the command argument is mutable
; !!MUT-2ndARG!! - the command 2nd argument is mutable

.MACRO	PUSH	RR
	MOV	RR, -(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+, RR
.ENDM

.MACRO	NOP1
	NOP
.ENDM
.MACRO	NOP2
	NOP
	NOP
.ENDM
.MACRO	NOP3
	NOP
	NOP
	NOP
.ENDM

; Режимы для регистра управления памятью
;          .___1___...00.00	Стр.	Назначение
MMODE0 = ^B0001110000000000	; 5:4  -  системный
MMOD34 = ^B0011110000000000	; 3:4  -  для загрузки
MMODE1 = ^B0011100000000000	; 3:1  -  основной
MMODE5 = ^B0001100000000000	; 5:1  -  для рисования на экране at 040000-077777 window

	.=001310

; Приходим сюда из загрузчика
; Уже включен основной режим памяти MMODE1
K01000:	MTPS	#000340			; Disable interrupts
;	MOV	SP, OSTACK		; Сохраняем начальное значение SP
	MOV	#1000, SP
;	MOV	#1330, @#177664		; Устанавливаем стандартное значение скролла
;	MOV	#MMODE1, @#177716	; Включаем основной режим памяти
K01220:	JMP	START

	.BLKW	24	;NOTE: Свободное место
;
; Clear 1024.*8.*2. = 16K bytes on the screen
K01224:	MOV	#000000, R0		; Filler value  !!MUT-ARG!!
	MOV	#002000, R1		; 1024.
	MOV	#040000, R5		; Screen start address
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K01254:	MOV	R0, (R5)+		; <  #0
	MOV	R0, (R5)+		; |  #1
	MOV	R0, (R5)+		; |  #2
	MOV	R0, (R5)+		; |  #3
	MOV	R0, (R5)+		; |  #4
	MOV	R0, (R5)+		; |  #5
	MOV	R0, (R5)+		; |  #6
	MOV	R0, (R5)+		; |  #7
	SOB	R1, K01254		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	RETURN
;
; Procedure: Get random number
;NOTE: Пока убрал для БК
K01314:	RETURN
;
; Interrupt 130 handler
;NOTE: Убрал для БК

; Procedure: ??
K01434:	PUSH	R4
	MOV	#K01552, R4
	TST	(R4)
	BNE	K01470
	MOV	SP, (R4)+
	MOV	R1, (R4)+
	MOV	R2, (R4)+
	MOV	R3, (R4)+
	MOV	(R4)+, R1
	MOV	(R4)+, R2
	MOV	(R4), R3
K01464:	POP	R4
	RETURN
K01470:	ADD	#000014, R4		; + 12.
	MOV	R3, (R4)
	MOV	R2, -(R4)
	MOV	R1, -(R4)
	MOV	-(R4), R3
	MOV	-(R4), R2
	MOV	-(R4), R1
	CLR	-(R4)
	BR	K01464
;
K01514:	PUSH	R4
	MOV	#K01572, R4
	TST	(R4)
	BNE	K01540
	MOV	SP, (R4)+
	MOV	R0, (R4)+
	MOV	(R4), R0
K01534:	POP	R4
	RETURN
K01540:	CLR	(R4)+
	TST	(R4)+
	MOV	R0, (R4)
	MOV	-(R4), R0
	BR	K01534
;
K01552:	.BLKW	5
K01572:	.BLKW	7
K01602:	.WORD	0
K01604:	.WORD	0			; temp variable
K01606:	.WORD	0
K01610:	.WORD	0			; offset value in room marker processing
K01611	=	K01610+1
;
; Procedure ?? fill screen attrs??
K01612:	PUSH	R5
	MOV	#040001, R3		; screen address
	MOV	#000022, R1		; 18. rows
	MOV	#177777, R2
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K01644:	MOV	#000040, R5		; < 32.
K01650:	MOVB	R2, (R3)+		; | <
	INC	R3			; | |
	SOB	R5, K01650		; | repeat
	NOP2	;ADD	#000020, R3
	SOB	R1, K01644		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R5
	RETURN
;
; PRINT procedure: Print string R3, R1 = length, R2 = screen coords
K01704:	PUSH	R2
	PUSH	R4
	PUSH	R5
	CALL	K02056			; screen coords R2 to screen address
K01716:	MOVB	(R3)+, R0		; <  get symbol
	BIC	#177400, R0
	ASL	R0
	ASL	R0
	ASL	R0			; *8.
	ADD	#<L06234-256.>, R0	; + font base address minus 256. for 32. symbols
	PUSH	R2
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	PUSH	R1
	MOVB	#000010, R5		; 8. lines
K01760:	MOVB	(R0)+, R1		; <
	ASL	R1
	MOV	PXCONH(R1), (R2)	; |  copy to screen
	ADD	#000100, R2		; |  next line
	SOB	R5, K01760		; repeat
	POP	R1
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R2
K02006:	ADD	#000001, R4
	CMPB	#000040, <K02006+2>
	BNE	K02030
	ADD	#001200, R2
	BR	K02032
K02030:	TST	(R2)+
K02032:	BIT	#000037, R4
	BNE	K02044
	ADD	#001100, R2
K02044:	SOB	R1, K01716		; repeat
	POP	R5
	POP	R4
	POP	R2
	RETURN
;
; Procedure: Screen coords R2 to screen address
K02056:	MOV	R2, R4
	BIC	#177740, R4		; 0..31.
	BIC	#160037, R2
K02070:	MOV	R2, #000000		;!!MUT-ARG!!
	SWAB	R2
	BIC	#177770, R2		; 0..7
	ASL	R2
	ASL	R2
K02106:	BISB	R2, <K02070+2>
	BICB	#177747, <K02070+3>
	ASRB	<K02070+3>
	ASRB	<K02070+3>
	ASRB	<K02070+3>
	MOV	<K02070+2>, R2
	ASL	R2
	ASL	R2
	MOV	R2, <K02070+2>
	ASL	R2
	ASL	R2
	ADD	<K02070+2>, R2
	ASL	R4
	ADD	R4, R2
	ADD	#040000, R2		; R2 = screen address
	ASR	R4
	RETURN
	MOV	#000001, R0
	RETURN
;
; DOPIC procedure: Show the room on the screen
K02202:	MOV	#041173, R3		; FFCOL
	MOVB	(R3), R5
	MOV	#000004, R0
	XOR	R0, R5			; XOR 4
	MOVB	R5, (R3)+
	CLRB	(R3)
	MOV	#L27624, K04652		; BUFFN - Ninja tile screen address
	MOV	#L30724, K04656		; BUFG1 - Enemy 0 tile screen address
	MOV	#L32024, K04660		; BUFG2 - Enemy 1 tile screen address
	MOV	#L26524, K04654		; BUFFO - Front tile screen address
	MOV	#L25424, R3		; BUFFB - Back tile screen address
	MOV	#L24324, R2		; BUFFD
	MOV	#040000, R5		; screen start address
	MOV	#L24324, R4		; BUFFD
K02272:	MOV	#000022, #000000	;!!MUT-2ndARG!!
; LOOP1:
K02300:	MOV	#000040, R1		; 32.
; LOOP2:
K02304:	PUSH	R1
	PUSH	R3
	PUSH	R2
	MOVB	(R4), R0
	BNE	K02322
	JMP	K04440			; => NDRAW
K02322:	MOVB	(R3), R0
	BIC	#177400, R0
	MOVB	R0, <K04673>		; set BAKCR
	MOV	R0, R3
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	ADD	R0, R3			; *9.
	ADD	#K77531, R3		; BCHRS
	MOV	#K04662, R2		; PIX
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
K02374:	MOVB	(R3)+, (R2)+
	NOP1	;MOVB	(R3)+, (R2)+		; attr
	CLRB	K41174			; clear FFCOL+1
	MOVB	@K04656, R0		; get tile from Enemy 0 tile screen
	CLR	R3
	BISB	R0, R3
	INCB	R0
	BEQ	K03014			; => GRD2
	CLRB	R1
	CMPB	R0, #000244
K02426:	BLO	K02450			; => FFCL2
	CMPB	R0, #000247		; == 167. ?
	BHIS	K02450			; => FFCL2
	MOVB	041173, R0
	MOVB	R0, K41174
	MOV	R0, R1
; FFCL2:
K02450:	BICB	#177407, K04672		; COL
	BISB	R1, K04672		; COL
	BIC	#177400, R3		; keep low byte
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	ADD	#K73546, R3		; GCHRS - tiles base address
	MOV	#K04662, R2		; PIX buffer address
	CALL	K36042			; G1DIS
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	CALL	K36042			; G1DIS
K03014:	MOVB	@K04660, R0		; get tile from Enemy 1 tile screen
	CLR	R3
	BISB	R0, R3
	INCB	R0
	BEQ	K03364
	BICB	#177407, K04672		; COL
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	ADD	#K73546, R3		; GCHRS - tiles base address
	MOV	#K04662, R2		; PIX
	CALL	K36056			; G2DIS
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	CALL	K36056			; G2DIS
; NINJA:
K03364:	MOVB	K03542, K41175		; (NJCOL+1) -> TMPNC
	CLR	R3
	MOVB	@K04652, R0		; get tile from Ninja tile screen
	BISB	R0, R3
	INCB	R0
	BNE	K03412
	JMP	K04104
K03412:	CMPB	R0, #000341		; 225.
	BHIS	K03462			; => WILSN
	CMPB	R0, #000323		; 221.
	BLO	K03462			; => WILSN
	CMPB	R0, #000327		; 215.
	BLO	K03442			; => WLSN2
	CMPB	R0, #000333		; 219.
	BLO	K03462			; => WILSN
; WLSN2:
K03442:	MOVB	K04673, R0		; get BAKCR
	DECB	R0
	BNE	K03462			; => WILSN
	MOVB	#007, K03542		; set (NJCOL+1) to 7
	BR	K03544			; => HYPN2
; WILSN:
K03462:	MOVB	K04673, R0		; get BAKCR
	CMPB	R0, #000117		; == 79. ?
	BLO	K03516			; => OBJD
	CMPB	R0, #000126		; == 86. ?
	BHIS	K03516			; => OBJD
	MOVB	<L14472+2>, R0		; get (DECEN+1)
	BEQ	K03516			; => OBJD
	MOVB	#001, K36216		; set ELECU = 1
; OBJD:
K03516:	MOVB	K41174, R0		; get (FFCOL+1)
	BEQ	K03544			; => HYPN2
	PUSH	R3
	MOVB	#003, R1
	CALL	L14472			; DECEN
	POP	R3
	BR	K03560			; => HYPNO
;
K03542:	.BYTE	0			; ??
	.EVEN
; HYPN2:
K03544:	BICB	#177407, K04672		; COL
	BISB	K03542, K04672		; set COL
; HYPNO:
K03560:	MOVB	K41175, K03542		; TMPNC -> NJCOL+1
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	ADD	#116744, R3		; + NCHRS
	MOV	#K04662, R2		; PIX
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
	MOVB	(R3), R1
	MOVB	007126(R1), R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	COMB	(R2)
	BICB	(R2), R0
	MOVB	R0, (R2)
	MOVB	(R3)+, R0
	CALL	K04634			; REFQ - refleft R0 if DIR
	BISB	R0, (R2)+
;
K04104:	MOV	#K04672, R3		; get COL
	MOV	#000020, R0		; 16.
; COLRD:
K04114:	NOP		;!!MUT-CMD!! "NOP" command or "MOVB R0,(R3)" command
	MOVB	@K04654, R0		; get tile from Front tile screen
	CLR	R3
	BISB	R0, R3
	INCB	R0
	BEQ	K04274			; => DRAW
	MOV	R3, R1
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	CMPB	R0, #000345		; == 229.?
	BHIS	K04526			; => BUFWR
	ASL	R3
	ADD	R1, R3
	ADD	#041342, R3		; + OCHRS
	MOV	#K04662, R2		; PIX
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	CMPB	(R3), #377		; == 255. ?
	BEQ	K04274			; => DRAW
	MOVB	(R3), (R2)
; DRAW: Copy pixels from K04662 to screen; R5 = address on screen
K04274:	MOV	#K04662, R3		; PIX
	PUSH	R5
	MOV	#100, R1		; offset to next line
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	MOVB	(R3)+, R0		; #0
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #1
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #2
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #3
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	;TODO: Копировать и этот байт тоже
	CLR	(R5)			; Пустая строка в середине тайла
	ADD	R1, R5
	MOVB	(R3)+, R0		; #4
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #5
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #6
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #7
	ASL	R0
	MOV	PXCONH(R0), (R5)
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	MOVB	(R3), R0		; get attr
	POP	R5
K04440:	TST	(R5)+			; next column
	INC	K04652			; next address in Ninja tile screen
	INC	K04656			; next address in Enemy 0 tile screen
	INC	K04660			; next address in Enemy 1 tile screen
	INC	K04654			; next address in Front tile screen
	POP	R2
	POP	R3
	POP	R1
	INC	R2
	INC	R3
	INC	R4
	DEC	R1
	BEQ	K04506
	JMP	K02304
K04506:	ADD	#001100, R5
	DEC	<K02272+4>
	BEQ	K04632		; Переход на RETURN
	JMP	K02300
K04526:	ADD	#112754, R3		; ??? some base address
	CMPB	R0, #000345		; 229.
	BNE	K04544			; => NOEL6
	MOV	#L16014, R3		; CHARSET - computerized font base address
K04544:	MOV	#K04662, R2		; PIX
	MOV	#000010, R1		; 8.
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	;MOVB	#060, (R2)		;NOTE: Атрибут, не нужно на БК
	BR	K04274			; => DRAW
;
; BUFOM procedure: Draw string as tiles; R2 = string, R1 = length
K04604:	MOV	R1, R5
K04606:	MOVB	(R2)+, R0		; <
	ADD	#000244, R0		; | 228.-64.
	MOVB	R0, (R3)+		; |
	SOB	R1, K04606		; repeat
	SUB	#002200, R3		; BUFFO-BUFFD
K04624:	MOVB	#001, -(R3)		; <
	SOB	R5, K04624		; repeat
K04632:	RETURN
;
; REFQ procedure: if DIR != 0 then mirror byte R0
K04634:	TSTB	K36264			; check DIR
	BEQ	K04650			; = 0 ? => don't mirroring
	MOVB	R0, R1
	MOVB	L23024(R1), R0		; byte mirroring
K04650:	RETURN
;
K04652:	.WORD	0			; NINPT: Address in Ninja tile screen
K04654:	.WORD	0			; OBJPT: Address in Front tile screen
K04656:	.WORD	0			; GD1PT: Address in Enemy 0 tile screen
K04660:	.WORD	0			; GD2PT: Address in Enemy 1 tile screen
;
K04662:	.BLKW	4			; PIX
;
K04672:	.BYTE	2			; COL
K04673:	.BYTE	0			; BAKCR
;
; NERDR procedure: Update NEAR indicator
K04674:	PUSH	R3
	TSTB	R0
	BNE	K05032
	MOV	#K24762, R3
	TSTB	(R3)
	BEQ	K05032
	DECB	(R3)
	MOV	K23746, R3		; get NERST
	MOV	#000005, R1		; 5.
K04724:	BICB	#177600, (R3)+		; <
	SOB	R1, K04724		; repeat
	MOV	#073477, R3		; screen address
	MOV	#000010, R1
	MOV	#000017, R0
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
K04762:	MOVB	R0, (R3)+		; <
	INC	R3
	MOVB	R0, (R3)+
	INC	R3
	MOVB	R0, (R3)+
	INC	R3
	MOVB	R0, (R3)+
	INC	R3
	ADD	#000070, R3
	SOB	R1, K04762		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	NOP3
	CALL	110300
	CLR	R0
K05032:	MOV	#000032, R3
	BR	K05050
; HLDOD procedure
K05040:	MOVB	K33464, R0		; get HELD value
	PUSH	R3
	CLR	R3
K05050:	ASL	R3
	MOV	R3, <K05100+2>
	BIC	#177600, R0		; 0..177
	PUSH	R1
	PUSH	R2
	ASL	R0
	MOV	K05254(R0), R2		; get item address
	MOV	#067602, R3
K05100:	ADD	#000000, R3		;!!MUT-ARG!!
	PUSH	R3
	MOV	#000030, R1
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K05126:	MOVB	(R2)+, R5		; <
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; | copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; | copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; |  copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; |  copy pixels
	ADD	#000070, R3		; |  next line
	SOB	R1, K05126		; repeat
	POP	R3
	INC	R3
	MOV	#000003, R5
K05164:	;MOV	#000010, R1		; <
K05170:	;MOV	R2, R4			;   <
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;ADD	#000070, R3
	;MOV	R4, R2
	;SOB	R1, K05170		;   repeat
	;ADD	#000004, R2
	;SOB	R5, K05164		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R2
	POP	R1
	POP	R3
	RETURN

	.BLKW	14	;NOTE: Свободное место
;
; Table of addrs: Nothing, Shuriken, Knife, Empty Box, Question, Pipe, Question, Wrench
K05254:	.WORD	K05274, K05450, K05624, K06000, K06154, K06504, K06154, K06330
; Item pictograms 32x24, 108. bytes each * 7 = 756. bytes total
.INCLUDE /S2ITEM.MAC/

START:
;K01206:	MOV	#004000, <K01224+2>	; set filler
	CALL	K01224			; Clear the screen
	CALL	PREPAR
;
; Preparing reflection table, but starting from 128.
K06660:	MOV	#000200, R4		; ^B10000000 = 200 = 128.
	CLR	R0
	MOV	#000400, R1		; 256.
	MOV	#L22624, R3		; REFBF table address
K06676:	MOVB	#000010, R2		; <  8.
	CLR	R5
	BISB	R4, R5
K06706:	RORB	R5			; | <
	ROLB	R0			; | |
	SOB	R2, K06706		; | repeat
	MOVB	R0, (R3)+
	INCB	R4
	SOB	R1, K06676		; repeat
;
K06722:	JMP	K07326			; OUTBF Go to Menu
;
;K06726:
.INCLUDE /S20DD6.MAC/
;
; Coming here from K06722
; OUTBF: Prepare for Menu and start the Menu
K07326:	CALL	L07634			; INITHI Draw Ninja for Menu
	JMP	L11224			; CLAW1 Entering Menu
;
K07336:	.ASCII	/PRESS ANY KEY TO CONTINUE/
; Levels info
K07367:	.ASCII	/RIN  999/
	.ASCII	/  STRENGTH OF MIND AND BODY   00/
	.BYTE	000, 000, 377, 377
K07443:	.ASCII	/KYO  901/
	.ASCII	/     DIRECTION OF ENERGY      00/
	.BYTE	000, 000, 377, 376
K07517:	.ASCII	/TOH  801/
	.ASCII	/   HARMONY WITH THE UNIVERSE  02/
	.BYTE	002, 000, 377, 377
K07573:	.ASCII	/SHA  751/
	.ASCII	/  HEALING OF SELF AND OTHERS  05/
	.BYTE	005, 000, 356, 377
K07647:	.ASCII	/KAI  701/
	.ASCII	/    PREMONITION OF DANGER     07/
	.BYTE	007, 000, 356, 377
K07723:	.ASCII	/JIN  651/
	.ASCII	/KNOWING THE THOUGHTS OF OTHERS09/
	.BYTE	011, 001, 356, 377
K07777:	.ASCII	/RETSU601/
	.ASCII	/  MASTERY OF TIME AND SPACE   11/
	.BYTE	013, 001, 377, 376
K10053:	.ASCII	/ZAI  551/
	.ASCII	/ CONTROL OF NATURES ELEMENTS  14/
	.BYTE	016, 001, 377, 377
K10127:	.ASCII	/ZEN  999/
	.ASCII	/        ENLIGHTENMENT         14/
	.BYTE	016, 001, 356, 377
	.EVEN
; Levels table
K10204:	.WORD	K07367, K07367, K07443, K07517, K07573, K07647, K07723, K07777
	.WORD	K10053, K10127

K10230:	.ASCII	/MISSION   BRIEFING/
K10252:	.ASCII	/LEVEL 0/
K10261:	.ASCII	/KILL ENEMY GUARDS/
	.ASCII	/ESCAPE FROM BUILDING VIA TUNNELS/
	.ASCII	/"#/
	.ASCII	/GOOD LUCK ON YOUR MISSION/
	.ASCII	/PREPARE TO BEGIN/
K10415:	.ASCII	/MISSION NAME ' /
K10434:	.ASCII	/COLLECT XX PIECES OF PAPER TAPE/
K10473:	.ASCII	/INSERT TAPE IN MISSILE CONSOLE/
K10531:	.ASCII	/DISABLE ELECTRIFIED FENCE/
K10562:	.ASCII	/SMASH THROUGH FENCE ON MOTORBIKE/
;
K10622:	.WORD	0

; Start Game selected in Menu - show level briefing
K10624:	CLR	<K01224+2>		; set filler
	NOP3	;MOVB	#000062, <K01224+3>
	CALL	K01224			; Clear the screen
	MOV	#K10230, R3		; "MISSION   BRIEFING" etc.
	MOV	#040007, R2		; screen coords
	MOV	#000022, R1
	CALL	K01704			; PRINT string
	MOV	L11666, R0		; get MSLEV Mission Level
	ADD	#000060, R0		; +'0'
	MOVB	R0, <K10252+6>		; put in the "LEVEL 1" string
	MOV	#040114, R2		; screen coords
	MOV	#000007, R1
	CALL	K01704			; PRINT string
	MOV	#040207, R2		; screen coords
	MOV	#K10415, R3		; "MISSION NAME ' "
	MOV	#000017, R1
	CALL	K01704			; PRINT string
	MOV	L11666, R0		; get MSLEV Mission Level
	ASL	R0
	MOV	K10204(R0), R3		; get mission info, starts with mission name
	MOV	#000005, R1
	ADD	#000017, R2		; screen coords (0,15)
	CALL	K01704			; PRINT string - mission name
	MOV	#K36204, R2
	MOV	#000003, R1		; Copy 3-char TIMER initial value
K10770:	MOVB	(R3)+, (R2)+		; <
	SOB	R1, K10770		; repeat
	MOV	#040241, R2		; screen coords
	MOV	#000036, R1		; 30.
	CALL	K01704			; PRINT string
	MOVB	(R3)+, <K10434+10>	; higher digit in "COLLECT XX"
	MOVB	(R3), <K10434+11>	; lower digit
	MOV	R3, K10622
	MOV	R3, R4
	MOVB	000001(R4), 052626	; set NTPND
	BEQ	K11056
	MOV	#K10434, R3		; "COLLECT 00 PIECES OF PAPER TAPE"
	MOV	#044000, R2
	MOV	#000037, R1		; 31.
	CALL	K01704			; PRINT string
K11056:	MOVB	000004(R4), K17200	; set BIKER
	MOV	#000377, R0
	CMPB	#177777, K17200		; check BIKER
	BNE	K11124
	MOV	#K10562, R3		; "SMASH THROUGH FENCE ON MOTORBIKE"
	MOV	#044200, R2
	MOV	#000040, R1		; 32.
	CALL	K01704			; PRINT string
	MOV	#000001, R0
K11124:	MOVB	R0, <K13224+2>
	MOVB	000002(R4), K11770	; -> CONQU
	BEQ	K11160
	MOV	#K10473, R3		; "INSERT TAPE IN MISSILE CONSOLE"
	MOV	#044041, R2
	MOV	#000036, R1
	CALL	K01704			; PRINT string
K11160:	MOVB	000003(R4), <K31220+2>
	CMPB	#177777, <K31220+2>
	BEQ	K11216
	MOV	#K10531, R3		; "DISABLE ELECTRIFIED FENCE"
	MOV	#044103, R2
	MOV	#000031, R1
	CALL	K01704			; PRINT string
K11216:	MOV	#K10261, R3		; "KILL ENEMY GUARDS"
	MOV	#040347, R2
	MOV	#000021, R1		; 17.
	CALL	K01704			; PRINT string "KILL ENEMY GUARDS"
	MOV	#044140, R2
	MOV	#000040, R1		; 32.
	CALL	K01704			; PRINT string "ESCAPE FROM BUILDING VIA TUNNELS"
	MOV	#040240, R2
	MOV	#000001, R1		; 1.
	CALL	K01704			; PRINT string
	INC	R1
	MOV	#040277, R2		; 1.
	CALL	K01704			; PRINT string
	MOV	#050003, R2
	MOV	#000031, R1		; 25.
	CALL	K01704			; PRINT string "GOOD LUCK ON YOUR MISSION"
	MOV	#050110, R2		; MANBF
	MOV	#000020, R1		; 16.
	CALL	K01704			; PRINT string "PREPARE TO BEGIN"
;NOTE: Временно закомментировал, из-за нехватки слов в K11632 TODO
;	MOV	#K07336, R3		; "PRESS ANY KEY TO CONTINUE"
;	MOV	#050343, R2
;	MOV	#000031, R1		; 25.
;	CALL	K01704			; PRINT string
;	CALL	L13024			; Empty keyboard buffer
	CALL	L13100			; PAWS0 Get a key
; After the briefing - clear the screen, show the indicator panel
	CLR	<K01224+2>		; set filler
	NOP3	;MOVB	#000011, <K01224+3>
	CALL	K01224			; Clear the screen
	MOVB	K41304, R0		; get input method
	MOV	#L15756, R2
	DECB	R0
	BEQ	K11436
	DECB	R0
	BEQ	K11422
	MOV	#L15775, R2		; Redefined keys address
K11422:	MOV	#K41305, R3
	MOV	#000017, R1		; Copy 15. bytes
K11432:	MOVB	(R2)+, (R3)+		; <
	SOB	R1, K11432		; repeat
K11436:	MOV	#000041, R1		; 33.
	MOV	#<K23030+4>, R2
	MOV	#<K23030+11>, R3
K11452:	PUSH	R1			; <
	MOV	#000005, R1		; | Copy 5 bytes
K11460:	MOVB	(R3)+, (R2)+		; | <
	SOB	R1, K11460		; | repeat
	MOV	#000011, R1
	ADD	R1, R3
	ADD	R1, R2
	POP	R1
K11476:	SOB	R1, K11452		; repeat
	PUSH	R4
	MOV	#050100, R2		; screen coords
	CALL	K02056			; screen coords R2 to screen address
	MOV	#K11772, R5		; Indicator panel tile sequence address
K11516:	MOVB	(R5), R3		; <  get byte
	CMPB	#177777, R3		; |  end of sequence?
	BNE	K11534
	POP	R4
	JMP	K12454			; Indicator panel frame is shown - exit the loop
K11534:	BIC	#177400, R3		; keep low byte
	PUSH	R3
	ASL	R3			; | *2
	ASL	R3			; | *4
	ASL	R3			; | *8
	ADD	(SP)+, R3		; | *9
	ADD	#K12121, R3		; | +PANCR tile base address
	MOVB	000010(R3), R0
	MOV	#000001, R1
	CMPB	(R5)+, #000021		; |  less than 17. ? check for repeat char
	BLO	K11600
	CLR	R1
	BISB	(R5)+, R1		; |   get counter byte
K11600:	PUSH	R3			;   <
	CALL	K11632			;   |  show one tile of the indicator panel
	POP	R3
	TST	(R2)+			;   |  next column
	INC	R4
	BIT	#000037, R4
	BNE	K11626
	ADD	#001100, R2
K11626:	SOB	R1, K11600		;   repeat
	BR	K11516			; repeat
; Procedure: Show one tile of the indicator panel
K11632:	PUSH	R2
	PUSH	R5
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	MOVB	(R3)+, R5		; #0
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #1
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #2
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #3
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #4
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #5
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #6
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #7
	ASL	R5
	MOV	PXCONH(R5), (R2)
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R5
	POP	R2
K11766:	RETURN
;
K11770:	.WORD	000			; CONQU
;
; PANDA - Indicator panel tile sequence
K11772:	.BYTE	010,021,004,016,021,016,016,021,005,016,021,004,011,014,022,004
	.BYTE	014,022,016,014,000,001,001,001,002,014,022,004,014,014,022,004
	.BYTE	014,022,016,014,003,022,003,004,014,022,004,014,014,022,004,014
	.BYTE	023,016,014,005,006,006,006,007,014,022,004,014,014,022,004,014
	.BYTE	023,016,014,022,005,014,022,004,014,012,021,004,017,021,016,017
	.BYTE	021,005,017,021,004,013,377
; PANCR - Indicator panel tiles, 9 bytes each
K12121:	.BYTE	000,017,020,047,110,120,120,120,017
	.BYTE	000,377,000,377,000,000,000,000,017
	.BYTE	000,360,010,344,022,012,012,012,017
	.BYTE	120,120,120,120,120,120,120,120,017
	.BYTE	012,012,012,012,012,012,012,012,017
	.BYTE	120,120,120,110,047,020,017,000,017
	.BYTE	000,000,000,000,377,000,377,000,017
	.BYTE	012,012,012,022,344,010,360,000,017
	.BYTE	000,022,015,333,062,051,044,040,002
	.BYTE	000,060,100,106,310,260,236,050,002
	.BYTE	020,031,361,063,057,102,102,004,002
	.BYTE	036,050,230,330,144,104,042,040,002
	.BYTE	020,076,110,010,020,174,022,060,002
	.BYTE	010,052,034,260,340,222,114,030,002
	.BYTE	000,042,044,107,314,152,222,020,002
	.BYTE	020,125,135,053,342,042,104,000,002
	.BYTE	020,036,070,217,022,004,170,014,002
	.BYTE	000,041,042,372,027,022,042,000,002
	.BYTE	000,000,000,000,000,000,000,000,017
	.BYTE	377,377,377,377,377,377,377,377,012
; PANMS - Indicator signs
K12405:	.ASCII	/HELD/
	.ASCII	/TIMER/
	.ASCII	/NEAR/
K12422:	.ASCII	/ /
K12423:	.ASCII	/PAY $0000000 /		; MONEY
K12440:	.ASCIZ	/XXXXXXXXXXX/		; NAME
	.EVEN
;
; Starting the game, indicator panel frame is already shown
K12454:	MOV	K10622, R3
	CLR	R2
	BISB	000001(R3), R2
	BEQ	K12504			; jump if no tape needed
	ADD	#055205, R2		; calculate attr pos of green tape piece
	MOV	#000014, R0		; attr
	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
; NLPTM:
K12504:	MOV	#<K12422+6>, R3		; MONEY+5
	MOV	#000006, R1		; 6 bytes
K12514:	MOVB	#060, (R3)+		; <
	SOB	R1, K12514		; repeat
	MOV	#K12405, R3		; "HELD" etc.
	MOV	#050301, R2
	MOV	#000004, R1		; 4.
	CALL	K01704			; PRINT string "HELD"
	MOV	#050325, R2
	MOV	#000005, R1		; 5.
	CALL	K01704			; PRINT string "TIMER"
	MOV	#050333, R2
	MOV	#000004, R1		; 4.
	CALL	K01704			; PRINT string "NEAR"
	MOV	#050146, R2
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string " PAY $0000000 "
	MOVB	#016, <L14506+2>	; set (NRGCR+1) = 14.
	MOVB	#007, K36211		; set MAND = 7.
	MOVB	#046, K36210		; set MANA = 38.
	MOV	#000406, K36212		; set MANPS
	NOP3	;MOVB	#001, K36213
	MOVB	#000021, K36215		; set RMAC room position = 17.
	MOV	#050205, K51142		; set PTSPS
	CLR	R0
	CLRB	K24762
	CLRB	K51145			; clear TAPCT - tapes carried total
	CLRB	K51146			; clear TAPTT
	CLRB	K17716			; clear BIKMR
	CLRB	K36216			; clear ELECU
	CLRB	K03542			; clear NJCOL+1
	CLRB	K33540			; clear DEAD
	CLRB	K36214			; RMDN = 0 top level
	MOV	#<K23030+4>, K23746	; INITSTA address -> NERST
	MOV	#046310, <K36276+2>	; GLINC address -> CHARN+1
	MOV	#K40520, <K25272+2>	; GLIDERP address -> VECTN+1
	CLRB	K37662			; set SPEED = 0
	CLRB	K36264			; set DIR = 0
	MOV	#000240, K04114		; set NOP command
	MOV	#070613, <K13332+2>	; MAP-15 address -> RM+1
	INCB	R0			; R0 = 1
	MOVB	R0, <L14534+2>		; set (NRGPX+1) = 1
	MOVB	R0, <L14472+2>		; set (DECEN+1) = 1
	MOVB	R0, K33464		; set HELD value = 1 = Shuriken
	MOVB	R0, K33465		; set NEAR value = 1
	MOVB	R0, K33542		; set JUMP = 1
	MOVB	R0, K36207		; set TIME2 = 1
	MOV	#033556, R3		; TRACK1+11.
	MOV	#000014, R2		; 12.
	MOV	#000145, R1		; 101.
; GRDIN:
K13036:	MOVB	(R3), R0		; <
	CMPB	R0, #005		; == 5 ?
	BNE	K13050			; => NDGIT
	CLRB	(R3)
K13050:	CMPB	R0, #006		; == 6 ?
	BNE	K13062
	MOVB	#001, (R3)
K13062:	ADD	R2, R3
	SOB	R1, K13036		; repeat
	CALL	K05040			; HLDOD
; INISC:
K13072:	MOVB	#005, K26666		; set GDNRG = 5
	MOVB	#003, L15646		; set RMTIME = 3
	CLRB	K14640			; clear TVSWT
	MOVB	K17200, R0		; get BIKER
	INCB	R0
	BNE	K13166
	CMPB	K36214, #023		; check if RMDN == 19.
	BNE	K13166
	MOV	#K17716, R3		; BIKMR
	TSTB	(R3)
	BNE	K13166
	MOVB	#001, (R3)		; set BIKMR = 1
	MOV	#050146, R2
	MOV	#K17720, R3		; " BIKE ARRIVED "
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string
K13166:	MOV	#000006, R1		; 6 = number of records
	MOV	#K33466, R3		; MISL1 - Ninja object
	MOV	#000007, R2		; 7 = object record size
K13202:	CLRB	(R3)			; <
	ADD	R2, R3			; | next record
	SOB	R1, K13202		; repeat
	MOVB	K36215, R1		; get RMAC room position
	MOVB	#001, R0
	DECB	R1
	BNE	K13230
; DRFNT:
K13224:	MOVB	#001, R0		;!!MUT-ARG!!
; JIRRT:
K13230:	MOVB	R0, 070340		; set DRFNQ
	CLRB	K17635			; clear LETNO
	CALL	K46120			; BUFCL Fill Ninja tile screen
	CALL	K46150			; BUFC2 Fill Enemy 0/1 tile screens
	MOV	#L25424, R3		; BUFFB Back tile screen address
	MOV	#000440, R1		; 288. words
K13260:	CLR	(R3)+			; <
	SOB	R1, K13260		; repeat
	MOV	#000440, R1		; 288. words
	MOV	#177777, R5		; filler
K13274:	MOV	R5, (R3)+		; <
	SOB	R1, K13274		; repeat
	MOV	#L24324, R3		; BUFFD
	MOV	#000440, R1		; 288. words
	MOV	#000401, R5		; filler
K13314:	MOV	R5, (R3)+		; <
	SOB	R1, K13314		; repeat
;
	NOP1
	NOP2	;CLR	<K01400+2>
	NOP2	;MTPS	#000000			; Enable interrupts
; RM:
K13332:	MOV	#000000, R3		;!!MUT-ARG!!
	MOVB	K36214, R0		; get RMDN room level
	BEQ	K13346			; top level =>
; RMDN != 0
	MOVB	(R3), R0		; get room number
; NTPRW: RMDN == 0
K13346:	BIC	#177400, R0
	ASL	R0
	MOV	K72572(R0), R3		; Get room sequence addr from the table
; NXRUT: Build the room using the room sequence
K13360:	MOVB	(R3), R0		; get marker
	INCB	R0			; end of sequence?
	BNE	K13372
	JMP	K24272			; => RMDUN End of room sequence
K13372:	INC	R3
	PUSH	R3
	ASL	R0			; *2
	BIC	#177400, R0
	ADD	#<K13426-2>, R0		; + <ROUTS-2>
	JMP	@000000(R0)		; Process this marker
; BAKWD:
K13414:	POP	R3
	INC	R3
	BR	K13360			; => NXRUT
; RETRT:
K13422:	JMP	@#K13414		;!!MUT-ARG!!
; ROUTS:
K13426:	.WORD	K20120		; $00 000 - HORLN - Fill horizontally W with tile
	.WORD	K20152		; $01 001 - VERLN - Fill vertically H with tile
	.WORD	K24104		; $02 002 - BLOCK - Fill rectangle WxH with tile
	.WORD	K17762		; $03 003 - FILLB - Fill the whole room with tile
	.WORD	K20022		; $04 004 - ONECR - Fill one tile
	.WORD	K16024		; $05 005 - RKTPP - Rocket upper part
	.WORD	K20136		; $06 006 - DIAGR - Fill diagonally right-down
	.WORD	K20144		; $07 007 - DIAGL - Fill diagonally left-down
	.WORD	K20260		; $08 010 - LADSK - Ladder
	.WORD	K20346		; $09 011 - ROCKS - Supertile
	.WORD	K24004		; $0A 012 - DIBL1 - Fill triangle down-right
	.WORD	K23752		; $0B 013 - DIBL2 - Fill triangle up-right
	.WORD	K23760		; $0C 014 - DIBL3 - Fill triangle right-up
	.WORD	K23776		; $0D 015 - DIBL4 - Fill triangle right-down
	.WORD	K20240		; $0E 016 - LADTN - Wide white ladder
	.WORD	K20056		; $0F 017 - TLDTN - Joint between the ladder and the mast
	.WORD	K15226		; $10 020 - CUPB2 - Cupboard
	.WORD	K16220		; $11 021 - LFTPF - Lift platform bottom
	.WORD	K15562		; $12 022 - TREEF - Tree leaves small
	.WORD	K16400		; $13 023 - MOON - Moon
	.WORD	K16134		; $14 024 - LFFN1 - Rocket wing left top
	.WORD	K16152		; $15 025 - RTFN1 - Rocket wing right top
	.WORD	K15634		; $16 026 - LFFN2 - Rocket wing element left bottom
	.WORD	K15670		; $17 027 - RTFN2 - Rocket wing element right bottom
	.WORD	K15724		; $18 030 - LEFEX
	.WORD	K15764		; $19 031 - RITEX
	.WORD	K17736		; $1A 032 - REDOF
	.WORD	K17754		; $1B 033 - REDON
	.WORD	K16116		; $1C 034 - LFTRE
	.WORD	K16350		; $1D 035 - RADIA
	.WORD	K20250		; $1E 036 - RADLD
	.WORD	K16324		; $1F 037 - HIDLD
	.WORD	K16100		; $20 040 - RTTRE
	.WORD	K20230		; $21 041 - GRLAD
	.WORD	K17640		; $22 042 - LETR1
	.WORD	K17646		; $23 043 - LETR2
	.WORD	K17654		; $24 044 - LETR3
	.WORD	K16656		; $25 045 - BOX1P
	.WORD	K16742		; $26 046 - FDESK
	.WORD	K16500		; $27 047 - DOORP
	.WORD	K15376		; $28 050 - SHELP
	.WORD	K15464		; $29 051 - SHE2P
	.WORD	K15352		; $2A 052 - BARBK
	.WORD	K15332		; $2B 053 - CANIS
	.WORD	K15324		; $2C 054 - BARB2
	.WORD	K15316		; $2D 055 - BARB3
	.WORD	K15500		; $2E 056 - LEVEL - " LEVEL X " sign
	.WORD	K15264		; $2F 057 - CUPBP - Cupboard
	.WORD	K15206		; $30 060 - BARFR
	.WORD	K15200		; $31 061 - BARF2
	.WORD	K15154		; $32 062 - WNDOP
	.WORD	K15130		; $33 063 - DESKP  6x5 tiles
	.WORD	K15122		; $34 064 - DESK2
	.WORD	K15234		; $35 065 - CUPB3 - Cupboard
	.WORD	K15242		; $36 066 - CUPB4 - Cupboard
	.WORD	K15250		; $37 067 - CUPB5 - Cupboard
	.WORD	K16624		; $38 070 - BOX2P
	.WORD	K16616		; $39 071 - BOX3P
	.WORD	K15114		; $3A 072 - DESK3
	.WORD	K15106		; $3B 073 - DESK4
	.WORD	K15220		; $3C 074 - CUPB6 - Cupboard
	.WORD	K15100		; $3D 075 - DESK5
	.WORD	K15256		; $3E 076 - CUPB7 - Cupboard
	.WORD	K15472		; $3F 077 - SHE3P
	.WORD	K16576		; $40 100 - BOX4P
	.WORD	K15440		; $41 101 - DTREE
	.WORD	K15424		; $42 102 - DTRE2
	.WORD	K15432		; $43 103 - DTRE3
	.WORD	K23772		; $44 104 - LFTDI
	.WORD	K20132		; $45 105 - DIALF
	.WORD	K16770		; $46 106 - BIKRD
	.WORD	K17166		; $47 107 - NCGLD
	.WORD	K17024		; $48 110 - AUTOR
	.WORD	K17124		; $49 111 - BKCON
	.WORD	K17076		; $4A 112 - FRCON
	.WORD	K17152		; $4B 113 - BCON2
	.WORD	K17160		; $4C 114 - FCON2
	.WORD	K16570		; $4D 115 - BOX5P
	.WORD	K16632		; $4E 116 - BOX6P
	.WORD	K16562		; $4F 117 - BOX7P
	.WORD	K16554		; $50 120 - BOX8P
	.WORD	K16546		; $51 121 - BOX9P
	.WORD	K16540		; $52 122 - BX10P
	.WORD	K16532		; $53 123 - BX11P
	.WORD	K15072		; $54 124 - DESK6
	.WORD	K15064		; $55 125 - DESK7
	.WORD	K15056		; $56 126 - DESK8
	.WORD	K15050		; $57 127 - DESK9
	.WORD	K15042		; $58 130 - DES10
	.WORD	K15034		; $59 131 - DES11
	.WORD	K15026		; $5A 132 - DES12
	.WORD	K15020		; $5B 133 - DES13
	.WORD	K15012		; $5C 134 - DES14
	.WORD	K15004		; $5D 135 - DES15
	.WORD	K14776		; $5E 136 - DES16
	.WORD	K14770		; $5F 137 - DES17
	.WORD	K14762		; $60 140 - DES18
	.WORD	K16524		; $61 141 - BX12P
	.WORD	K14712		; $62 142 - WIND1 9x6 tiles
	.WORD	K14720		; $63 143 - WIND2 9x6 tiles
	.WORD	K14704		; $64 144 - WIND3 9x6 tiles
	.WORD	K14676		; $65 145 - WIND4 9x6 tiles
	.WORD	K14644		; $66 146 - TVCON 6x6 tiles
	.WORD	K15310		; $67 147 - BKNOB
;
.INCLUDE /S217E6.MAC/
;
K14640:	.BYTE	0			; TVSWT
K14641:	.BYTE	0			; TVCNT
K14642:	.WORD	0			; TVPPC
;
;NOTE: MS0515 version has no WHIGD, YELBX markers
;
; Room marker $66 146 - TVCON 6x6 tiles
K14644:	MOVB	#001, K14640
	MOV	#062260, R3
	MOV	#K14434, R4		; TVCNC
	MOVB	#006, K01604		; width = 6
	MOV	#000006, R1		; height = 6
	BR	K14756			; Copy tiles
; Room marker $65 145 - WIND4
K14676:	MOV	#062175, R3		; BUFFB+49.
	BR	K14724			; => WINDR
; Room marker $64 144 - WIND3
K14704:	MOV	#062157, R3		; BUFFB+35.
	BR	K14724			; => WINDR
; Room marker $62 142 - WIND1
K14712:	MOV	#062164, R3		; BUFFB+40.
	BR	K14724			; => WINDR
; Room marker $63 143 - WIND2 9x6 tiles
K14720:	MOV	#062177, R3		; BUFFB+51.
; WINDR:
K14724:	CMPB	K36214, #014		; RMDN compare to 12.
	BLO	K14740			; less than 12.
	JMP	K16466			; >= 12. => jump
K14740:	MOV	#K14346, R4		; copy from
	MOVB	#011, K01604		; width = 9.
	MOV	#000006, R1		; height = 6
K14756:	JMP	K16432			; Copy tiles
; Room marker $60 140 - DES18
K14762:	MOV	#062564, R3		; BUFFB+296.
	BR	K15134			; => DES2
; Room marker $5F 137
K14770:	MOV	#062602, R3		; BUFFB+310.
	BR	K15134			; => DES2
; Room marker $5E 136
K14776:	MOV	#062573, R3		; BUFFB+303.
	BR	K15134			; => DES2
; Room marker $5D 135
K15004:	MOV	#062555, R3		; BUFFB+289.
	BR	K15134			; => DES2
; Room marker $5C 134
K15012:	MOV	#062631, R3		; BUFFB+333.
	BR	K15134			; => DES2
; Room marker $5B 133
K15020:	MOV	#062616, R3		; BUFFB+322.
	BR	K15134			; => DES2
; Room marker $5A 132
K15026:	MOV	#062743, R3		; BUFFB+407.
	BR	K15134			; => DES2
; Room marker $59 131
K15034:	MOV	#062733, R3		; BUFFB+399.
	BR	K15134			; => DES2
; Room marker $58 130
K15042:	MOV	#062723, R3		; BUFFB+391.
	BR	K15134			; => DES2
; Room marker $57 127
K15050:	MOV	#062705, R3		; BUFFB+377.
	BR	K15134			; => DES2
; Room marker $56 126
K15056:	MOV	#062675, R3		; BUFFB+369.
	BR	K15134			; => DES2
; Room marker $55 125
K15064:	MOV	#062663, R3		; BUFFB+359.
	BR	K15134			; => DES2
; Room marker $54 124
K15072:	MOV	#062654, R3		; BUFFB+352.
	BR	K15134			; => DES2
; Room marker $3D 075
K15100:	MOV	#062542, R3		; UFFB+278
	BR	K15134			; => DES2
; Room marker $3B 073
K15106:	MOV	#062532, R3		; BUFFB+270.
	BR	K15134			; => DES2
; Room marker $3A 072
K15114:	MOV	#062515, R3		; BUFFB+257.
	BR	K15134			; => DES2
; Room marker $34 064
K15122:	MOV	#062640, R3		; BUFFB+340.
	BR	K15134			; => DES2
; Room marker $33 063 - DESKP 6x5 tiles
K15130:	MOV	#062625, R3		; BUFFB+329.
; DES2:
K15134:	MOV	#K14310, R4		; copy from DESKC
	MOVB	#006, K01604		; width = 6
	MOV	#000005, R1		; height = 5
	BR	K15420			; => PSTLE
; Room marker $32 062 - WNDOP
K15154:	MOV	#062342, R3		; BUFFB+150.
	MOV	#K14302, R4		; WNDOC
	MOVB	#003, K01604		; width = 3
	MOV	#000002, R1		; height = 2
	BR	K15420			; => PSTLE
; Room marker $31 061 - BARF2
K15200:	MOV	#064026, R3		; BUFFO+394.
	BR	K15212			; => BAR4
; Room marker $30 060 - BARFR 2x3 tiles
K15206:	MOV	#064020, R3		; BUFFO+388.
K15212:	MOV	#K13746, R4		; copy from BARFC
	BR	K15362
; Room marker $3C 074 - CUPB6 - Cupboard
K15220:	MOV	#062364, R3		; BUFFB+168.
	BR	K15270			; => CUPRP
; Room marker $10 020 - CUPB2 - Cupboard
K15226:	MOV	#062546, R3		; BUFFB+282.
	BR	K15270			; => CUPRP
; Room marker $35 065 - CUPB3 - Cupboard
K15234:	MOV	#062532, R3		;BUFFB+270.
	BR	K15270			; => CUPRP
; Room marker $36 066 - CUPB4 - Cupboard
K15242:	MOV	#062516, R3		; BUFFB+258.
	BR	K15270			; => CUPRP
; Room marker $37 067 - CUPB5 - Cupboard
K15250:	MOV	#062500, R3		; BUFFB+244.
	BR	K15270			; => CUPRP
; Room marker $3E 076 - CUPB7 - Cupboard
K15256:	MOV	#062401, R3		; BUFFB+181.
	BR	K15270			; => CUPRP
; Room marker $2F 057 - ??? 8x5 tiles
K15264:	MOV	#062517, R3		; BUFFB+259.
; CUPRP:
K15270:	MOV	#K14036, R4		; CUPBC
	MOVB	#005, K01604		; height = 5
	MOV	#000010, R1		; width = 8.
	BR	K15420			; => PSTLE Copy tiles
; Room marker $67 147 - BKNOB
K15310:	MOV	#062726, R3		; BUFFB+394.
	BR	K15356			; => BAR2
; Room marker $2D 055 - BARB3
K15316:	MOV	#062732, R3		; BUFFB+398.
	BR	K15356			; => BAR2
; Room marker $2C 054 - BARB2
K15324:	MOV	#062735, R3		; BUFFB+401.
	BR	K15356			; => BAR2
; Room marker $2B 053 - CANIS 5x3 tiles
K15332:	MOV	#062740, R3		; BUFFB+404.
	MOV	#K14255, R4		; CANCR
	MOVB	#005, K01604		; width = 5
	BR	K15370			; Copy tiles, height = 3
; Room marker $2A 052 - BARBK 2x3 tiles
K15352:	MOV	#062665, R3		; BUFFB+361.
K15356:	MOV	#K14274, R4		; BARBC
K15362:	MOVB	#002, K01604		; width = 2
K15370:	MOV	#000003, R1		; height = 3
	BR	K15420			; PSTLE Copy tiles
; Room marker $28 050 - SHELP 7x9 tiles
K15376:	MOV	#062471, R3		; BUFFB+237.
K15402:	MOV	#K14156, R4		; SHELC
	MOVB	#007, K01604		; width = 7
	MOV	#000011, R1		; height = 9.
; PSTLE:
K15420:	JMP	K16432			; => KOONT
; Room marker $42 102 - DTRE2
K15424:	MOV	#063506, R3		; BUFFO+186.
	BR	K15444
; Room marker $43 103 - DTRE3
K15432:	MOV	#063475, R3		; BUFFO+177.
	BR	K15444
; Room marker $41 101 - DTREE 5x10 tiles
K15440:	MOV	#063461, R3		; BUFFO+165.
K15444:	MOV	#K13754, R4		; DTREC
	MOVB	#005, K01604		; width = 5
	MOV	#000012, R1		; height = 10.
	BR	K15420			; Copy tiles
; Room marker $29 051 - SHE2P
K15464:	MOV	#062456, R3		; BUFFB+226.
	BR	K15402
; Room marker $3F 077
K15472:	MOV	#062503, R3		; BUFFB+247.
	BR	K15402
; Room marker $2E 056 - " LEVEL X " sign
K15500:	MOVB	K36214, K01602		; RMDN room level
	MOV	#000134, R0		; 92.
	SUB	K01602, R0
	MOVB	R0, <K15550+7>		; put digit in " LEVEL X " string
	MOV	#000011, R1
	MOV	#K15550, R2		; " LEVEL X "
	MOV	#127105, R3
	CALL	K04604			; BUFOM - Draw string as tiles
	DEC	(SP)
	JMP	K13422
;
K15550:	.ASCIZ	/@LEVEL@X@/
;
; Room marker $12 022 - TREEF - Tree leaves small, 5x4 tiles
K15562:	MOV	#K15610, R4		; copy from
	MOVB	#005, K01604		; width = 5
	MOV	#000004, R1		; height = 4
	MOV	#063477, R3		; BUFFO+179.
	JMP	K16432			; Copy tiles
; Tree leaves small, 5x4 tiles
K15610:	.BYTE	013,014,015,015,016
	.BYTE	017,020,020,020,021
	.BYTE	017,020,020,020,025
	.BYTE	022,023,024,025,377
;
; Room marker $16 026 - LFFN2 - Rocket wing element left bottom, 2x3 tiles
K15634:	MOV	#K15662, R4		; copy from
	MOVB	#002, K01604		; width = 2
	MOV	#000003, R1		; height = 3
	MOV	#062570, R3		; BUFFB+300.
	JMP	K16432			; Copy tiles
; Rocket wing element left bottom, 2x3 tiles
K15662:	.BYTE	370,370,370,321,321,000
;
; Room marker $17 027 - RTFN2 - Rocket wing element right bottom, 2x3 tiles
K15670:	MOV	#K15716, R4		; copy from
	MOVB	#002, K01604		; width = 2
	MOV	#000003, R1		; height = 3
	MOV	#062600, R3		; BUFFB+309.
	JMP	K16432			; Copy tiles
; Rocket wing element right bottom, 2x3 tiles
K15716:	.BYTE	370,370,320,370,000,320
;
; Room marker $18 030 - LEFEX 3x3 tiles
K15724:	MOV	#K15752, R4		; copy from
	MOVB	#003, K01604		; width = 3
	MOV	#000003, R1		; height = 3
	MOV	#062731, R3		; BUFFB+397.
	JMP	K16432			; Copy tiles
; Object in tiles 3x3 tiles
K15752:	.BYTE	000,000,316
	.BYTE	000,316,317
	.BYTE	316,317,317
	.EVEN
;
; Room marker $19 031 - RITEX 3x3 tiles
K15764:	MOV	#K16012, R4		; copy from
	MOVB	#003, K01604		; width = 3
	MOV	#000003, R1		; height = 3
	MOV	#062737, R3		; BUFFB+403.
	JMP	K16432			; Copy tiles
; Object in tiles 3x3 tiles
K16012:	.BYTE	315,000,000
	.BYTE	317,315,000
	.BYTE	317,317,315
	.EVEN
;
; Room marker $05 005 - RKTPP - Rocket upper part 3x4 tiles
K16024:	MOV	#070616, R4		; copy from
	MOVB	#003, K01604		; width = 3
	MOV	#000004, R1		; height = 4
	MOV	#062334, R3		; BUFFB+144.
	BR	K16432			; Copy tiles
	NOP1
; Object in tiles, 5x3 tiles
K16052:	.BYTE	001,037,040,036,036
	.BYTE	041,036,036,036,036
	.BYTE	001,042,043,044,044
; Object in tiles, 3x2 tiles
K16071:	.BYTE	047,050,051,036,052,053
	.EVEN
; Room marker $20 040 - ??? 3x2 tiles
K16100:	MOV	#K16071, R4		; copy from
	MOV	#000003, R2		; width = 3
	MOV	#000002, R1		; height = 2
	BR	K16234			; => SCOBD
; Room marker $1C 034 - ??? 5x3 tiles
K16116:	MOV	#K16052, R4		; copy from
	MOV	#000005, R2		; width = 5
	MOV	#000003, R1		; height = 3
	BR	K16234			; => SCOBD
; Room marker $14 024 - Rocket wing left top, 2x6 tiles
K16134:	MOV	#K16170, R4
	MOV	#000002, R2		; width = 2
	MOV	#000006, R1		; height = 6
	BR	K16234			; => SCOBD
; Room marker $15 025 - Rocket wing right top, 2x6 tiles
K16152:	MOV	#K16204, R4
	MOV	#000002, R2		; width = 2
	MOV	#000006, R1		; height = 6
	BR	K16234			; => SCOBD
; Rocket wing left top, 2x6 tiles
K16170:	.BYTE	000,366,366,370,370,370,370,370,370,370,321,000
; Rocket wing right top, 2x6 tiles
K16204:	.BYTE	365,000,370,365,370,370,370,370,370,370,000,320
;
; Room marker $11 021 - LFTPF - Lift platform bottom
K16220:	MOV	#070602, R4		; PLATF
	MOV	#000001, R1		; height = 1
	MOV	#000006, R2		; width = 6
; SCOBD:
K16234:	MOV	(SP), R0
	MOVB	(R0)+, K01610		; offset low
	MOVB	(R0), K01611		; offset high
	MOV	R0, (SP)
	MOV	K01610, R3		; get offset
	ADD	#K43310, R3		; + base address tiles for current room
K16260:	PUSH	R2			; <
	PUSH	R3
K16264:	MOVB	(R4)+, (R3)+		; | <
	SOB	R2, K16264		; | repeat
	POP	R3
	ADD	#000040, R3		; | + 32.
	POP	R2
	SOB	R1, K16260		; repeat
	JMP	K13422
; ??? 3x3 tiles
K16306:	.BYTE	026,027,030
	.BYTE	031,032,033
	.BYTE	034,035,036
; ??? 2x2 tiles
K16317:	.BYTE	037,037
	.BYTE	037,037
	.EVEN
;
; Room marker $1F 037 - ??? 2x2 tiles
K16324:	MOV	#K16317, R4		; copy from
	MOVB	#002, K01604		; width = 2
	MOV	#000002, R1		; height = 2
	MOV	#064235, R3
	BR	K16432			; Copy tiles
; Room marker $1D 035 - ??? 3x3 tiles
K16350:	CLRB	<L14472+2>		; clear (DECEN+1)
	MOV	#K16306, R4		; copy from
	MOVB	#003, K01604		; width = 3
	MOV	#000003, R1		; height = 3
	MOV	#064040, R3
	BR	K16432			; Copy tiles
; Room marker $13 023 - Moon 2x2 tiles
K16400:	MOV	#062245, R3
	CMPB	#000001, @#125555
	BNE	K16466
	MOV	#K16474, R4		; copy from
	MOVB	#002, K01604		; width = 2
	MOV	#000002, R1
; Entry point: Copy tiles; K01604 = width, R1 = height, R4 = address to copy from
K16432:	MOV	#000040, R2		; 32. = row width
	ADD	#K43310, R3		; + base address tiles for current room
	PUSH	R5
K16444:	MOVB	K01604, R5		; < width  !!MUT-ARG!!
	PUSH	R3
K16452:	MOVB	(R4)+, (R3)+		; | < copy tile
	SOB	R5, K16452		; | repeat
	POP	R3
	ADD	R2, R3
	SOB	R1, K16444		; repeat
	POP	R5
K16466:	DEC	(SP)
	JMP	K13422
; Moon in tiles, 2x2 tiles
K16474:	.BYTE	032,033
	.BYTE	034,035
;
; Room marker $27 047 - Door 5x8 tiles
K16500:	MOV	#K14106, R4		; copy from DOORC
	MOVB	#005, K01604		; width = 5
	MOV	#000010, R1		; height = 8.
	MOV	#062540, R3
	BR	K16432			; Copy tiles
; Room marker $61 141 - ??? 11x7 tiles
K16524:	MOV	#063023, R3
	BR	K16662
; Room marker $53 123 - ??? 8x4 tiles
K16532:	MOV	#064026, R3
	BR	K16636
; Room marker $52 122 - ??? 10x7 tiles
K16540:	MOV	#063263, R3
	BR	K16602
; Room marker $51 121 - ??? 11x7 tiles
K16546:	MOV	#063655, R3
	BR	K16662
; Room marker $50 120 - ??? 10x7 tiles
K16554:	MOV	#063255, R3
	BR	K16602
; Room marker $4F 117 - ??? 11x7 tiles
K16562:	MOV	#063633, R3
	BR	K16662
; Room marker $4D 115 - ??? 11x7 tiles
K16570:	MOV	#063615, R3
	BR	K16662
; Room marker  $40 100 - ??? 10x7 tiles
K16576:	MOV	#063637, R3
K16602:	MOVB	#000012, K01604		; width = 10.
	MOV	#K17527, R4		; copy from
	BR	K16674			; Copy tiles; height = 7
; Room marker $39 071 - ??? 11x7 tiles
K16616:	MOV	#063636, R3
	BR	K16662
; Room marker $38 070 - ??? 11x7 tiles
K16624:	MOV	#063617, R3
	BR	K16662
; Room marker $4E 116 - ??? 8x4 tiles
K16632:	MOV	#063765, R3
K16636:	MOVB	#000010, K01604		; width = 8.
	MOV	#K16702, R4		; copy from
	MOV	#000004, R1		; height = 4
	BR	K16432			; Copy tiles
; Room marker $25 045 - ??? 11x7 tiles
K16656:	MOV	#063666, R3
K16662:	MOVB	#000013, K01604		; width = 11.
	MOV	#K17412, R4		; copy from
K16674:	MOV	#000007, R1		; height = 7
	BR	K16432			; Copy tiles
; Box??? 8x4 tiles
K16702:	.BYTE	002,003,003,003,003,003,003,004
	.BYTE	005,006,006,006,006,006,006,007
	.BYTE	005,006,006,006,006,006,006,007
	.BYTE	010,011,011,011,011,011,011,012
;
; Room marker $26 046 - FDesk?? 6x4 tiles
K16742:	MOV	#K17362, R4		; copy from FDESC
	MOVB	#006, K01604		; width = 6
	MOV	#000004, R1		; height = 4
	MOV	#064044, R3
K16764:	JMP	K16432			; Copy tiles
; Room marker $46 106 - ??? 11x5 tiles
K16770:	MOVB	K17200, R0		; get BIKER
	INCB	R0
	BNE	K17044
	MOV	#K17204, R4		; copy from BIKEC
	MOVB	#000013, K01604		; width = 11.
	MOV	#000005, R1		; height = 5
	MOV	#063730, R3
	BR	K16764
; Room marker $48 110
K17024:	MOVB	K17200, R0		; get BIKER
	CMPB	R0, #376		; 254.
	BNE	K17044
	MOVB	#020, K17200		; set BIKER = 16.
K17044:	JMP	K16466
; ??? 4x4 tiles
K17050:	.BYTE	211,212,212,213		; CONS2
	.BYTE	377,377,041,377
	.BYTE	377,377,041,377
	.BYTE	377,377,041,377
; ??? 5x1 tiles
K17070:	.BYTE	322,322,323,323,325	; CONS1
	.EVEN
;
; Room marker $4A 112 - FRCON 4x4 tiles
K17076:	MOV	#063760, R3
K17102:	MOV	#K17050, R4		; copy from
	MOVB	#004, K01604		; width = 4
	MOV	#000004, R1		; height = 4
	JMP	K16432			; Copy tiles
; Room marker $49 111 - BKCON 5x1 tiles
K17124:	MOV	#063057, R3
K17130:	MOV	#K17070, R4		; copy from
	MOVB	#005, K01604		; width = 5
	MOV	#000001, R1		; height = 1
	JMP	K16432			; Copy tiles
; Room marker $4B 113 - BCON2 5x1 tiles
K17152:	MOV	#063034, R3
	BR	K17130
; Room marker $4C 114 - FCON2 4x4 tiles
K17160:	MOV	#063735, R3
	BR	K17102
; Room marker $47 107
K17166:	MOVB	#132, K37662		; set SPEED = 90.
	JMP	K16466
;
K17200:	.BYTE	0, 0			; BIKER
K17202:	.BYTE	0, 0			; BIKPS
;
.INCLUDE /S21E80.MAC/
;
K17635:	.BYTE	000			; LETNO
	.BYTE	000,000
;
; Room marker $22 042 - LETR1
K17640:	MOV	#000001, R0
	BR	K17660
; Room marker $23 043 - LETR2
K17646:	MOV	#000002, R0
	BR	K17660
; Room marker $24 044 - LETR3
K17654:	MOV	#000003, R0
K17660:	MOVB	R0, K17635		; set LETNO
	BR	K17746
;
K17666:	.ASCII	/OLONEL BRIGGSY  EXPLORER/	; LETC2
K17716:	.WORD	0			; BIKMR
K17720:	.ASCII	/ BIKE ARRIVED /	; BIKAM
;
; Room marker $1A 032 - REDOF
K17736:	MOV	#000240, R0		; NOP command
K17742:	MOV	R0, K04114
K17746:	DEC	(SP)
	JMP	K13422			; => RETRT
; Room marker $1B 033 - REDON
K17754:	MOV	#110013, R0		; "MOVB R0,(R3)" command
K17760:	BR	K17742
; Room marker $03 003 - FILLB - Fill the whole room with tile
K17762:	MOV	(SP), R3
	CLR	R0
	BISB	(R3), R0		; get tile
	SWAB	R0
	BISB	(R3), R0		; get same tile again
	MOV	#L25424, R3		; BUFFB Back tile screen address
	MOV	#000110, R1		; 72. * 8. = 576.
K20004:	MOV	R0, (R3)+		; < fill 2 tiles
	MOV	R0, (R3)+		; | fill 2 tiles
	MOV	R0, (R3)+		; | fill 2 tiles
	MOV	R0, (R3)+		; | fill 2 tiles
	SOB	R1, K20004		; repeat
	JMP	K13422
; Room marker $04 004 - ONECR - Fill one tile
K20022:	POP	R3
	MOVB	(R3)+, R0
	MOVB	(R3)+, K01606
	MOVB	(R3), 001607
	PUSH	R3
	MOV	K01606, R3
	ADD	#K43310, R3		; + base address tiles for current room
	MOVB	R0, (R3)
	JMP	K13422
; Room marker $0F 017 - TLDTN
K20056:	MOV	#000312, R0
	POP	R3
	MOVB	(R3)+, K01606
	MOVB	(R3), 001607
	PUSH	R3
	MOV	K01606, R3
	ADD	#K43310, R3		; + base address tiles for current room
	MOVB	R0, (R3)+
	INCB	R0
	MOVB	R0, (R3)
	JMP	K13422
; Room marker $00 000 - HORLN - Fill horizontally W with tile
K20120:	MOV	#000001, R2
	BR	K20156
;
K20126:	.WORD	153006,062206		; height = 6, tile = 326, offset lo, offset hi
;
; Room marker $45 105 - Fill diagonally right-down with tile 326, height 6
K20132:	MOV	#K20126, (SP)
; Room marker $06 006 - Fill diagonally right-down
K20136:	MOV	#000041, R2		; offset = 33.
	BR	K20156			; go fill
; Room marker $07 007 - Fill diagonally left-down
K20144:	MOV	#000037, R2		; offset = 31.
	BR	K20156			; go fill
; Room marker $01 001 - Fill vertically H with tile
K20152:	MOV	#000040, R2		; offset = 32.
K20156:	POP	R0
	CLR	R1
	BISB	(R0)+, R1		; get height
	MOVB	(R0)+, K01604		; get tile
	MOVB	(R0)+, K01610		; get offset low
	MOVB	(R0), K01611		; get offset hi
	PUSH	R0
	MOV	K01610, R3		; offset
	ADD	#K43310, R3		; + base address tiles for current room
	MOVB	K01604, R0		; tile
K20216:	MOVB	R0, (R3)		; < put tile
	ADD	R2, R3			; | + offset
	SOB	R1, K20216		; repeat
	JMP	K13422
; Room marker $21 041 - GRLAD - Black on green ladder
K20230:	MOVB	#054, K01604		; 44.
	BR	K20266
; Room marker $0E 016 - Wide white ladder
K20240:	MOVB	#011, K01604		; 9.
	BR	K20266
; Room marker $1E 036 - Black ladder
K20250:	MOVB	#045, K01604		; 37.
	BR	K20266
; Room marker $08 010 - White ladder
K20260:	MOVB	#005, K01604		; 5.
K20266:	MOV	#000037, R2		; 31.
	POP	R0
	CLR	R1
	BISB	(R0)+, R1		; get height
	MOVB	(R0)+, K01610		; get offset low
	PUSH	R0
	MOVB	(R0), K01611		; get offset hi
	MOV	K01610, R3		; offset
	ADD	#K43310, R3		; + base address tiles for current room
	MOVB	K01604, R0		; get tile
K20326:	MOVB	R0, (R3)+		; < put tile
	INCB	R0			; | next tile
	MOVB	R0, (R3)		; | put tile
	DECB	R0			; | prev tile
	ADD	R2, R3			; | + offset
	SOB	R1, K20326		; repeat
	JMP	K13422
; Room marker $09 011 - ROCKS - Supertile, 8x6 tiles
K20346:	MOV	#L25424, R2		; BUFFB Back tile screen address
	MOV	#000003, R1
K20356:	MOVB	#004, K01604		; <
K20364:	POP	R3
	CLR	R0
	BISB	(R3)+, R0		; get Supertile number
	PUSH	R3
	PUSH	R2
	CALL	K01434
	ASL	R0			; *2
	MOV	K20466(R0), R3		; get Supertile address from the table
	POP	R2
	MOV	#000006, R1		; height 6
K20416:	MOV	#000010, R5		; <  width 8.
K20422:	MOVB	(R3)+, (R2)+		;   <  copy tile number
	SOB	R5, K20422		;   repeat
	ADD	#000030, R2		;   next line
	SOB	R1, K20416		; repeat
	CALL	K01434
	ADD	#000010, R2
	DECB	K01604
	BNE	K20364
	ADD	#000240, R2
	SOB	R1, K20356		; repeat
	DEC	(SP)
	JMP	K13422
;
; Supertiles and Stashes
.INCLUDE /S2TILE.MAC/
;
K23746:	.WORD	0			; NERST
K23750:	.BYTE	000			; TEMPN
	.EVEN
;
; Room marker $0B 013 - DIBL2 - Fill triangle up-right
K23752:	MOV	#177740, R3
	BR	K24010
; Room marker $0C 014 - DIBL3 - Fill triangle right-up
K23760:	MOV	#177741, R3
	BR	K24010
; LFTDT:
K23766:	.WORD	163406
	.WORD	62146			; BUFFB+26
; Room marker $44 104 - LFTDI
K23772:	MOV	#K23766, (SP)		; LFTDT
; Room marker $0D 015 - DIBL4 - Fill triangle right-down
K23776:	MOV	#000041, R3		; 33.
	BR	K24010			; => DIBLK
; Room marker $0A 012 - DIBL1 - Fill triangle down-right
K24004:	MOV	#000040, R3		; 32.
K24010:	MOV	R3, <K24062+2>		; set (DIBLD+1)
	POP	R0
	CLR	R2
	BISB	(R0)+, R2
	MOV	R2, R1
	MOVB	(R0)+, R5
	MOVB	(R0)+, K01610
	PUSH	R0
	MOVB	(R0), K01611
	MOV	K01610, R3
	ADD	#K43310, R3		; + base address tiles for current room
K24050:	PUSH	R2			; <
	PUSH	R3
K24054:	MOVB	R5, (R3)+
	SOB	R2, K24054		; repeat
	POP	R3
K24062:	ADD	#000040, R3		;!!MUT-ARG!!
	POP	R2
	DEC	R2
	BIC	#177400, R2		; low byte
	SOB	R1, K24050		; repeat
	JMP	K13422			; => RETRT
; Room marker $02 002 - BLOCK - Fill rectangle WxH with tile
K24104:	POP	R0			;
	CLR	R2
	BISB	(R0)+, R2		; get width
	CLR	R1
	BISB	(R0)+, R1		; get height
	MOVB	(R0)+, R5		; get tile index
	MOVB	(R0)+, K01610		; get offset low
	PUSH	R0
	MOVB	(R0), K01611		; get offset high
	MOV	K01610, R3		; offset
	ADD	#K43310, R3		; + base address tiles for current room
K24142:	PUSH	R2			; <
	PUSH	R3
K24146:	MOVB	R5, (R3)+		; | <  put one tile
	SOB	R2, K24146		; | repeat
	POP	R3
	ADD	#000040, R3		; | next row
	POP	R2
	SOB	R1, K24142		; repeat
	JMP	K13422			; => RETRT
;
; SPARES table, 22. records
K24170:
	.BYTE	033, 007, 106		; Motorbike
	.BYTE	000, 014, 107		; Increase glider distance
	.BYTE	033, 000, 110		; Auto run on final screen
	.BYTE	026, 030, 113		; Console
	.BYTE	026, 030, 114
	.BYTE	033, 016, 113		; Console
	.BYTE	033, 016, 114
	.BYTE	015, 016, 136
	.BYTE	033, 015, 070
	.BYTE	033, 011, 071
	.BYTE	033, 005, 053
	.BYTE	007, 033, 070
	.BYTE	022, 031, 100
	.BYTE	031, 014, 100
	.BYTE	017, 034, 070
	.BYTE	017, 005, 070
	.BYTE	017, 034, 100
	.BYTE	015, 003, 103
	.BYTE	023, 036, 101
	.BYTE	035, 037, 102
	.BYTE	026, 026, 104
	.BYTE	026, 026, 105
;
; RMDUN: End of the room sequence
K24272:	MOV	#K24352, <K13422+2>	; set return point = RETRX
	MOV	#K24170, R4		; SPARES table address
	MOV	#000032, R1		; 26.
; SPART:
K24310:	CMPB	K36214, (R4)		; <  check RMDN
	BNE	K24360			; => SPARW
	CMPB	K36215, 000001(R4)	; check RMAC
	BNE	K24360			; => SPARW
	CLR	R0
	BISB	000002(R4), R0
	ASL	R0
	MOV	K13426(R0), R3		; get addr from ROUTS table
	PUSH	R4
	PUSH	R1
	PUSH	R3
	JMP	(R3)
; RETRX:
K24352:	POP	R3
	POP	R1
	POP	R4
; SPARW:
K24360:	ADD	#000003, R4		; next record
	SOB	R1, K24310		; repeat
	MOV	#K13414, <K13422+2>	; BAKWD
	CMPB	K36214, #037		; RMDN == 31. ?
	BNE	K24436			; no => NWATR
; Room level = 31. = lower level with water
	MOV	#000400, R1		; 256.
	MOV	#126463, R3		; BUFFB+543.
	MOV	#127563, R2		; BUFFO+543.
; WATER:
K24420:	CMPB	(R3), #000307		; 199.
	BHIS	K24430			; => NTWCR
	CLRB	(R2)
; NTWCR:
K24430:	DEC	R3
	DEC	R2
	SOB	R1, K24420		; repeat => WATER
; NWATR:
K24436:	MOV	#K23030, R4		; NROBT address
	MOV	#000041, R1		; 33. records
; NROBL:
K24446:	CMPB	K36214, (R4)		; <  check RMDN room level
	BNE	K24556
	CMPB	K36215, 000001(R4)	; check RMAC
	BNE	K24556
	MOVB	000002(R4), K01610
	MOVB	000003(R4), K01611
	MOV	K01610, R3
	ADD	#K43310, R3		; + base address tiles for current room
	MOVB	(R3), R0
	INCB	R0
	BNE	K24530
	MOVB	#000051, (R3)
	MOVB	#000052, 000001(R3)
; YOGRT:
K24530:	SUB	#001100, R3
	MOVB	#000144, (R3)+		; 100.
	MOVB	#000144, (R3)		; 100.
	MOV	R4, R3
	ADD	#000004, R3
	MOV	R3, K23746		; set NERST
; NNOOS:
K24556:	ADD	#000016, R4		; 14.
	SOB	R1, K24446		; repeat => NROBL
	CALL	K02202			; DOPIC - Show the room on the screen
	MOVB	K17635, R0		; get LETNO
	DECB	R0
	BNE	K24620			; => LETP2
	MOV	#K24616, R3
	MOV	#050063, R2
	MOV	#000001, R1		; 1.
	BR	K24646			; => KOON3
;
K24616:	.WORD	177777	;???
; LETP2:
K24620:	DECB	R0
	BNE	K24662
	MOV	#000040, 002010
	MOV	#K17666, R3		; "OLONEL BRIGGSY  EXPLORER"
	MOV	#040023, R2
	MOV	#000022, R1		; 18.
; KOON3:
K24646:	CALL	K01704			; PRINT string
	MOV	#000001, 002010
	BR	K24764			; => NXMAN
K24662:	DECB	R0
	BNE	K24764			; => NXMAN
	MOV	#000040, 002010
	MOV	#017710, R3
	MOV	#040023, R2
	MOV	#000006, R1
	BR	K24646			; => KOON3
; PLATR procedure
K24712:	MOV	K24746, R3		; PLAPS
	MOV	#000004, R1		; 4.
K24722:	MOVB	(R2)+, (R3)+		; <
	SOB	R1, K24722		; repeat
	SUB	#001100, R3
	MOV	#000004, R1
K24736:	MOVB	#001, -(R3)		; <
	SOB	R1, K24736		; repeat
	RETURN
;
K24746:	.BYTE	041, 255		; PLAPS
	.BYTE	000			; PLADI
	.BYTE	012			; PLADS
	.BYTE	157, 157, 157, 157	; BPLAT
	.BYTE	322, 323, 323, 325	; FPLAT
K24762:	.BYTE	000, 000		; DEFGH
;
; NXMAN:
K24764:	CALL	K46120			; BUFCL Fill Ninja tile screen
	MOV	#L24324, R3		; BUFFD
	MOV	#000220, R1
K25000:	CLR	(R3)+			; <
	CLR	(R3)+			; |
	SOB	R1, K25000		; repeat
K25006:	MOV	#000001, R1
K25012:	MOV	#L30724, R3		;WARN Enemy 0 tile screen address
	SUB	#004400, R3
	MOV	#000001, R0
K25026:	MOVB	R0, (R3)		; <
K25030:	INC	R3			; | !!MUT-CMD!!
	SOB	R1, K25026		; repeat
	MOVB	R0, <K25006+2>
	MOV	<K13332+2>, R3		; (RM+1)
	CMPB	(R3), #072		; room == 58. ?
	BNE	K25072
; Room 58. = $3A
	MOV	#000006, R1		; 6.
	MOV	#K26660, R2		; " LIFT "
	MOV	#126665, R3
	CALL	K04604			; BUFOM - Draw string as tiles
K25072:	CMPB	(R3), #074		; room == 60. ?
	BNE	K25120
; Room 60. = $3C
	MOV	#000006, R1		; 6.
	MOV	#K26660, R2		; " LIFT "
	MOV	#126700, R3
	CALL	K04604			; BUFOM - Draw string as tiles
K25120:	CMPB	(R3), #000236		; room == 158. ?
	BNE	K25216
; Room 158. = $9E
	MOV	#024752, R2
	CALL	K24712			; PLATR
	MOV	#024751, R3
	TSTB	024750
	BEQ	K25172
	INCB	(R3)
	INC	024746
	CMPB	#023, (R3)
	BNE	K25206
	DECB	024750
	BR	K25206
K25172:	DEC	024746
	DECB	(R3)
	BNE	K25206
	INCB	024750
K25206:	MOV	#024756, R2
	CALL	K24712			; PLATR
K25216:	CALL	L10200			; GTBAK
	CALL	K36220			; MANAR
	CALL	L10236			; GTBK2
	CLR	R1
	CMPB	050156, #144		; == 100. ?
	BNE	K25250
	MOVB	@K23746, R1		; get new NEAR value
; KIPER
K25250:	MOV	R1, R0			; R0 = object near
	MOV	#K33465, R3		; NEAR value address
	MOVB	(R3), R5		; get NEAR value
	MOVB	R0, (R3)		; set new NEAR value
	CMPB	R0, R5			; compare old/new NEAR values
	BEQ	K25272			; same, no need to update => jump
	CALL	K04674			; NERDR - update NEAR indicator
; VECTN:
K25272:	JMP	@#000000		;!!MUT-ARG!!
; ENDVC:
K25276:	CALL	K36266			; MANDR
	CALL	K36220			; MANAR
	CALL	K46150			; BUFC2 Fill Enemy 0/1 tile screens
	MOVB	K36211, R0		; get MAND
	ADD	#000007, R0		; + 7.
	CMPB	R0, #000010		; == 8. ?
	BLO	K25362			; => NDRON
	MOV	K36212, R3		; get MANPS
	MOV	#126566, R2		; BUFFO+34.
	CALL	K55630			; LFEDQ
	ADD	R2, R3
	MOV	#000002, R1
	TSTB	(R3)
K25354:	BNE	K25362
	CALL	L14472			; DECEN
; NDRON:
K25362:	MOVB	077520, R0
	INCB	R0
	BIC	#177774, R0
	MOVB	R0, 077520
	ASL	R0
	MOV	077506(R0), 077516
	MOVB	077530, R0
	INCB	R0
	CMPB	R0, #000003
	BNE	K25426
	CLR	R0
K25426:	MOVB	R0, 077530
	ASL	R0
	MOV	077522(R0), R3
	MOV	R3, <K27556+2>
	MOV	#033543, R4
	MOV	#000145, R1
K25454:	PUSH	R1
	MOV	#000007, R1
	MOVB	#006, K01604
	MOVB	000013(R4), R0
	CMPB	R0, #000001		; == 1 ?
	BNE	K25506
	CALL	K32176			; PANTS
K25506:	CMPB	R0, #000006		; == 6. ?
	BNE	K25520
	CALL	K32176			; PANTS
K25520:	CMPB	R0, #000004		; == 4 ?
	BNE	K25532
	CALL	K32176			; PANTS
K25532:	CMPB	R0, #000011		; == 9. ?
	BNE	K25544
	CALL	K32176			; PANTS
K25544:	CMPB	R0, #000012		; == 10. ?
	BNE	K25556
	CALL	K32176			; PANTS
K25556:	CALL	K36072			; G1DI2
	CALL	K26572			; LPRSY
	MOV	R4, R3
	ADD	#000003, R3
	MOV	R3, 047720
	MOV	R3, 055316
	MOVB	K36214, R1		; get RMDN room level
	MOVB	(R4), R0
	BIC	#177600, R0
	CMPB	R0, R1
	BNE	K25646
	CMPB	K36215, 000002(R4)	; check RMAC
	BNE	K25646			; => NDRGA
	CALL	L10200			; GTBAK
	CALL	K36112			; GRDAR
	CALL	L10236			; GTBK2
; NDRGA:
K25646:	MOVB	K36214, R1		; get RMDN room level
	MOVB	(R4), R0
	BIC	#177600, R0
	SUB	R1, R0
	ADD	#000003, R0
	CMPB	R0, #000006
	BLO	K25700
	JMP	K30606
K25700:	MOVB	K36215, R0		; get RMAC
	CLR	R5
	BISB	000002(R4), R5
	SUB	R5, R0
	ADD	#000006, R0
	CMPB	R0, #000014
	BLO	K25732
	JMP	K30606
K25732:	CMPB	000013(R4), #000002
	BLO	K25746
	JMP	K26310
K25746:	MOVB	000001(R4), R1
	MOVB	000004(R4), K01611
	MOVB	000003(R4), K01610
	MOV	K01610, R3
	MOVB	#177777, 001607
	TSTB	(R4)
	BPL	K26060
	CALL	K01314			; Get random number
	BIC	#177774, R0		; 0..3
	BEQ	K26060
	INCB	001607
	MOVB	000001(R4), R0
	ADD	#000012, R0
	MOVB	R0, K01606
	MOVB	K36210, R0		; get MANA
	ADD	#000012, R0
	CMPB	R0, K01606
	BHIS	K26060
	INCB	001607
; GTRO2:
K26060:	TSTB	K36264			; check DIR
	BEQ	K26210
	CMPB	000002(R4), 000005(R4)
	BNE	K26160
	CMPB	000006(R4), R1
	BNE	K26160
; STFFQ:
K26104:	DECB	001607
	BEQ	K26132
	MOVB	000013(R4), R0
	ASL	R0
	ADD	#000007, R0
; NIKMC:
K26124:	MOVB	R0, 000013(R4)
	BR	K26310			; => NWALK
; SETFF:
K26132:	CALL	K01314			; Get random number
	BIC	#177770, R0		; 0..7
	ADD	#000003, R0		; + 3
	MOVB	R0, K26670
	MOV	#000014, R0		; 12.
	BR	K26124			; => NIKMC
; KONT1:
K26160:	DECB	R1
	DEC	R3
	CMPB	#000374, R1
	BNE	K26264			; => WKOK
	MOV	#000034, R1
	ADD	#000040, R3
	DECB	000002(R4)
	BR	K26264			; => WKOK
; GWRIT
K26210:	CMPB	000002(R4), 000007(R4)
	BNE	K26236
	CMPB	000010(R4), R1
	BNE	K26236
	INCB	001607
	JMP	K26104
; KONT2:
K26236:	INCB	R1
	INC	R3
	CMPB	#000036, R1
	BNE	K26264			; => WKOK
	MOV	#000376, R1
	SUB	#000040, R3
	INCB	000002(R4)
; WKOK
K26264:	MOV	R3, K01610
	MOVB	K01610, 000003(R4)
	MOVB	K01611, 000004(R4)
	MOVB	R1, 000001(R4)
; NWALK:
K26310:	MOVB	K36214, R1		; get RMDN room level
	MOVB	(R4), R0
	BIC	#177600, R0
	CMPB	R0, R1
	BEQ	K26332
	JMP	K30606
K26332:	CMPB	K36215, 000002(R4)	; check RMAC
	BEQ	K26346
	JMP	K30606
K26346:	CALL	L10200			; GTBAK
	CALL	K36112			; GRDAR
	CALL	L10236			; GTBK2
	MOV	#000001, R0
	TSTB	000011(R4)
	BPL	K26376
	INC	R0
; LEEE9:
K26376:	MOV	#K26672, R3		; GDHIT address
	CMPB	R0, (R3)
	BNE	K26546			; => NGDHT
	MOVB	000013(R4), R0
	CMPB	R0, #000005
	BEQ	K26546			; => NGDHT
	CMPB	R0, #000006
	BEQ	K26546			; => NGDHT
	MOV	#000002, R1		; 2.
	CALL	L10244			; MONUP
	CALL	L15650			; Sound CRUNCH noise
	MOV	#026666, R3
	DECB	(R3)
	BEQ	K26464			; CRUSN
	CALL	K01314			; Get random number
	BIC	#177774, R0
	BNE	K26546			; => NGDHT
; CRUSN:
K26464:	MOVB	#005, (R3)
	MOVB	000013(R4), R0
	MOV	#000006, R1
	CMPB	R0, #000004		; == 4 ?
	BEQ	K26532			; => ABRSE
	CMPB	R0, #000001		; == 1 ?
	BEQ	K26532			; => ABRSE
	CMPB	R0, #000011		; == 9. ?
	BEQ	K26532			; => ABRSE
	CMPB	R0, #000012		; == 10. ?
	BEQ	K26532			; => ABRSE
	DECB	R1
; ABRSE:
K26532:	MOVB	R1, 000013(R4)
	MOV	#000012, R1		; 10.
	CALL	L10244			; MONUP
; NGDHT:
K26546:	CLR	R0
	BISB	000013(R4), R0
	ASL	R0
	MOV	K26626(R0), R3		; get address from NMERT table
	MOVB	K36264, R0		; get DIR
	MOVB	R0, R1
	JMP	(R3)
; LPRSY procedure
K26572:	TSTB	000011(R4)
	BMI	K26602
	RETURN
K26602:	SWAB	K26670
	MOV	K26674, R3
	MOV	K26676, K26674
	MOV	R3, K26676
	RETURN
;
; NMERT table jump addresses
K26626:
	.WORD	K26720, K27470, K27670, K30324, K30422, K30310, K30316, K30222
	.WORD	K30236, K30260, K30274, K30406, K30014
K26660:	.ASCII	/@LIFT@/
K26666:	.BYTE	5			; GDNRG
K26667:	.BYTE	0			; GDSPD
K26670:	.WORD	000000
K26672:	.WORD	000000			; GDHIT ??
K26674:	.WORD	000000
K26676:	.WORD	000000
; BATPM
K26700:	.WORD	000012, 004012, 000012, 000010, 004010, 000011, 004011, 000011
;
; GDRNP:
K26720:	MOV	#127771, R3		; BUFFN+101
	TSTB	R0
	BEQ	K26734
	MOV	#127764, R3
K26734:	MOVB	000003(R4), K01606
	MOVB	000004(R4), 001607
	ADD	K01606, R3
	MOVB	050137, R0
	INCB	R0
	BEQ	K27026			; => NGDPP
	MOVB	(R3), R0
	INCB	R0
	BEQ	K27026			; => NGDPP
	MOV	R3, K26674
	MOVB	#002, 000013(R4)
	MOVB	#003, K26670
	CALL	K01314			; Get random number
	RORB	R0
	BLO	K27026
	JMP	K27460			; => NGDKP
; NGDPP:
K27026:	MOVB	050131, R0		; get (MANBF+17.)
	INCB	R0
	BEQ	K27106
	MOV	#127731, R3
	TSTB	R1
	BEQ	K27052
	MOV	#127724, R3
K27052:	ADD	K01606, R3
	MOVB	(R3), R0
	INCB	R0
	BEQ	K27106
	MOV	R3, K26674
	MOVB	#002, K26670
	MOVB	#000013, 000013(R4)
	BR	K27460
K27106:	CALL	K01314			; Get random number
	BIC	#177770, R0		; 0..7
	BNE	K27454
	MOVB	K33475, R0
	BNE	K27454
	MOVB	050136, R0
	INCB	R0
	BEQ	K27454
; Check relative heights (is it worth throwing dagger?)
K27136:	MOV	#K36211, R3		; MAND
	MOVB	000011(R4), R0
	BIC	#177700, R0
	MOVB	(R3), R5
	SUB	R5, R0
	ADD	#000004, R0
	CMPB	R0, #000011
	BHIS	K27454
	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3
	ADD	#000144, R3
	MOVB	#004, 001605
	MOVB	#000010, K01604
	CLRB	001607
	MOVB	000001(R4), R0
	ADD	#000012, R0
	MOVB	R0, K01606
	MOVB	K36210, R0		; get MANA
	ADD	#000012, R0
	CMPB	R0, K01606
	BHIS	K27316
	MOVB	#001, 001605
	MOVB	#004, K01604
	MOVB	#001, 001607
	DEC	R3
	DEC	R3
	DEC	R3
; GTROK:
K27316:	MOVB	K36264, R0		; get DIR
	CMPB	R0, 001607
	BNE	K27454
	MOVB	000001(R4), R0
	MOVB	001605, K36202
	ADD	036202, R0
	MOVB	R0, K33477
	MOV	R3, K01610
	MOVB	K01610, K33500
	MOVB	K01611, K33501
	MOVB	K01604, R0
	MOVB	R0, K33502
	MOVB	R0, K33503
	MOVB	#000324, K33475
	MOVB	000011(R4), R0
	BIC	#177700, R0
	ADD	#000003, R0
	MOVB	R0, K33476
	MOVB	#002, 000013(R4)
	MOVB	#001, K26670
	BR	K27460
	NOP1
; NGTRO:
K27454:	CALL	K27566			; TURNQ
K27460:	MOV	077516, R3
	JMP	K30450			; => ENDGP
;
K27470:	MOV	#127672, R3
	TSTB	R1
	BEQ	K27504
	MOV	#127665, R3
K27504:	MOVB	050127, R0
	INCB	R0
	BEQ	K27552
	MOVB	000003(R4), K01606
	MOVB	000004(R4), 001607
	ADD	K01606, R3
	MOVB	(R3), R0
	INCB	R0
	BEQ	K27552
	MOVB	#004, 000013(R4)
	BR	K27556
K27552:	CALL	K27566			; TURNQ
K27556:	MOV	#000000, R3
	JMP	K30450			; => ENDGP
; TURNQ procedure
K27566:	CALL	K01314			; Get random number
	BIC	#177774, R0		; 0..3
	BEQ	K27602
	RETURN
K27602:	MOVB	K36210, R0		; get MANA
	ADD	#000004, R0
	MOVB	000001(R4), R5
	SUB	R5, R0
	MOV	#000001, R1
	SUB	#000004, R0
	TSTB	R0
	BMI	K27636
	DECB	R1
; TRNLF:
K27636:	MOVB	K36264, R0		; get DIR
	CMPB	R0, R1
	BNE	K27650
	RETURN
K27650:	MOVB	000013(R4), R0
	ASL	R0
	ADD	#000007, R0
	MOVB	R0, 000013(R4)
	RETURN
; GDPNP:
K27670:	MOV	#K26670, R3
	CMPB	#000002, (R3)
	BNE	K27734
	PUSH	R3
	MOV	K26674, R3
	MOVB	(R3), R0
	INCB	R0
	BEQ	K27732
	CALL	L15650			; Sound CRUNCH noise
	MOVB	#000014, R1
	CALL	L14472			; DECEN
; NUN52:
K27732:	POP	R3
; NUN1:
K27734:	DECB	(R3)
	BNE	K27744
	CLRB	000013(R4)
K27744:	MOV	#076606, R3
	JMP	K30450			; => ENDGP
; FFIRE:
K27754:	.BYTE	243, 244
	.BYTE	244, 244
	.BYTE	244, 244
	.BYTE	244, 244
	.BYTE	244, 245
;
; RND procedure
K27766:	PUSH	R3
K27770:	MOV	#000000, R3		; SEED
	INC	R3
	BIC	#040000, R3
	MOV	R3, <K27770+2>
	MOVB	(R3), R0
	POP	R3
	RETURN
; GDFFP:
K30014:	MOV	#131072, R2		; BUFG1+102.
	MOV	#105205, R5		; command ??
	MOV	#005203, R0		; command ??
	CMPB	K36264, #001		; DIR == 1 ?
	BNE	K30054
	MOV	#131063, R2		; BUFG1+95.
	MOV	#105305, R5		; command ??
	MOV	#005303, R0		; command ??
K30054:	MOV	R0, K30170		; set FLDID command
	MOV	R0, K25030
	MOV	R5, K30174
	MOVB	000001(R4), R5
	DECB	R5
	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3
	ADD	R2, R3
	MOV	R3, <K25012+2>		; FLDIR
	MOV	#K27754, R2
	MOV	#000012, R1
	MOV	R1, <K25006+2>
K30140:	CMPB	R5, #000031
	BHIS	K30170			; => FLDID
	MOVB	174500(R3), R0
	CMPB	R0, #000307		; 199.
	BHIS	K30200
	MOVB	(R2), (R3)
	MOVB	#001, 173400(R3)
; FLDID:
K30170:	INC	R3			;WARN
	INC	R2
K30174:	INCB	R5
	SOB	R1, K30140
K30200:	DECB	K26670
	BNE	K30214
	MOVB	#007, 000013(R4)
K30214:	MOV	#076606, R3
	BR	K30450
;
K30222:	MOVB	#000010, 000013(R4)
	MOV	#077261, R3
	BR	K30450
;
K30236:	CLRB	000013(R4)
	MOV	#077261, R3
K30246:	MOV	#000001, R0
	XOR	R0, K36264		; DIR
	BR	K30450
; DTRN1:
K30260:	MOVB	#000012, 000013(R4)
	MOV	#077037, R3
	BR	K30450			; => ENDGP
; DTRN2:
K30274:	MOVB	#001, 000013(R4)
	MOV	#077037, R3
	BR	K30246			; => ANRKE
; DEDGP:
K30310:	MOV	#077403, R3		; GDEDC - dead guard titles
	BR	K30450
;
K30316:	MOV	#077455, R3
	BR	K30450
; GDKCP:
K30324:	MOV	#K26670, R3
	CMPB	#000001, (R3)
	BNE	K30370
	PUSH	R3
	MOV	K26674, R3
	MOVB	(R3), R0
	INCB	R0
	BEQ	K30366
	CALL	L15650			; Sound CRUNCH noise
	MOV	#000007, R1
	CALL	L14472			; DECEN
K30366:	POP	R3
K30370:	DECB	(R3)
	BNE	K30400
	CLRB	000013(R4)
K30400:	MOV	#077333, R3
	BR	K30450
; GDLLP:
K30406:	MOVB	#003, 000013(R4)
	MOV	#076657, R3
	BR	K30450
;
K30422:	CALL	L15650			; Sound CRUNCH noise
	MOVB	#006, R1		; 6.
	CALL	L14472			; DECEN
	MOVB	#001, 000013(R4)
	MOV	#076757, R3
; ENDGP:
K30450:	MOV	R3, <K30534+2>
	MOV	#036037, R3
	TSTB	000011(R4)
	BPL	K30470
	INC	R3
K30470:	MOVB	K36264, (R3)		; copy DIR
	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3
	MOV	#L30724, R2		; Enemy 0 tile screen address
	TSTB	000011(R4)
	BPL	K30532
	MOV	#L32024, R2		; Enemy 1 tile screen address
K30532:	ADD	R2, R3
K30534:	MOV	#000000, R2
K30540:	MOV	#000007, R1
	MOVB	030604, K01604
	MOVB	000011(R4), R0
	BIC	#177600, R0
	MOVB	R0, 001607
	MOVB	000001(R4), R0
	CALL	K47660			; DRWOB
	CALL	K36112			; GRDAR
	BR	K30756			; => NDRGB
;
K30604:	.WORD	6			; ??
;
; NOTOS:
K30606:	MOVB	000013(R4), R0
	CMPB	R0, #000014		; == 12. ?
	BNE	K30630
	MOVB	#007, 000013(R4)
	BR	K30756
K30630:	CMPB	R0, #000013
	BEQ	K30752
	CMPB	R0, #000011
	BNE	K30664
	MOV	#000001, R0
	XOR	R0, K36264		; DIR
	MOVB	#001, 000013(R4)
	BR	K30756
K30664:	CMPB	R0, #000007
	BNE	K30704
	MOV	#000001, R0
	XOR	R0, K36264		; DIR
	BR	K30752
K30704:	CMPB	R0, #000006
	BEQ	K30756
	CMPB	R0, #000004
	BNE	K30730
K30720:	MOVB	#001, 000013(R4)
	BR	K30756
; LEEE7:
K30730:	CMPB	R0, #000005
	BEQ	K30756
	CMPB	R0, #000012
	BEQ	K30720
	CMPB	R0, #000002
	BLO	K30756
; FINGR:
K30752:	CLRB	000013(R4)
K30756:	MOV	#K36212, R3		; MANPS address
	MOV	R3, 047720
	MOV	R3, 055316
	CALL	K36072			; G1DI2
	CALL	K26572			; LPRSY
	ADD	#000014, R4		; + 12.
	MOV	#050115, R3
	MOV	R3, 055312
	MOVB	#005, R0
	MOVB	R0, 055334
	INCB	R0
	MOVB	R0, K30604
	MOVB	R0, K36200
	INCB	R0
	MOVB	R0, <K30540+2>
	INCB	R0
	MOVB	R0, <K36142+2>
	MOVB	#000014, R0
	MOVB	R0, 055452
	MOVB	R0, 055436
	MOVB	#000032, R0
	MOVB	R0, 055446
	MOVB	R0, 055432
	POP	R1
	DECB	R1
	BEQ	K31116
	JMP	K25454			; => NXGRD
K31116:	CLRB	K26672			; clear GDHIT
	CMP	#000240, K04114		; NOP command
	BEQ	K31212
	MOVB	042150, R0
; NXINC:
K31136:	INCB	R0
	CMPB	R0, #000026		; 22.
	BEQ	K31136
	CMPB	R0, #000030		; 24.
	BNE	K31160
	MOV	#000023, R0
K31160:	MOVB	R0, 042150
	MOVB	R0, 042171
	MOVB	R0, 042212
	MOVB	#001, R0
	MOV	#125150, R3
	MOVB	R0, (R3)+
	MOVB	R0, (R3)+
	MOVB	R0, (R3)
K31212:	MOV	<K13332+2>, R3		; get (RM+1)
	MOVB	(R3), R0
K31220:	CMPB	R0, #000356		;WARN
	BNE	K31324
	MOV	#125633, R3
	MOV	#124533, R2
	MOVB	#000012, R1		; 10.
; FNLP1:
K31242:	CALL	K01314			; Get random number
	BIC	#177774, R0
	ADD	#000117, R0
	MOVB	R0, (R3)+
	INC	R3
	MOVB	#001, R0
	MOVB	R0, (R2)+
	INC	R2
	MOVB	R0, (R2)
	CALL	K01314			; Get random number
	BIC	#177774, R0
	ADD	#000122, R0
	MOVB	R0, (R3)
	ADD	#000036, R3
	ADD	#000036, R2
	SOB	R1, K31242
; NFNCE:
K31324:	MOVB	L15646, R0		; get RMTIME
	BEQ	K31344
	DECB	R0
	MOVB	R0, L15646		; set RMTIME
	JMP	K31712			; => MISGO
; NJSTN:
K31344:	CMPB	K36214, #037		; RMDN == 31. ?
	BNE	K31360
	JMP	K31712			; => MISGO
; Room level != 31.
K31360:	MOV	<K13332+2>, R3		; get (RM+1)
	MOVB	(R3), R0
	CMPB	R0, #000035		; 29.
	BEQ	K31430
	CMPB	R0, #000043		; 35.
	BEQ	K31430
	CMPB	R0, #000042		; 34.
	BEQ	K31430
	CMPB	R0, #000046		; 38.
	BEQ	K31430
	CMPB	R0, #000052		; 42.
	BEQ	K31430
	JMP	K31712			; => MISGO
; BATSI:
K31430:	CALL	K27766			; RND
	BIC	#177700, R0		; 0..63.
	INCB	R0
	CMPB	R0, #005		; 5.
	BHIS	K31626
	MOV	#K33475, R3
K31454:	ADD	#000007, R3
	DECB	R0
	BNE	K31454
	MOVB	(R3), R0
	BNE	K31626
	MOVB	#000340, (R3)+
	MOVB	#000011, (R3)+
	CLRB	(R3)+
	MOVB	#000040, (R3)+
	MOVB	#001, (R3)+
	CALL	K27766			; RND
	BIC	#177770, R0
	ASL	R0
	MOV	#026700, R4
	ADD	R0, R4
	MOVB	(R4), (R3)+
	MOVB	000001(R4), (R3)
	CALL	K27766			; RND
	BIC	#177776, R0
	BEQ	K31626
	MOV	#000014, R0
	MOVB	(R3), R5
	XOR	R0, R5
	MOVB	R5, (R3)
	MOVB	-(R3), R5
	XOR	R0, R5
	MOVB	R5, (R3)
	MOVB	-(R3), 001607
	MOVB	-(R3), K01606
	MOVB	#000037, -(R3)
	INC	R3
	ADD	#000037, K01606
	MOVB	K01606, (R3)+
	MOVB	001607, (R3)
; NBATI:
K31626:	MOV	#000004, R1		; 4.
	MOV	#K33504, R4
	MOV	#000007, R2
K31642:	MOVB	000001(R4), R0		; <
	CMPB	R0, #000010
	BEQ	K31662
	CMPB	R0, #000012
	BNE	K31706
K31662:	MOVB	000005(R4), K01602	; room number
	MOV	#000003, R0
	XOR	R0, K01602
	MOVB	K01602, 000005(R4)
K31706:	ADD	R2, R4
	SOB	R1, K31642		; repeat
; MISGO:
K31712:	MOV	#000006, R0
	MOV	#K33466, R4		; MISL1 - Ninja object
;
K31722:	MOVB	R0, K32300		; set MSLNO
	MOVB	(R4), R0
	BNE	K31736
	JMP	K32436
;
K31736:	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3
	ADD	#L24324, R3		; BUFFD
	MOVB	#001, (R3)
	MOVB	000005(R4), R5
	PUSH	R1
	MOV	#000002, R1
; MIKY2
K32000:	BIT	#000001, R5		; bit 0 ?
	BEQ	K32012
	CALL	K33274			; UPOBJ - Object moves up
K32012:	BIT	#000002, R5		; bit 1 ?
	BEQ	K32024
	CALL	K33362			; DOWNO - Object moves down
K32024:	BIT	#000004, R5		; bit 2 ?
	BEQ	K32036
	CALL	K33404			; LEFTO - Object moves left
K32036:	BIT	#000010, R5		; bit 3 ?
	BEQ	K32050
	CALL	K33424			; RITEO - Object moves right
K32050:	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3		; R3 = object offset
	ADD	#L25424, R3		; BUFFB Back tile screen address
	CMPB	(R3), #000307
	BLO	K32112
; NOEL3:
K32102:	CLRB	(R4)
	POP	R1
	JMP	K32436
K32112:	ADD	#003300, R3		; + <BUFG1-BUFFB>
	CMPB	K32300, #000006		; MSLNO == 6. ?
	BNE	K32146
	MOVB	(R3), R0
	INCB	R0
	BEQ	K32146
	MOV	#000001, R0
K32140:	MOVB	R0, K26672		; set GDHIT
	BR	K32102
; NOEL2:
K32146:	ADD	#001100, R3		; + <BUFG2-BUFG1>
	CMPB	K32300, #000006		; MSLNO == 6. ?
	BNE	K32302
	MOVB	(R3), R0
	INCB	R0
	BEQ	K32302
	MOV	#000002, R0
	BR	K32140
;
; PANTS procedure: ??
K32176:	MOV	#000007, R0		; 7.
	MOV	#050116, 055312		; <MANBF+6> address -> PUM06+1
	MOVB	R0, 055334
	INCB	R0
	MOVB	R0, K30604
	MOVB	R0, K36200
	MOV	#000003, R0
	MOVB	R0, <K30540+2>
	INCB	R0
	MOVB	R0, <K36142+2>
	MOV	#000020, R0
	MOVB	R0, 055452
	MOVB	R0, 055436
	MOV	#000030, R0
	MOVB	R0, 055446
	MOVB	R0, 055432
	CLR	R0
	RETURN
;
K32300:	.WORD	0			; MSLNO
;
K32302:	SUB	#002200, R3
	CMPB	K32300, #000006		; MSLNO == 6. ?
	BEQ	K32350
	CMPB	(R3), #000340
	BHIS	K32350
	MOV	#000005, R1
	CALL	L14472			; DECEN
	CALL	L15650			; Sound CRUNCH noise
	CMPB	(R4), #000340
	BLO	K32102
	BR	K32364
K32350:	MOVB	000006(R4), R5
	DECB	R1
	BEQ	K32364
	JMP	K32000
K32364:	POP	R1
	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	MOV	K01610, R3
	ADD	#L27624, R3		; BUFFN Ninja tile screen address
	MOVB	(R4), (R3)
	RORB	(R4)
	BHIS	K32422
	.WORD	005727	;TST #000261	; XOR 1
K32422:	SEC
	ROLB	(R4)
	SUB	#003300, R3
	MOVB	#001, (R3)
;
K32436:	ADD	#000007, R4
	MOVB	K32300, R0		; get MSLNO
	DECB	R0
	BEQ	K32456
	JMP	K31722
K32456:	TSTB	K36214			; check RMDN room level
	BNE	K32542			; not 0 =>
	MOVB	K36210, R2		; get MANA
	ADD	#000060, R2
	ADD	#000156, R2
	MOV	R2, K40276
	MOVB	#005, 040300
	MOV	#K40301, R2
	MOV	#L26524, R1		; BUFFO Front tile screen address
	CALL	K40356
	MOV	#K46162, R2
	MOV	#L24324, R1		; BUFFD
	CALL	K40356
K32542:	TSTB	014640
	BEQ	K32736
	MOV	#K14641, R4		; TVCNT
	DECB	(R4)
	BNE	K32612
	CALL	K27766			; RND
	MOVB	R0, (R4)
	BIC	#177774, R0
	BNE	K32624
	CALL	K27766			; RND
	BIC	#177774, R0
	ADD	#000004, R0
	BR	K32650
K32612:	MOVB	000001(R4), R0
	BIT	#000004, R0		; bit 2 ?
	BNE	K32650
K32624:	CALL	K27766			; RND
	BIC	#177774, R0
	CMPB	R0, 000001(R4)
	BNE	K32650
	INCB	R0
	BIC	#177774, R0		; 0..3
K32650:	MOVB	R0, 000001(R4)
	ASL	R0
	ASL	R0			; *4
	MOV	R0, R1
	ASL	R0			; *8.
	ADD	R1, R0			; *12.
	MOV	R0, R2
	ADD	#K14500, R2		; + TVFZ1
	MOV	#125631, R3
	MOV	#124531, R4
	MOV	#000003, R5
K32710:	MOV	#000004, R1		; <
K32714:	MOVB	(R2)+, (R3)+		; | <
	MOVB	#001, (R4)+
	SOB	R1, K32714		; | repeat
	ADD	#000034, R4
	ADD	#000034, R3
	SOB	R5, K32710		; repeat
;
K32736:	MOV	K36212, R3		; get MANPS
	ADD	#126666, R3
	MOVB	#000050, R0
	CMPB	(R3), #000212
	BNE	K32764
	MOV	#000030, R0
K32764:	MOVB	R0, 046013
	MOVB	R0, 046034
	MOVB	R0, 046055
	CALL	K02202			; DOPIC - Show the room on the screen
	TSTB	K36216			; check ELECU
	BEQ	K33052
K33012:	CALL	K01314			; Get random number
	BIC	#177770, R0
	CMPB	R0, #000001
	BEQ	K33012
	CMPB	R0, #000004
	BEQ	K33012
	MOVB	R0, K03542
	MOV	#000024, R1		; 20.
	CALL	L14472			; DECEN
; NICK:
K33052:	TSTB	K33540			; check DEAD
K33056:	BEQ	K33114			; alive =>
; Dead
	TSTB	K33542			; check JUMP
	BNE	K33114
	MOV	#047606, R2
	MOVB	#001, K33542		; set JUMP = 1
	MOV	#K54302, R3		; LEP5P address
	MOV	R2, <K36276+2>
	MOV	R3, <K25272+2>		; set JMP address
K33114:	CMPB	K33540, #002		; DEAD == 2 ?
	BEQ	K33270
; Update TIMER counter
K33124:	MOV	#K36207, R3		; TIMER counter address
	DECB	(R3)			; decrement
	BNE	K33270
	MOVB	#000024, (R3)		; reset the counter
	DECB	-(R3)			; decrement
	CMPB	#000057, (R3)		; less than '0' ?
	BNE	K33250
	MOVB	#000071, (R3)		; '9'
	DECB	-(R3)			; decrement
	CMPB	#000057, (R3)		; less than '0' ?
	BNE	K33250
	MOVB	#000071, (R3)		; '9'
	DECB	-(R3)			; decrement
	MOVB	(R3), R0
	CMPB	R0, #000060		; '0' ?
	BNE	K33232
	PUSH	R0
	PUSH	R3
	MOV	#050146, R2		; screen address
	MOV	#K33446, R3		; "TIME IS SHORT "
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string
	POP	R3
	POP	R0
K33232:	CMPB	R0, #057		; less than '0' ?
	BNE	K33250
	MOVB	#002, K33540		; set DEAD = 2
	BR	K33270
K33250:	MOV	#050226, R2		; screen address
	MOV	#K36204, R3		; TIMER value 3-char
	MOV	#000003, R1		; 3.
	CALL	K01704			; PRINT string
K33270:	JMP	K24764			; => NXMAN
;
; UPOBJ procedure - Object moves up
K33274:	TSTB	000001(R4)		; Y == 0 ?
	BEQ	K33350			; => OBGON
	DECB	000001(R4)		; Y--
	MOV	#177740, R2		; -32.
; => MOVOJ
K33312:	MOVB	000003(R4), K01610
	MOVB	000004(R4), K01611
	ADD	R2, K01610
	MOVB	K01610, 000003(R4)
	MOVB	K01611, 000004(R4)
	RETURN
; OBGON:
K33350:	CLRB	(R4)
	TST	(SP)+
	TST	(SP)+
	JMP	K32436			; => NDOMS
; DOWNO procedure - Object moves down
K33362:	CMPB	#000021, 000001(R4)	; Y == 17. ?
	BEQ	K33350			; => OBGON
	INCB	000001(R4)		; Y++
	MOV	#000040, R2		; 32.
	BR	K33312			; => MOVOJ
; LEFTO procedure - Object moves left
K33404:	TSTB	000002(R4)		; X == 0 ?
	BEQ	K33350			; => OBGON
	DECB	000002(R4)		; X--
	MOV	#177777, R2		; -1
	BR	K33312			; => MOVOJ
; RITEO procedure - Object moves right
K33424:	CMPB	#000037, 000002(R4)	; X == 31. ?
	BEQ	K33350			; => OBGON
	INCB	000002(R4)		; X++
	MOV	#000001, R2		; 1
	BR	K33312			; => MOVOJ
;
K33446:	.ASCII	/TIME IS SHORT /

K33464:	.BYTE	1			; HELD value
K33465:	.BYTE	0			; NEAR value
; Objects table, 7 bytes each
;   +001: X
;   +002: Y
;   +003 +004: Object offset in the room buffers
; MISL1 - Ninja object
K33466:	.BYTE	0
K33467:	.BYTE	0
K33470:	.BYTE	0
K33471:	.BYTE	0
K33472:	.BYTE	0
K33473:	.BYTE	0
K33474:	.BYTE	0
; MISL2 - Guard object
K33475:	.BYTE	0
K33476:	.BYTE	010
K33477:	.BYTE	031
K33500:	.BYTE	031
K33501:	.BYTE	001
K33502:	.BYTE	0
K33503:	.BYTE	0
; MISL3 - 4 objects - bats
K33504:	.BYTE	000, 010, 027, 027, 001, 000, 000
	.BYTE	000, 010, 027, 027, 001, 000, 000
	.BYTE	000, 010, 027, 027, 001, 000, 000
	.BYTE	000, 010, 027, 027, 001, 000, 000
;
K33540:	.BYTE	0		; DEAD: 0=alive, 1=enery out, 2=time out
	.EVEN
K33542:	.BYTE	0		; JUMP
;
;K33543:			; 3763..3c21 - 1215. bytes
.INCLUDE /S23763.MAC/

K36040:	.BYTE	000,000
;
; G1DIS procedure
K36042:	MOVB	036037, R0
	MOVB	K36264, 036037		; copy DIR
	BR	K36104
;
; G2DIS procedure
K36056:	MOVB	K36040, R0
	MOVB	K36264, K36040		; copy DIR
	BR	K36104
;
; G1DI2 procedure: ??
K36072:	MOVB	000012(R4), R0
	MOVB	K36264, 000012(R4)	; copy DIR
K36104:	MOVB	R0, K36264		; set DIR
	RETURN
;
; GRDAR procedure: ??
K36112:	MOVB	000004(R4), K01611
	MOVB	000003(R4), K01610
	MOV	K01610, R3
	ADD	#L24324, R3		; BUFFD address
	MOV	#K46162, R2		; NINDC address
K36142:	MOV	#000010, R1		;WARN 8.
	MOVB	036200, K01604
	MOVB	000011(R4), 001607
	BICB	#177600, 001607
	MOVB	000001(R4), R0
	JMP	K47660			; DRWOB
;
K36200:	.WORD	000006
K36202:	.WORD	000000
;
K36204:	.ASCII	/999/			; TIME1 - timer current value, 3-char
K36207:	.BYTE	10.			; TIME2 - timer counter
K36210:	.BYTE	10.			; MANA ??
K36211:	.BYTE	10.			; MAND ??
K36212:	.BYTE	112			; MANPS ??
K36213:	.BYTE	001
K36214:	.BYTE	0			; RMDN - room level, 0=top, 31.=water
K36215:	.BYTE	0			; RMAC - room position 0=left, 31.=right
K36216:	.BYTE	0			; ELECU ??
	.EVEN
;
; MANAR procedure: ??
K36220:	MOV	K36212, R3		; get MANPS
	ADD	#L24324, R3		; + BUFFD
	MOV	#K46162, R2		; get NINDC
	MOV	#000010, R1		; 8.
K36240:	MOVB	#006, K01604		; 6.
	MOVB	K36211, 001607		; get MAND
	MOVB	K36210, R0		; get MANA
	JMP	K47660			; => DRWOB
;
K36264:	.WORD	0			; DIR - mirroring flag
;
; MANDR procedure: ??
K36266:	MOV	K36212, R3		; get MANPS
	ADD	#L27624, R3		; + BUFFN: Ninja tile screen address
K36276:	MOV	#000000, R2		;!!MUT-ARG!!
	MOV	#000007, R1		; 7.
	BR	K36240
;
; MOVAC procedure: ??
K36310:	MOVB	K36264, R2		; get DIR
	ASL	R2
	BIC	#177400, R2
	DEC	R2
	MOVB	K36210, R0		; get MANA
	ADD	R2, R0
	MOVB	R0, K36210		; set MANA
	ADD	R2, K36212		; MANPS
	RETURN
; EDGES procedure
K36344:	MOVB	K36210, R0		; get MANA
	TSTB	K36264			; check DIR
	BEQ	K36374			; left =>
; DIR != 0: right
	CMPB	R0, #035		; MANA == 29. ?
	BEQ	K36366	;TODO
	RETURN
K36366:	POP	R3
	JMP	K37746			; => RITSC - go one room right
; DIR = 0: left
K36374:	CMPB	R0, #375		; == 253. ?
	BEQ	K36404	;TODO
	RETURN
K36404:	POP	R3
	JMP	K40012			; => LEFSC - go one room left
; JMP1P: ??? - Vector for (VECTN+1)
K36412:	CALL	K40726			; OFTOP
	CALL	K36344			; EDGES
	CALL	K37270			; HITJJ
	CALL	K36310			; MOVAC
	MOV	#000004, R1
	MOV	#050111, R3		; MANBF+1
K36442:	MOVB	(R3)+, R0
	INCB	R0
	CMPB	R0, #000310
	BHIS	K36504			; => HRISL
	SOB	R1, K36442
	DECB	K36211
	SUB	#000040, K36212		; MANPS
	MOV	#037662, R3
	DECB	(R3)
	BEQ	K36504			; => HRISL
	JMP	K25276			; => ENDVC
; HRISL:
K36504:	MOVB	#004, R0		; 4.
; ARSED:
K36510:	MOVB	R0, K37662		; set SPEED
	MOV	#K36546, R3		; get SOMER -> (VECTN+1)
	MOV	#046352, R2		; get SOM1C -> (CHARN+1)
	CLRB	K36534			; clear SOMPS
	JMP	K55246			; => SETVC - set vectors
;
K36534:	.BYTE	0			; SOMPS
	.EVEN
; SOMAN:	SOM1C, SOM2C, SOM3C, SOM4C
K36536:	.WORD	046352, 046413, 046455, 046517
; SOMER: ??? - Vector for (VECTN+1)
K36546:	MOVB	K36534, R3		; get SOMPS
	INCB	R3
	BIC	#177774, R3		; 0..3
	MOVB	R3, K36534		; set SOMPS
	ASL	R3			; *2
	MOV	K36536(R3), <K36276+2>
	BR	K36646			; => JMP2P
;
; FKIKS: ??? - Vector for (VECTN+1)
K36576:	MOV	#K36612, R3		; FKIKP -> (VECTN+1)
	MOV	#047462, R2		; FKIKC -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; FKIKP: ??? - Vector for (VECTN+1)
K36612:	MOVB	050116, R0
	INCB	R0
	BEQ	K36646
	MOV	#130764, R2
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K36642
	MOV	#130771, R2
K36642:	CALL	K51646			; HITGQ
; JMP2P:
K36646:	CALL	K36344			; EDGES
	CALL	K37270			; HITJJ
	CALL	K36310			; MOVAC
	DECB	K37662			; decrement SPEED
	BEQ	K36674
	JMP	K25276			; => ENDVC
K36674:	MOVB	#006, K37662		; set SPEED = 6
	MOV	#K36712, R3		; JMP3P
	JMP	K55252			; SETV2 - set vector
; JMP3P:
K36712:	CALL	K54212			; OFBOT
	CALL	K36344			; EDGES
	CALL	K37270			; HITJJ
	MOVB	050162, R0		; get from (MANBF+42)
	INCB	R0
	CMPB	R0, #000310
	BLO	K36746
	JMP	K55262
K36746:	CALL	K50274			; FLORQ
	BEQ	K36760
	JMP	K50744
K36760:	CALL	K36310			; MOVAC
	INCB	K36211			; increment MAND
	ADD	#000040, K36212		; + 32. MANPS
	MOV	#047336, <K36276+2>
	DECB	K37662			; decrement SPEED
	BEQ	K37016
	JMP	K25276
K37016:	MOVB	#000031, R0		; 25.
K37022:	MOVB	R0, K37662		; set SPEED = 25.
	MOVB	#001, R0
	MOVB	R0, <K54510+2>		; set (HIGHT+1)
	MOVB	R0, K33542		; set JUMP
	MOV	#047606, R2		; TTFAL -> (CHARN+1)
	MOV	#K37060, R3		; JMP4P -> (VECTN+1)
	JMP	K55246			; => SETVC - set vectors
;
K37056:	.WORD	0			; TTFAL
; JMP4P: - Vector for (VECTN+1)
K37060:	CALL	K54212			; OFBOT
	CALL	K36344			; EDGES
	CALL	K50274			; FLORQ
	BEQ	K37102
	JMP	K54510			; => HIGHT
K37102:	MOV	#<K54510+2>, R3		; HIGHT+1 addr
	INCB	(R3)
	RORB	K37056			; TTFAL
	BHIS	K37120
	.WORD	005727	;TST #000261	; XOR 1
K37120:	SEC
	ROLB	K37056			; TTFAL
	BNE	K37134
	JMP	K37164			; => NACRF
K37134:	CALL	K37270			; HITJJ
	MOVB	050162, R0
	INCB	R0
	CMPB	R0, #000310
	BLO	K37160
	JMP	K55262
K37160:	CALL	K36310			; MOVAC
K37164:	INCB	K36211
	ADD	#000040, K36212		; MANPS += 32.
	MOV	#K37662, R3
	DECB	(R3)
	BEQ	K37212
	JMP	K25276			; => ENDVC
K37212:	MOV	#047606, R2		; FALLC
	JMP	K52152			; => STL52
; HITJP procedure
K37222:	MOV	#000006, R1
K37226:	MOV	#050116, R3		; MANBF+6
	MOV	#000006, R2
	MOV	#000001, R5
K37242:	MOVB	(R3), R0		; <
	INCB	R0
	CMPB	R0, #000310
	BHIS	K37262
	ADD	R2, R3
	SOB	R1, K37242		; repeat
	CLRB	R5
K37262:	DECB	R5
	INCB	R5
	RETURN
; HITJJ procedure
K37270:	CALL	K37222			; HITJP
	BNE	K37300	;TODO
	RETURN
K37300:	POP	R3
	BR	K37212
; SLOPQ procedure
K37304:	POP	R1
	CMPB	050163, #000007
	BEQ	K37520			; => NRNDN
	CMPB	050166, #000007
	BEQ	K37520			; => NRNDN
	PUSH	R1
	MOVB	#005, R1
	CALL	K37226
	POP	R1
	TSTB	R5
	BEQ	K37352
	JMP	K55262			; => SETST
K37352:	MOVB	050154, R0
	INCB	R0
	CMPB	R0, #310		; 200.
	BHIS	K37372	;TODO
	JMP	K37412			; => NRNUP
K37372:	DECB	K36211
	SUB	#000040, K36212		; MANPS
	CALL	K40726			; OFTOP
	BR	K37520			; => NRNDN
; NRNUP:
K37412:	CMPB	050165, #307		; 199.
	BLO	K37426	;TODO
	JMP	K37520			; => NRNDN
K37426:	CMPB	050162, #307		; 199.
	BLO	K37442	;TODO
	JMP	K37520			; => NRNDN
K37442:	INCB	K36211
	ADD	#000040, K36212		; MANPS += 32.
	CALL	K54212			; OFBOT
	PUSH	R1
	CALL	L10200			; GTBAK
	CALL	K36220			; MANAR
	CALL	L10236			; GTBK2
	CALL	K50274			; FLORQ
	POP	R1
	MOVB	#005, R0
	TSTB	R5
	BNE	K37520			; => NRNDN
	JMP	K37022			; => SETTT
; NRNDN:
K37520:	PUSH	R1
	RETURN
; RITEP:
K37524:	CALL	K36344			; EDGES
	CALL	K37304			; SLOPQ
	CALL	K36310			; MOVAC
	CALL	K41000			; LEGS
	CALL	K41176			; KEY have a key pressed?
	BIT	#000010, R0		; bit 3 ?
	BEQ	K37636
; SETJP: Set jump
K37556:	MOVB	#001, R0
	MOVB	R0, K33542		; set JUMP = 1
	MOVB	R0, <K54510+2>		; set (HIGHT+1)
	MOVB	#004, K37662		; set SPEED = 4
	MOV	#K36412, R3		; JMP1P -> (VECTN+1)
	MOV	#047336, R2		; JUMPC -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; SETFK: Set Fire
K37614:	MOVB	#005, K37662		; set SPEED = 5
	MOV	#K36576, R3		; FKIKS -> (VECTN+1)
	MOV	#047336, R2		; JUMPC -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
K37636:	BIT	#000020, R0		; bit 4 fire ?
	BNE	K37614			; => SETFK
	BIT	#000001, R0		; bit 0 ?
	BNE	K37656
	JMP	K55262			; => SETST
K37656:	JMP	K25276			; => ENDVC
;
K37662:	.WORD	0			; SPEED
;
; TPORT: If time permits, flash L.C.s
K37664:	CALL	K01612
	MOVB	#000036, K36215		; set RMAC = 30. room position
	MOVB	#000030, K36214		; set RMDN = 24. room level
	MOVB	#005, K36211
	MOVB	#004, K36210		; set MANA = 4
	MOV	#000244, K36212		; MANPS
	MOV	#072230, <K13332+2>	; set (RM+1)
	MOVB	#002, K03542
K37742:	JMP	K13072			; => INISC
; RITSC: go one room right
K37746:	MOV	<K13332+2>, R3
	CMPB	(R3), #000101
	BEQ	K37664			; yes => TPORT
	INCB	K36215			; incr RMAC - one room right
	MOVB	#000375, K36210		; set MANA = 253.
	MOV	K36212, R3		; get MANPS
	SUB	#000040, R3
	MOV	#000001, R2
	JMP	K54262			; => PIGGS
; LEFSC: go one room left
K40012:	DECB	K36215			; decr RMAC - one room left
	MOVB	#000035, K36210		; set MANA = 29.
	MOV	K36212, R3		; get MANPS
	ADD	#000040, R3		; +32.
	MOV	#177777, R2
	JMP	K54262			; => PIGGS
; LEFTP: - Vector for (VECTN+1)
K40044:	CALL	K36344			; EDGES
	CALL	K37304			; SLOPQ
	CALL	K36310			; MOVAC
	CALL	K41000			; LEGS
	MOV	#K17200, R3		; BIKER address
	MOVB	(R3), R0
	INCB	R0
	BEQ	K40230			; => NESCP
	INCB	R0
	BEQ	K40230			; => NESCP
	DECB	(R3)
	BEQ	K40112
	JMP	K25276			; => ENDVC
K40112:	MOV	#000021, R1		; 17.
	MOV	#K40164, R2		; " EXCELLENT VALUE "
	MOV	#127133, R3		; address
	CALL	K04604			; BUFOM - Draw string as tiles
	MOV	#000022, R1		; 18.
	MOV	#K40205, R2		; " YOU HAVE ESCAPED "
	MOV	#127273, R3		; address
	CALL	K04604			; BUFOM - Draw string as tiles
	MOVB	#000310, K17200		; set BIKER
	JMP	K55262			; => SETST - end of game
;
K40164:	.ASCII	/@EXCELLENT@VALUE@/
K40205:	.ASCIZ	/@YOU@HAVE@ESCAPED@/
; NESCP:
K40230:	CALL	K41176			; KEY have a key pressed?
	BIT	#000010, R0		; bit 3 ?
	BEQ	K40246
	JMP	K37556			; SETJP - set jump
K40246:	BIT	#000020, R0		; bit 4 fire ?
	BEQ	K40260
	JMP	K37614
K40260:	BIT	#000002, R0		; bit 1 left ?
	BNE	K40272
	JMP	K55262			; => SETST
K40272:	JMP	K25276			; => ENDVC
;
K40276:	.WORD	0			; GLIPS
K40300:	.BYTE	0			; GLIDN
; GLIDC:
K40301:	.BYTE	377
	.BYTE	377, 377, 377, 105, 106, 107, 110, 111, 112, 377
	.BYTE	113, 114, 115, 116, 117, 120, 121, 122, 123, 377
	.BYTE	377, 124, 125, 126, 127, 130, 131, 132, 133, 134
	.BYTE	135, 377, 377, 377, 377, 136, 137, 377, 140, 141
	.BYTE	377, 377, 377, 000
;
; DRGLI procedure: ??
K40356:	MOV	#K40276, 047720
	MOV	040276, R3
	ADD	R1, R3
	MOV	#000004, R1
	MOVB	#000013, K01604
	MOVB	040300, 001607
	MOVB	K36210, R0		; get MANA
	SUB	#000002, R0
	CALL	K47660			; DRWOB
K40426:	MOV	#K36212, 047720		; MANPS address
	RETURN
; DRBIK procedure
K40436:	MOV	#K17202, 047720
	MOV	K36212, R3		; get MANPS
	ADD	#000076, R3
	MOV	R3, K17202
	ADD	R1, R3
	MOVB	#005, R1
	MOVB	#000013, K01604
	MOVB	#000012, 001607
	MOVB	K36210, R0		; get MANA
	SUB	#000002, R0
	CALL	K47660			; DRWOB
	BR	K40426
;
K40520:	CMPB	K36210, #000375		; MANA == 253. ?
	BNE	K40534
	JMP	K40012
K40534:	CALL	K36310			; MOVAC
	CALL	K41176			; KEY have a key pressed?
	BIT	#000020, R0		; bit 4 fire ?
	BNE	K40564
	DECB	037662
	BEQ	K40564
	JMP	K25276
K40564:	MOVB	#001, R0
	JMP	K36510
;
K40574:	.WORD	0
;
K40576:	CMPB	K36210, #000375		; MANA == 253. ?
	BNE	K40612
	JMP	K40012
K40612:	CALL	K36310			; MOVAC
	RORB	040574
	BHIS	K40626
	.WORD	005727	;TST #000261	; XOR 1
K40626:	SEC
	ROLB	040574
	BNE	K40576
	MOV	#K17273, R2		; ??? 11x5 tiles
	MOV	#L26524, R1		; BUFFO Front tile screen address
	CALL	K40436			; DRBIK
	MOV	#046162, R2
	MOV	#L24324, R1		; BUFFD
	CALL	K40436			; DRBIK
	DECB	037662
	BEQ	K40700
	JMP	K25276
K40700:	MOV	#K17204, R2		; BIKEC 11x5 tiles
	MOV	#L26524, R1		; BUFFO Front tile screen address
	CALL	K40436			; DRBIK
	MOVB	#020, K17200		; set BIKER = 16.
	JMP	K55262			; => SETST game nearly completed
; OFTOP procedure
K40726:	MOVB	K36211, R0		; get MAND
	CMPB	R0, #000371		; == 249. ?
	BEQ	K40742
	RETURN
K40742:	DECB	K36214			; decr RMDN room level
	POP	R3
	ADD	#000022, R0		; + 18.
	MOVB	R0, K36211		; set MAND
	MOV	K36212, R3		; get MANPS
	ADD	#001100, R3		; + 576.
	MOV	#177740, R2
	JMP	K54262			; => PIGGS
; LEGS procedure
K41000:	MOVB	046775, K01602		; room number
	MOV	#000233, R0
	XOR	R0, K01602
	MOVB	K01602, 046775		; room number
	ADD	#000022, 041152		; + 18.
	MOVB	041172, R0
	INCB	R0
	CMPB	R0, #004		; == 4 ?
	BNE	K41144
	MOV	#047030, 041152
	MOV	#000001, R5		; sound duration = 1
	CMPB	050164, #000376
	BEQ	K41074
	MOV	#000012, R5		; sound duration = 10.
; Sound
K41074:	NOP3	;BIC	#000200, @#157706	; < sound timer
	NOP3	;BIS	#000140, @#157706	;   sound
	NOP3	;MOV	@#157706, @#177604	;   set SysRegC MS0515
	CLR	R0
	NOP3	;BIS	#000200, @#157706	;   sound timer
	NOP3	;BIC	#000140, @#157706	;   sound
	NOP3	;MOV	@#157706, @#177604	;   set SysRegC MS0515
	SOB	R5, K41074		; repeat
;
K41144:	MOVB	R0, 041172
	MOV	#000000, R3
	MOV	#047006, R2
	MOV	#000022, R1
K41164:	MOVB	(R3)+, (R2)+
	SOB	R1, K41164
	RETURN
;
K41172:	.WORD	001000
K41174:	.BYTE	0			; NJCOL+1
K41175:	.BYTE	0			; TMPNC
;
; KEY procedure: Check if we have a key pressed, and do keymapping
K41176:	NOP2	;MTPS	#000340			; disable interrupts
	PUSH	R3
	MOV	#K41304, R3
	MOVB	(R3)+, R0		; get input method; R3 = K41305
	DECB	R0
	BR	K41232
;
K41216:	MOVB	R0, 041340
	POP	R3
	NOP2	;MTPS	#000000			; enable interrupts
	RETURN
; If we have a key pressed, go through key mapping table
K41232:	PUSH	R1
	TSTB	@#177660	;БК	; do we have an unprocessed key?
	BPL	K41276		;БК	; no => jump
	NOP2	;CLR	001402			; mark as processed
	MOVB	@#177662, R0	;БК	; get the key
	MOV	#000011, R1		; 9.
K41256:	CMPB	(R3)+, R0		; <  matches the key?
	BNE	K41270			; |  no => jump
	INC	R3			; |
	MOVB	(R3), R0		; |  get the result byte
	BR	K41300			; |  break the loop
K41270:	ADD	#000002, R3		; |  to next key probe
	SOB	R1, K41256		; repeat
K41276:	CLR	R0			; not found - result is empty
K41300:	POP	R1
	BR	K41216
;
; Input method
K41304:	.BYTE	0
; Key mappings
K41305:	.BYTE	070, 001, 010
	.BYTE	062, 002, 004
	.BYTE	064, 010, 002
	.BYTE	066, 004, 001
	.BYTE	065, 001, 020
	.BYTE	061, 000, 012
	.BYTE	063, 000, 011
	.BYTE	067, 000, 024
	.BYTE	071, 000, 024
;
K41340:	.BYTE	0
	.EVEN
;
;K41342:
.INCLUDE /S242E2.MAC/
;
; Room tiles for the current room
;K43310:
.INCLUDE /S246C8.MAC/
;
; BUFCL procedure: Fill Ninja tile screen
K46120:	MOV	#L27624, R3		; BUFFN Ninja tile screen address
	MOV	#000110, R1		; 72. * 4 = 288. words
K46130:	MOV	#177777, R5		; filler
K46134:	MOV	R5, (R3)+		; <
	MOV	R5, (R3)+
	MOV	R5, (R3)+
	MOV	R5, (R3)+
	SOB	R1, K46134		; repeat
	RETURN
;
; BUFC2 procedure: Fill Enemy 0/1 tile screens
K46150:	MOV	#L30724, R3		; BUFG1 Enemy 0 tile screen address
	MOV	#000220, R1		; 144.
	BR	K46130			; fill Enemy 0/1 tile screens
;
;K46162:
.INCLUDE /S24C72.MAC/
;
; DRWOB procedure
K47660:	MOVB	R0, #000000
	MOVB	R0, #000000
;
K47670:	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K47704
	JMP	K55302			; => DROBR
K47704:	PUSH	R4
	PUSH	R5
	MOV	R1, R5
	MOV	#050110, R1		; MANBF
	MOV	@#K36212, R4		; get MANPS
	ADD	#L25424, R4		; BUFFB Back tile screen address
	MOVB	K01604, 050062
K47734:	MOVB	050062, K01604
	PUSH	R4
	MOVB	047662, K01606
	PUSH	R3
K47754:	CMPB	K01606, #000040
	BHIS	K50010
	CMPB	001607, #000022
	BHIS	K50010
	MOVB	(R4), R0
K47776:	NOP		;!!MUT-CMD!!  NOP or MOVB R0,(R1)  see L10224
	CMPB	R0, #000307
	BHIS	K50010
	MOVB	(R2), (R3)
K50010:	INCB	K01606
	INC	R4
	INC	R1
	INC	R3
	INC	R2
	DECB	K01604
	BNE	K47754
	POP	R3
	ADD	#000040, R3
	INCB	001607
	POP	R4
	ADD	#000040, R4
	SOB	R5, K47734
	POP	R5
	POP	R4
	RETURN
;
K50062:	.BYTE	6
	.EVEN
;
	.BLKW	42	;TODO
;
; CRUTP: ??? - Vector for (VECTN+1)
K50170:	CALL	K50274			; FLORQ
	BNE	K50336
	MOV	K36212, R3		; get MANPS
	MOV	#126566, R2
	CALL	K55630			; LFEDQ
	ADD	R2, R3
	MOV	#000002, R1
	TSTB	(R3)
	BNE	K50230
	CALL	L14472			; DECEN
K50230:	INCB	K36211
	MOV	K36212, R3		; get MANPS
	ADD	#000040, R3
	MOV	R3, K36212		; set MANPS
	MOV	#126566, R2
	CALL	K55630			; LFEDQ
	ADD	R2, R3
	TSTB	(R3)
	BEQ	K50272	;TODO
	JMP	K55262			; => SETST
K50272:	BR	K50442			; => SINK
; FLORQ procedure
K50274:	MOV	#050163, R3
	MOV	#000001, R5
	MOV	#000004, R1
K50310:	MOVB	(R3), R0
	INCB	R0
	CMPB	R0, #000310
	BHIS	K50332
	INC	R3
	SOB	R1, K50310
	DECB	R5
	RETURN
K50332:	INCB	R5
	RETURN
;
K50336:	MOV	#126566, R2
	CMPB	K36211, #000377
	BPL	K50356
	MOV	#127026, R2
K50356:	CALL	K55630			; LFEDQ
	MOV	K36212, R3		; get MANPS
	ADD	R2, R3
	TSTB	(R3)
	BEQ	K50442			; => SINK
	CALL	K41176			; KEY have a key pressed?
	BIT	#000020, R0		; bit 4 fire ?
	BEQ	K50430
	MOVB	#001, K37662		; set SPEED = 1
	MOV	#K50624, R3		; -> (VECTN+1)
	MOV	#047140, R2		; -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NKIKK:
K50430:	BIT	#000004, R0		; bit 2 down ?
	BNE	K50446
	JMP	K55262			; => SETST
; SINK:
K50442:	CALL	K41176			; KEY have a key pressed?
K50446:	BIT	#000002, R0		; bit 1 left ?
	BEQ	K50536
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BEQ	K50514			; 0 => CRRT
	CALL	K50572			; SWIMQ
	MOV	#000002, R1
	CALL	L14472			; DECEN
	MOV	#047264, R2		; SWIMC -> (CHARN+1)
	MOV	#K55644, R3		; SWILP -> (VECTN+1)
	JMP	K55246			; => SETVC - set vectors
; CRRT:
K50514:	MOVB	R0, K36264		; set DIR = 0
	JMP	K25276			; => ENDVC
; CLRT:
K50524:	INCB	R0			; 1.
	MOVB	R0, K36264		; set DIR = 1
	JMP	K25276			; => ENDVC
; NSWL:
K50536:	BIT	#000001, R0		; bit 0 ?
	BEQ	K50620			; => NSWR
	MOVB	K36264, R0		; get DIR
	BEQ	K50524			; 0 => CLRT
	CALL	K50572			; SWIMQ
	MOV	#047264, R2		; SWIMC -> (CHARN+1)
	MOV	#K55466, R3		; SWIRP -> (VECTN+1)
	JMP	K55246			; => SETVC - set vectors
; SWIMQ:
K50572:	MOV	K36212, R3		; get MANPS
	MOV	#126726, R2
	CALL	K55630			; LFEDQ
	ADD	R2, R3
	TSTB	(R3)
	BNE	K50616
	RETURN
K50616:	TST	(SP)+
; NSWR:
K50620:	JMP	K25276			; => ENDVC
; CRKIP:
K50624:	TSTB	K37662			; check SPEED
	BEQ	K50722
	MOVB	050154, R0		; get (MANBF+36)
	INCB	R0
	BEQ	K50666
	MOV	#131224, R2
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K50662
	MOV	#131231, R2
K50662:	CALL	K51646			; HITGQ
K50666:	MOVB	050140, R0
	INCB	R0
	BEQ	K50722
	MOV	#131124, R2
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K50716
	MOV	#131131, R2
K50716:	CALL	K51646			; HITGQ
K50722:	CLRB	037662
	CALL	K41176			; KEY have a key pressed?
	BIT	#000020, R0		; bit 4 fire ?
	BEQ	K50744
	JMP	K25276
K50744:	CLRB	K33542			; clear JUMP
	MOV	#K50170, R3		; CRUTP -> (VECTN+1)
	MOV	#047212, R2		; CRUTC -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
;
K50764:	.ASCII	/STASH SEARCHED/
;
K51002:	DECB	037662
	BEQ	K51014
	JMP	K25276
K51014:	MOV	K23746, R3		; get NERST
	MOVB	(R3), K23750		; -> TEMPN
	MOV	#000005, R1
K51030:	MOVB	000001(R3), R0
	MOVB	R0, (R3)+
	CMPB	R0, #000003
	BEQ	K51046
	SOB	R1, K51030
K51046:	DEC	R3
	CMPB	K23750, #004		; TEMPN == 4 ?
	BNE	K51150
	MOV	K51142, R2
	INC	R2
	MOV	R2, K51142
	MOV	#K51145, R3		; TAPCT address
	INCB	(R3)
	CALL	K01314			; Get random number
	BIC	#177776, R0
	ADD	#000045, R0
	MOVB	R0, -(R3)
	MOV	#000001, R1		; 1.
	CALL	K01704			; PRINT string
	MOV	#000144, R1		; 100.
	CALL	L10244			; MONUP
	JMP	K55262
;
K51142:	.WORD	0
	.BYTE	0
K51145:	.BYTE	0			; TAPCT - tapes held
K51146:	.WORD	0			; TAPTT - tapes already placed
;
K51150:	CLR	R1
	TSTB	K24762
	BNE	K51164
	MOV	#000200, R1
K51164:	MOVB	K33464, R0		; get HELD value
	BNE	K51200
	MOV	#000003, R0
	CLR	R1
K51200:	BISB	R1, R0
	MOVB	R0, (R3)
	TSTB	R1
	BEQ	K51216
	MOVB	#001, K24762
K51216:	MOVB	K23750, R0		; get TEMPN
	BPL	K51300
	BIC	#177600, R0		; 0..177
	PUSH	R0
	MOV	#055333, R2		; screen coords
	MOVB	#004, R1		; 4. rows
	MOV	#000217, R0
K51246:	CALL	L13224			; <  calc screen attr address and set attrs for 8x8 block
	INC	R2
	SOB	R1, K51246		; repeat
	MOV	#K50764, R3		; "STASH SEARCHED"
	MOV	#000016, R1		; 14.
	MOV	#050146, R2		; screen coords
	CALL	K01704			; PRINT string "STASH SEARCHED"
	POP	R0
K51300:	CMPB	R0, #000003
	BNE	K51310
	CLR	R0
K51310:	MOVB	R0, K33464		; clear HELD value
	CALL	K05040			; HLDOD
	JMP	K55262
; FIREP:
K51324:	MOVB	050124, R0
	INCB	R0
	BEQ	K51620
	TSTB	K33464			; check HELD value
	BEQ	K51566
; HELD value != 0
K51342:	MOVB	K36264, R0		; get DIR
	MOV	#000005, R1
	MOVB	#000010, K01604
	MOV	#000105, R2
	DECB	R0
	BEQ	K51406
	MOV	#000000, R1
	MOVB	#004, K01604
	MOV	#000100, R2
K51406:	MOVB	K36210, R0		; get MANA
	ADD	R1, R0
	MOV	K36212, R3		; get MANPS
	ADD	R2, R3
	MOV	R3, K01610
	MOVB	K01610, K33471
	MOVB	K01611, K33472
	MOVB	R0, K33470
	MOVB	K36211, R0
	ADD	#000002, R0
	MOVB	R0, K33467
	MOVB	K33464, R0		; get HELD value
	ASL	R0
	ADD	#000320, R0
	MOVB	R0, K33466		; MISL1 - Ninja object
	CLR	R0
	MOVB	R0, K33464		; set HELD value
	CALL	K05040			; HLDOD
	MOVB	K01604, R0
	MOVB	R0, K33473
	MOVB	R0, K33474
	CALL	K41176			; KEY have a key pressed?
	MOV	#K33474, R3
	BIT	#000010, R0		; bit 3 ?
	BEQ	K51546
	BR	K51556
K51546:	BIT	#000004, R0		; bit 2 ?
	BEQ	K51620
	INCB	(R3)
K51556:	INCB	(R3)
	CLRB	037662
	BR	K51630
K51566:	TSTB	037662
	BEQ	K51620
	MOV	#130764, R2
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K51614
	MOV	#130771, R2
K51614:	CALL	K51646			; HITGQ
K51620:	CLRB	037662
	CALL	K41176			; KEY have a key pressed?
K51630:	BIT	#000020, R0		; bit 4 fire ?
	BNE	K51642
	JMP	K55262
K51642:	JMP	K25276
; HITGQ procedure
K51646:	MOV	K36212, R3		; get MANPS
	ADD	R2, R3
	MOVB	(R3), R0
	INCB	R0
	BEQ	K51702
	MOVB	#001, R0
K51666:	MOVB	R0, K26672		; set GDHIT = 1
	MOVB	#001, K37662		; set SPEED = 1
	RETURN
K51702:	MOVB	001100(R3), R0
	INCB	R0
	BNE	K51714
	RETURN
K51714:	MOVB	#002, R0
	BR	K51666			; => LE234
; KICKP
K51722:	MOVB	#002, K37662		; set SPEED = 2
	MOV	#051744, R3		; -> (VECTN+1)
	MOV	#047410, R2		; -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
	MOV	#037662, R3
	DECB	(R3)
	BNE	K51770
	MOV	#052030, R3		; -> (VECTN+1)
	MOV	#047336, R2		; -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
K51770:	MOVB	050117, R0
	INCB	R0
	BEQ	K52024
	MOV	#130765, R2
	MOVB	K36264, R0		; get DIR
	DECB	R0
	BNE	K52020
	MOV	#130770, R2
K52020:	CALL	K51646			; HITGQ
K52024:	JMP	K25276
K52030:	JMP	K55262
;
K52034:	.WORD	1			; ENTIM timer
;
; RESTP procedure
K52036:	MOV	#K52034, R3		; ENTIM addr
	DECB	(R3)			; decr ENTIM
	BNE	K52116			; NZ => RETURN
	NOP1
	MOVB	#002, (R3)		; set ENTIM = 2
	CMPB	<L14506+2>, #016	; (NRGCR+1) == 14. ?
	BNE	K52076			; NZ => NGOKU
	CMPB	<L14534+2>, #001	; (NRGPX+1) == 1 ?
	BEQ	K52116			; Z => RETURN
	NOP1
; NGOKU:
K52076:	CALL	L14442			; NRGUP
	MOV	#000001, R1
	CALL	L14502			; DECN2
	CALL	L14442			; NRGUP
K52116:	RETURN
; STANP: Ninja standing - Vector for (VECTN+1)
K52120:	CALL	K52036			; RESTP
	CALL	K50274			; FLORQ
	BNE	K52162
	MOV	#047606, R2		; -> (CHARN+1)
	MOV	#000001, R0
	MOV	R0, <K54510+2>		; set (HIGHT+1)
	MOVB	R0, K33542		; set JUMP
K52152:	MOV	#K54302, R3		; LEP5P address -> (VECTN+1)
	JMP	K55246			; => SETVC - set vectors
K52162:	MOVB	K17200, R0		; get BIKER
	CMPB	R0, #000020
K52172:	BNE	K52200
	JMP	K53066
K52200:	CMPB	R0, #000310		; == 200. ?
	BNE	K52212
	JMP	L14674			; yes => COMPL
K52212:	CALL	K41176			; KEY have a key pressed?
	BIT	#000020, R0		; bit 4 fire ?
	BNE	K52230
	JMP	K53042			; => NFIRE
; Fire key; Console check
K52230:	MOVB	050134, R0		; get (MANBF+20.)
	INCB	R0
	BNE	K52244
	JMP	K52772			; => NCONU
K52244:	MOV	K36212, R3		; get MANPS
	ADD	#126666, R3		; + <BUFFO+98.>
	CMPB	(R3), #000212		; == 138. ?
	BEQ	K52266
	JMP	K52772			; no => NCONU
; LIFTSWAP or FENSWAP or CODEROP
K52266:	MOV	<K13332+2>, R3		; get (RM+1)
	CMPB	(R3), #000075		; == 61. ?
	BEQ	K52446			; yes => K2DAQ
	CMPB	(R3), #000115		; == 77. ?
	BEQ	K52402			; yes => KODAQ
	NOP2
; NSEEC:
K52312:	MOVB	060610, K01602		; get LFT1
	MOV	#000356, R0
	XOR	R0, K01602		; XOR 238.
	MOVB	K01602, 060610		; set LFT1
	COMB	K60677			; invert LFT3
	MOV	#K52702, R3		; " LIFT IS DOWN "
	MOVB	K60677, R0		; get LFT3
	INCB	R0
	BEQ	K52362			; => BUTCR
	MOV	#K52720, R3		; "  LIFT IS UP  "
; BUTCR:
K52362:	MOV	#000016, R1		; 14.
	MOV	#050146, R2		; screen address
	CALL	K01704			; PRINT string
	JMP	K25276
K52402:	MOVB	013226, R0
	INCB	R0
	BEQ	K52312
	MOV	#031222, R3
	MOVB	(R3), R5
	MOV	#000021, R0
	XOR	R0, R5
	MOVB	R5, (R3)
	MOV	#K52754, R3		; " FENCE IS OFF "
	INCB	R5
	BEQ	K52362			; => BUTCR
	MOV	#K52736, R3		; "  FENCE IS ON "
	BR	K52362			; => BUTCR
; K2DAQ:
K52446:	MOV	#050146, R2
	MOV	#000016, R1		; 14.
	MOV	#K51145, R3		; TAPCT address
	MOVB	K51146, R0		; get TAPTT
	BEQ	K52472			; 0 => KINTE
	MOVB	R0, (R3)		; set TAPCT
; KINTE
K52472:	MOVB	(R3), R0
	BEQ	K52576			; 0 => KODNA
	CMPB	K52626, (R3)		; get NTPND - tapes needed
	BHIS	K52612			; => KDNTA
K52504:	MOVB	K51146, R0		; get TAPTT
	BNE	K52526			; => ALRGM
	PUSH	R2
	PUSH	R1
	CALL	L15506			; PLFHN - MONEY up 500.
	POP	R1
	POP	R2
; ALRGM:
K52526:	MOVB	K51145, K51146		; copy TAPCT -> TAPTT
	MOV	#K52646, R3		; "CODE ACCEPTED"
	CALL	K01704			; PRINT string
; ERACD:
K52544:	MOV	#050205, R2
	MOV	R2, K51142		; set PTSPS
	INC	R2
	MOV	#L10560, R3		; SPCHR 21. space char string
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string
	JMP	K25276			; => ENDVC
; KODNA:
K52576:	MOV	#K52630, R3		; " CODE  NEEDED "
	CALL	K01704			; PRINT string
	JMP	K25276			; => ENDVC
; KDNTA:
K52612:	BEQ	K52504			; => JIUWC
	MOV	#K52664, R3		; "CODE  REJECTED"
	CALL	K01704			; PRINT string
	BR	K52544			; => ERACD
;
K52626:	.WORD	0			; NTPND - tapes needed
;
K52630:	.ASCII	/ CODE  NEEDED /
K52646:	.ASCII	/CODE  ACCEPTED/
K52664:	.ASCII	/CODE  REJECTED/
K52702:	.ASCII	/ LIFT IS DOWN /
K52720:	.ASCII	/  LIFT IS UP  /
K52736:	.ASCII	/  FENCE IS ON /
K52754:	.ASCII	/ FENCE IS OFF /
;
; NCONU:
K52772:	TSTB	K33465			; check NEAR
	BEQ	K53020			; 0 => MAZZ1
	MOV	#000002, R0		; 2. -> SPEED
	MOV	#047212, R2		; CRUTC address -> (CHARN+1)
	MOV	#K51002, R3		; TAKEP address -> (VECTN+1)
	JMP	K55242			; => SETSP - set SPEED and vectors
; MAZZ1:
K53020:	MOVB	#001, K37662		; set SPEED = 1
	MOV	#K51324, R3		; FIREP address -> (VECTN+1)
	MOV	#046704, R2		; PUNCC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NFIRE: Check left direction
K53042:	BIT	#000002, R0		; bit 1 left ?
	BEQ	K53106			; no => NLEFT
	TSTB	K36264			; check DIR
	BEQ	K53066
	DECB	K36264			; decrement DIR
	JMP	K25276			; => ENDVC
; LOK:
K53066:	CALL	K53612			; SETLG
	MOV	#K40044, R3		; LEFTP address -> (VECTN+1)
	MOV	#046756, R2		; RUNC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NLEFT: Check down direction
K53106:	BIT	#000004, R0		; bit 2 ? down
	BEQ	K53300			; no => NDOWN
	MOVB	050162, R0		; get (MANBF+42.)
	TSTB	K36264			; check DIR
	BEQ	K53132
	MOVB	050167, R0		; get (MANBF+47.)
; FEGJB:
K53132:	CMPB	R0, #000324		; == 212. ?
	BNE	K53166			; no => NLFTD
	MOVB	126471, R0
	CMPB	R0, #010		; == 10. ?
	BNE	K53166
	CALL	L10300			; MONYP - Print MONEY
	MOV	#K54562, R3		; LIFTD address
	JMP	K55252			; => SETV2 - set vector
; NLFTD:
K53166:	MOVB	050164, R0
	TSTB	K36264			; check DIR
	BEQ	K53204
	MOVB	050165, R0		; get (MANBF+44.)
K53204:	CMPB	R0, #054		; == 44. ?
	BEQ	K53240			; yes => SETL2
	CMPB	R0, #045		; == 37. ?
	BEQ	K53240			; yes => SETL2
	CMPB	R0, #011		; == 9. ?
	BEQ	K53240			; yes => SETL2
	CMPB	R0, #005		; == 5 ?
	BEQ	K53240			; yes => SETL2
	JMP	K50744			; => SETCR
; SETL2:
K53240:	MOV	#053646, R3		; LADDP address
	MOV	#046632, R2		; LADDC address
	MOV	R2, <K36276+2>
	MOV	R3, <K25272+2>		; set JMP address
	JMP	K54172			; => ONTLD
; SETLD:
K53264:	MOV	#053646, R3		; LADDP address -> (VECTN+1)
	MOV	#046632, R2		; LADDC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NDOWN: Check right direction
K53300:	BIT	#000001, R0		; bit 0 ? right
	BEQ	K53352			; no => NRITE
	MOVB	K36264, R0		; get DIR
	CMPB	R0, #001
	BEQ	K53332
	INCB	R0
	MOVB	R0, K36264		; set DIR
	JMP	K25276			; => ENDVC
; ROK:
K53332:	CALL	K53612			; SETLG
	MOV	#037524, R3		; RITEP address -> (VECTN+1)
	MOV	#046756, R2		; RUNC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NRITE:
K53352:	BIT	#000010, R0		; bit 3 ? kick
	BEQ	K53606			; no => NKICK
	TSTB	K36264			; check DIR
	BNE	K53440			; => NPOSR
	MOV	K36212, R3		; get MANPS
	ADD	#126624, R3		; + <BUFFO+64.>
	CMPB	(R3), #000142		; == 98. ?
	BNE	K53440			; no => NPOSR
	MOVB	#376, K17200		; set BIKER = 254.
	MOV	#040576, R3		; BIKEP address -> (VECTN+1)
	MOV	#046244, R2		; BIKNC address -> (CHARN+1)
	MOVB	#375, K17200		; set BIKER = 253.
	MOVB	#000155, R0		; 109. -> SPEED
	JMP	K55242			; => SETSP - set SPEED and vectors
; NPOSR:
K53440:	MOVB	050162, R0		; get (MANBF+42.)
	TSTB	K36264			; check DIR
	BEQ	K53456
	MOVB	050167, R0		; get (MANBF+47.)
K53456:	CMPB	R0, #000324		; == 212. ?
	BNE	K53512			; no => NLFTU
	MOVB	126471, R0		; get (BUFFB+549.)
	CMPB	R0, #000010		; == 8. ?
	BEQ	K53512			; yes => NLFTU
	CALL	L10300			; MONYP - Print MONEY
	MOV	#054774, R3		; LIFTU address
	JMP	K55252			; => SETV2 - set vector
; LIFTU:
K53512:	MOVB	050156, R0		; get (MANBF+38.)
	TSTB	K36264			; check DIR
	BEQ	K53530
	MOVB	050157, R0		; get (MANBF+39.)
K53530:	CMPB	R0, #000011		; == 9. ?
	BNE	K53542
K53536:	JMP	K53264			; => SETLD
K53542:	CMPB	R0, #005		; == 5. ?
	BEQ	K53536			; => SETLD
	CMPB	R0, #045		; == 37. ?
	BEQ	K53536			; => SETLD
	CMPB	R0, #054		; == 44. ?
	BEQ	K53536			; => SETLD
	CMPB	R0, #020		; == 16. ?
	BEQ	K53536			; => SETLD
	MOV	#K51722, R3		; KICKP address -> (VECTN+1)
	MOV	#047336, R2		; JUMPC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; NCICK:
K53606:	JMP	K25276			; => ENDVC
; SETLG procedure
K53612:	MOV	#047030, R3		; LEG1 address
	MOV	R3, 041152
	MOV	#047006, R2
	MOV	#000022, R1		; 18.
K53632:	MOVB	(R3)+, (R2)+		; <
	SOB	R1, K53632		; repeat
	CLRB	041172			; set LEGP = 0
	RETURN
	NOP1
; LADDP:
K53646:	MOVB	050156, R0		; get (MANBF+38.)
	TSTB	K36264			; check DIR
	BEQ	K53664
	MOVB	050157, R0		; get (MANBF+39.)
K53664:	CMPB	R0, #000005		; == 5 ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000011		; == 9. ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000020		; == 16. ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000045		; == 37. ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000054		; == 44. ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000314		; == 204. ?
	BEQ	K53742			; yes => STLOL
	CMPB	R0, #000377		; == 255. ?
	BEQ	K53742			; yes => STLOL
	JMP	K55262			; => SETST
; STLOL:
K53742:	CALL	K41176			; KEY have a key pressed?
	BIT	#000001, R0		; bit 0 right ?
	BEQ	K53764			; no => NTOFR
	MOVB	#001, K36264		; set DIR = 1
	BR	K53776			; => OFLDQ
; NTOFR:
K53764:	BIT	#000002, R0		; bit 1 left ?
	BEQ	K54032			; no => NTOFL
	CLRB	K36264			; DIR = 0 left
; OFLDQ:
K53776:	CMPB	050155, #000307		; (MANBF+37.) compare to 199.
	BHIS	K54026			; => ENDVC
	MOVB	050163, R0		; get (MANBF+43.)
	INCB	R0
	CMPB	R0, #000307		; compare to 199.
	BLO	K54026			; => ENDVC
K54022:	JMP	K55262			; => SETST
K54026:	JMP	K25276			; => ENDVC
; NTOFL:
K54032:	BIT	#000010, R0		; bit 3 ?
	BEQ	K54134			; no => NUPL
	MOVB	K36211, R0		; get MAND
	DECB	R0
	BMI	K54076			; => LCLUY
	MOV	K36212, R3		; get MANPS
	ADD	#125366, R3		; + <BUFFB-30.>
	MOVB	(R3), R0
	CMPB	R0, #000314		; == 204. ?
	BEQ	K54076			; yes => LCLUY
	CMPB	R0, #000307		; compare to 199.
	BHIS	K54026			; => ENDVC
; LCLUY:
K54076:	CALL	K40726			; OFTOP
	DECB	K36211
	SUB	#000040, K36212		; MANPS
; NXRNG:
K54114:	RORB	K36264			; DIR
	BHIS	K54124
	.WORD	005727	;TST #000261	; XOR 1
K54124:	SEC
	ROLB	K36264			; DIR
	BR	K54026			; => ENDVC
K54134:	BIT	#000004, R0
	BEQ	K54026			; => ENDVC
	MOVB	050164, R0
	INCB	R0
	CMPB	R0, #000307
	BHIS	K54022
	MOVB	050165, R0
	INCB	R0
	CMPB	R0, #000307
	BHIS	K54022
K54172:	CALL	K54212			; OFBOT
	INCB	K36211
	ADD	#000040, K36212		; MANPS
	BR	K54114
; OFBOT procedure
K54212:	MOVB	K36211, R0
	CMPB	R0, #000013		; == 11. ?
	BEQ	K54226
	RETURN
K54226:	MOV	#K36214, R3		; RMDN addr
	INCB	(R3)			; down one level
	POP	R3
	SUB	#000021, R0
	MOVB	R0, K36211
	MOV	K36212, R3		; get MANPS
	SUB	#001040, R3
	MOV	#000040, R2
K54262:	MOV	R3, K36212		; set MANPS
	ADD	R2, <K13332+2>
	CLRB	K03542			; clear (NJCOL+1)
	JMP	K13072			; => INISC
; LEP5P:
K54302:	CALL	K54212			; OFBOT
	CALL	K50274			; FLORQ
	BEQ	K54530			; => HJRRF
	TSTB	K33540			; check DEAD
	BEQ	K54510			; 0=alive => HIGHT
; Dead
	MOV	#000024, R1		; 20.
	MOV	#K54440, R2		; " MISSION TERMINATED "
	MOVB	K33540, R0		; get DEAD
	DECB	R0
	BNE	K54346			; => TIMMY
K54342:	MOV	#K54464, R2		; "  MISSION FAILURE  "
; TIMMY:
K54346:	MOV	#127132, R3		; BUFFO+262. address
	CALL	K04604			; BUFOM - Draw string as tiles
	MOVB	K17200, R0		; get BIKER
	CMPB	R0, #000375		; == 253. ?
	BNE	K54404			; no => ALRTD
	MOV	#K17204, R2		; BIKEC
	MOV	#L26524, R1		; BUFFO Front tile screen address
	CALL	K40436			; DRBIK
; ALRTD:
K54404:	MOV	#K46162, R2		; NINDC address
	MOV	#L24324, R1		; BUFFD address
	CALL	K40436			; DRBIK
	MOV	#047534, R2		; DEDNC dead Ninja tiles -> (CHARN+1)
	MOV	#K55224, R3		; DIING address -> (VECTN+1)
	MOVB	#036, R0		; 30. -> SPEED
	JMP	K55242			; => SETSP - set SPEED and vectors
;
K54440:	.ASCII	/@MISSION@TERMINATED@/
K54464:	.ASCII	/@@MISSION@@FAILURE@@/
;
; HIGHT:
K54510:	MOV	#000001, R1		; 1.
	CALL	L14472			; DECEN
	CALL	L15650			; Sound CRUNCH noise
	JMP	K50744			; => SETCR
; HJRRF:
K54530:	MOV	#<K54510+2>, R3		; HIGHT+1 addr
	CMPB	#000372, (R3)		; == 250. ?
	BEQ	K54544			; yes => NOEL
	INCB	(R3)
; NOEL:
K54544:	INCB	K36211			; increment MAND
	ADD	#000040, K36212		; MANPS
	JMP	K25276			; => ENDVC
; LIFTD: lift down
K54562:	MOVB	#021, 060610		; set LFT1 = 17.
	CLRB	K60677			; set LFT3 = 0 UP
	CALL	K52036			; RESTP
	CALL	K54212			; OFBOT
	INCB	K36211			; increment MAND
	MOV	K36212, R3		; get MANPS
	ADD	#000040, R3		; + 32.
	MOV	R3, K36212		; set MANPS
	ADD	#125724, R3
	MOV	#000006, R1
K54634:	MOVB	#000010, (R3)+
	SOB	R1, K54634
	CMPB	K36211, #000013		; MAND == 11. ?
	BEQ	K54710			; yes => JHGYG
	ADD	#000032, R3		; + 26.
	MOV	#070602, R2
	MOV	#000006, R1		; 6.
K54666:	MOVB	(R2)+, (R3)+		; <
	SOB	R1, K54666		; repeat
	SUB	#001100, R3
	MOV	#000006, R1		; 6.
K54702:	MOVB	#001, -(R3)		; <
	SOB	R1, K54702		; repeat
; JHGYG:
K54710:	CALL	K41176			; KEY have a key pressed?
	MOV	#054774, R3		; LIFTU address
	BIT	#000010, R0		; bit 3 ?
	BEQ	K54732
	JMP	K55252			; => SETV2 - set vector
K54732:	MOVB	#177777, R0
	MOVB	R0, 060610		; set LFT1 = 255.
	MOVB	R0, K60677		; set LFT3 = 255. DOWN
	MOV	K36212, R3		; get MANPS
	ADD	#126024, R3
	CMPB	(R3), #000372
	BEQ	K54770
	JMP	K25276			; => ENDVC
K54770:	JMP	K50744			; => SETCR
; LIFTU: lift up
K54774:	MOV	#177777, R0
	MOVB	R0, 060610		; set LFT1 = 255.
	MOVB	R0, K60677		; set LFT3 = 255. DOWN
	CALL	K52036			; RESTP
	CALL	K40726			; OFTOP
	DECB	K36211			; decrement MAND
	MOV	K36212, R3		; get MANPS
	SUB	#000040, R3
	MOV	R3, K36212		; set MANPS
	CMPB	K36211, #000013
	BEQ	K55134
	ADD	#125764, R3
	MOV	#000006, R1
	MOV	#070602, R2
K55064:	MOVB	(R2)+, (R3)+
	SOB	R1, K55064
	CMPB	K36211, #000012
	BEQ	K55134
	ADD	#000032, R3
	MOV	#000006, R1
K55110:	MOVB	#000010, (R3)+
	SOB	R1, K55110
	SUB	#001100, R3
	MOV	#000006, R1
K55126:	MOVB	#001, -(R3)
	SOB	R1, K55126
; JHGY2:
K55134:	CALL	K41176			; KEY have a key pressed?
	MOV	#K54562, R3		; LIFTD address
	BIT	#000004, R0		; bit 2 ?
	BNE	K55252			; no => SETV2 - set vector
	MOVB	#000021, 060610		; set LFT1 = 17.
	CLRB	K60677			; set LFT3 = 0 UP
	MOV	K36212, R3		; get MANPS
	ADD	#125723, R3
	CMPB	(R3), #000010
	BEQ	K55206
	JMP	K25276			; => ENDVC
K55206:	DECB	K36211			; decrement MAND
	SUB	#000040, K36212		; MANPS
	JMP	K55262
; DIING: Dying Ninja
K55224:	DECB	K37662			; decr SPEED
	BEQ	K55236
	JMP	K25276			; => ENDVC
K55236:	JMP	L10606			; => FNISH - Finish the game
; SETSP: Set SPEED and vectors
K55242:	MOVB	R0, K37662		; set SPEED
; SETVC: Set vectors
K55246:	MOV	R2, <K36276+2>		; set (CHARN+1)
; SETV2: Set vector
K55252:	MOV	R3, <K25272+2>		; set (VECTN+1)
	JMP	K25276			; => ENDVC
; SETST:
K55262:	CLRB	K33542			; clear JUMP
	MOV	#K52120, R3		; STANP address -> (VECTN+1)
	MOV	#046561, R2		; STANC address -> (CHARN+1)
	JMP	K55246			; => SETVC - set vectors
; DROBR
K55302:	PUSH	R4
	PUSH	R5
	MOV	R1, R5
; PUM06:
K55310:	MOV	#050115, R1		;WARN
	MOV	@#K36212, R4		; get MANPS
	ADD	#L25424, R4		; BUFFB Back tile screen address
	MOVB	K01604, 055464
	ADD	#000005, R2
; LROP6:
K55336:	MOVB	055464, K01604
	MOVB	047666, K01606
K55352:	CMPB	K01606, #000040		; 32.
	BHIS	K55406
	CMPB	001607, #000022		; 18.
	BHIS	K55406
	MOVB	(R4), R0
K55374:	NOP		;!!MUT-CMD!!  NOP or MOVB R0,(R1)  see L10224
	CMPB	R0, #000307
	BHIS	K55406
	MOVB	(R2), (R3)
K55406:	INCB	K01606
	INC	R4
	DEC	R1
	INC	R3
	DEC	R2
	DECB	K01604
	BNE	K55352
	ADD	#000032, R3
	ADD	#000014, R2		; 12.
	INCB	001607
	ADD	#000032, R4
	ADD	#000014, R1		; 12.
	SOB	R5, K55336		; repeat => LROP6
	POP	R5
	POP	R4
	RETURN
;
K55464:	.WORD	6
;
; SWIRP: Swim - Vector for (VECTN+1)
K55466:	MOVB	K36210, R0		; get MANA
	CMPB	R0, #000035		; == 29. ?
	BNE	K55504
	JMP	K37746			; => RITSC - go one room right
K55504:	CMPB	R0, #000032		; == 26. ?
	BHIS	K55534			; => NCHK1
	MOV	K36212, R3		; get MANPS
	ADD	#125732, R3
	CMPB	(R3), #000307
	BHIS	K55546			; => BLOW1
	MOVB	K36210, R0		; get MANA
; NCHK1:
K55534:	INCB	R0
	MOVB	R0, K36210		; set MANA
	INC	K36212			; increment MANPS
; BLOW1:
K55546:	CALL	K55736			; LEGSW
	CALL	K41176			; KEY have a key pressed?
	BIT	#000001, R0		; bit 0 right ?
K55562:	BNE	K55570
	JMP	K50744			; => SETCR
K55570:	MOV	#126666, R2		; BUFFO+98.
	CALL	K55630			; LFEDQ
	MOV	K36212, R3		; get MANPS
	ADD	R2, R3
	TSTB	(R3)
	BNE	K55624			; => NFLOT
	DECB	K36211			; decrement MAND
	SUB	#000040, K36212		; MANPS -= 32.
; NFLOT:
K55624:	JMP	K25276			; => ENDVC
;
; LFEDQ Procedure: If MANA != 253., increment R2
K55630:	CMPB	K36210, #000375		; MANA == 253. ?
	BNE	K55642			; no => return
	INC	R2
K55642:	RETURN
; SWILP:
K55644:	MOVB	K36210, R0		; get MANA
	CMPB	R0, #000375
	BNE	K55662
	JMP	K40012
K55662:	CMPB	R0, #000001
	BPL	K55674
	BR	K55710
;
K55672:	.WORD	016703	;??
;
K55674:	SUB	R3, (R4)
	ADD	#125723, R3
	CMPB	(R3), #000307
	BHIS	K55720
K55710:	DECB	K36210			; decrement MANA
	DEC	K36212			; decrement MANPS
K55720:	CALL	K55736			; LEGSW
	CALL	K41176			; KEY have a key pressed?
	BIT	#000002, R0		; bit 1 ?
	BR	K55562			; => FLOTQ
; LEGSW procedure
K55736:	MOVB	047313, K01602		; room number
	MOV	#000007, R0
	XOR	R0, K01602		; FOOTC
	MOVB	K01602, 047313		; room number
	RETURN
;
; K55764 == ROOMS	Room sequences, 246. rooms
; K70572 == SMAP	World map, 32x28 bytes
; K72572 == ROOMSA	Room sequence addresses, 246. rooms
.INCLUDE /S2ROOM.MAC/
K60677 = K60640 + 37			; LFT3 lift position byte: 377 = DOWN, 0 = UP
;
.INCLUDE /S2SPRT.MAC/
;K73550:
;	.BLKW	1467	;TODO
;
;	.BYTE	0	;TODO
; Sprite Puma, 8x3, 4 phases
;K76727:
;	.BYTE	0	;TODO
;
;	.BLKW	274	;TODO
;
;	.BYTE	0	;TODO
; Room tiles, 8x8, 9. bytes each, 256. tiles = 2304. bytes
;K77521:
;	.BYTE	0	;TODO
;
;	.BLKW	2177	;TODO
;
;L04120:
;
;	.BLKW	1046	;TODO

; Font regular, 8x8, 8. bytes each, 96. symbols = 768. bytes
.INCLUDE /S2FONT.MAC/

; INITHI procedure: Draw Ninja for Menu
L07634:	MOV	#L04120, R3		; HSPCD
	MOV	#L24324, R2		; BUFFD Address where prepared picture will be placed
L07644:	MOVB	(R3), R0		; <
	CMPB	R0, #173		; 123.
	BEQ	L07710			; exit => DRWPC
	CMPB	R0, #352		; 234.
	BEQ	L07676			; => XPAND
	MOV	#000001, R1
L07666:	MOVB	R0, (R2)+		; <
	SOB	R1, L07666		; repeat
	INC	R3
	BR	L07644			; repeat
L07676:	INC	R3
	CLR	R1
	BISB	(R3)+, R1
	MOVB	(R3), R0
	BR	L07666
; DRWPC:
L07710:	PUSH	R4
	MOV	#040052, R3
	MOV	#L24324, R2		; BUFFD Address with prepared picture
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
	MOV	#000013, R1
L07742:	MOV	#000030, R4		; <
	PUSH	R3
L07750:	MOVB	(R2)+, R5		;   <
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
	ADD	#000100, R3
	SOB	R4, L07750		; | repeat
	POP	R3
	TST	(R3)+
	SOB	R1, L07742		; repeat
	NOP2	;MOV	#040011, R3
	MOV	#130424, R2
	MOV	#000030, R1
L10054:	MOV	#000040, R4		; <
L10060:	NOP1	;PUSH	R3			; | <
L10062:	;NOTE: Удалил
	NOP1	;POP	R3
L10140:	;NOTE: Удалил
	NOP1	;SOB	R4, L10060		;   repeat
	NOP2	;ADD	#001100, R3
	NOP1	;SOB	R1, L10054		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R4
	JMP	L10320			; CLSLF Clear Menu left part, and return
	NOP1
	NOP3
;
; GTBAK procedure
L10200:	MOV	#050110, R3		; MANBF
	MOV	#000030, R1		; 24.
	MOV	#177777, R2
L10214:	MOV	R2, (R3)+		; <
	SOB	R1, L10214		; repeat
	MOV	#110011, R0		; MOVB R0,(R1) command
L10224:	MOV	R0, K47776		; set command
	MOV	R0, K55374		; set command
	RETURN
;
; GTBK2 Procedure
L10236:	MOV	#000240, R0		; NOP command
	BR	L10224
;
; MONUP procedure: MONEY up by R1
L10244:	MOV	#<K12423+12>, R3	; address
	MOV	#000006, R5		; 6.
	MOV	#000072, R0		; 58.
L10260:	INCB	(R3)
	CMPB	R0, (R3)
	BNE	L10276			; => PRMON
	MOVB	#060, (R3)		; '0'
	DEC	R3
	SOB	R5, L10260		; repeat
L10276:	SOB	R1, L10244		; repeat
; MONYP entry point: Print MONEY
L10300:	MOV	#050146, R2
	MOV	#000016, R1		; 14.
	MOV	#K12422, R3		; " PAY $0000000 "
	JMP	K01704			; PRINT string and return
;
; CLSLF procedure: Clear Menu left part
L10320:	PUSH	R4
	MOV	#000030, R4		; 24. lines
	MOV	#040000, R2		; screen address
L10332:	PUSH	R2			; <
	MOV	#000025, R1		; |  21.
	MOV	#L10560, R3		; |  SPCHR 21. space char string
	CALL	K01704			; |  Print string
	POP	R2			; |
	ADD	#000040, R2		; | +32.
	BIT	#000340, R2		; |
	BNE	L10374			; |
	SUB	#000400, R2		; |
	ADD	#004000, R2		; |
L10374:	SOB	R4, L10332		; repeat
; Clear atributes
;NOTE удалил, не нужно на БК
L10554:	POP	R4
	RETURN

;TODO: Поместить в буферную память, используется один раз на старте
PREPAR:
; Создать таблицу PXCONV, для конвертации пикселей
	MOV	#L33124, R2
	MOV	#-128., R3		; R3 бежит от -128. до +127.
1$:	CLR	R5			; в R5 будет готовое слово
	MOV	#8., R4			; в R4 счётчик по разрядам
	MOV	R3, R1
2$:	ASR	R1			; 0-й бит идёт в C
	ROL	R5			; забираем из C
	ROL	R5
	SOB	R4, 2$
	MOV	R5, (R2)+		; записываем результат
	INC	R3
	CMP	R3, #128.
	BLT	1$
	RETURN

	.BLKW	45	;NOTE: Свободное место

L10560:	.ASCIZ	/                     /	; SPCHR 21. space char
;
; FNISH: Finish the game
L10606:	CALL	L07634			; INITHI Draw Ninja for Menu
	MOVB	#000017, R1		; 15.
	MOV	#114017, R3		; TABLE
L10622:	MOV	#012430, R2		; MONEY+5
	PUSH	R3
	MOVB	#006, K01604		; 6.
L10636:	CMPB	(R2), (R3)
	BNE	L10670
	INC	R3
	INC	R2
	DECB	K01604
	BNE	L10636
L10654:	POP	R3
	ADD	#000021, R3		; + 17.
	SOB	R1, L10622
	BR	L11054			; => TABDR
	NOP1
L10670:	BLO	L10654
	POP	R3
	PUSH	R1
	MOV	#040103, R2
	MOV	#L13706, R3		; "CONGRATULATIONS"
	MOV	#000017, R1		; 15.
	CALL	K01704			; PRINT string "CONGRATULATIONS"
	MOV	#040242, R2
	MOV	#000022, R1		; 18.
	CALL	K01704			; PRINT string "YOU ARE NOW A TRUE"
	MOV	#040344, R2
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string "NINJA SABOTEUR"
	MOV	#044143, R2
	MOV	#000017, R1		; 15.
	CALL	K01704			; PRINT string "ENTER YOUR NAME"
	CALL	L12570			; INPUT string
	POP	R1
	MOV	#L14437, R3		; "0 "
	MOV	#L14416, R2		; "SPARE SCORE+NAME "
L11000:	MOVB	#000021, K01604		; 17.
L11006:	MOVB	-(R2), -(R3)
	DECB	K01604
	BNE	L11006
	SOB	R1, L11000
	MOV	#012430, R3
	MOV	#000006, R1		; 6.
L11030:	MOVB	(R3)+, (R2)+
	SOB	R1, L11030
	INC	R3
	INC	R3
	MOV	#000013, R1		; 11.
L11044:	MOVB	(R3)+, (R2)+
	SOB	R1, L11044
;
; NOYBA: Show the score table
L11050:	CALL	L10320			; CLSLF Clear Menu left part
L11054:	MOV	#000013, R1		; 11.
	MOV	#L14004, R3		; "HIGH SCORES"
	MOV	#040143, R2
	CALL	K01704			; PRINT string
	MOV	#L14017, R3		; score table address
	MOV	#K40301, R2
	PUSH	R4
	MOV	#000017, R4		; 15.
L11112:	PUSH	R2			; <
	MOV	#000006, R1
	CALL	K01704			; | Print string
	PUSH	R3
	MOV	#L14437, R3		; | "0 "
	MOV	#000002, R1		; 2.
	ADD	#000006, R2
	CALL	K01704			; | Print string
	POP	R3
	MOV	#000013, R1		; | 11.
	ADD	#000002, R2
	CALL	K01704			; | Print string
	POP	R2
	ADD	#000040, R2		; 32.
	BIT	#000340, R2
	BNE	L11210
	ADD	#<004000-400>, R2
L11210:	SOB	R4, L11112		; repeat
	POP	R4
	CALL	L13024			; KPASE Empty keyboard buffer
; Wait and return to Menu
	CLR	R1			; waiting delay
L11220:	CALL	L13036			; KEYB Read a key
	BNE	L11224			; have a key => return to Menu
	NOP2		;TODO: CALL DELAY
	SOB	R1, L11220		; waiting loop
; CLAW1: Entering the Menu; Ninja at right drawn already
L11224:	CALL	L10320			; CLSLF Clear Menu left part
	MOV	#L13502, R3		; "K  KEYBOARD" etc.
	MOV	#000013, R1		; 11.
	MOV	#040203, R2
	CALL	K01704			; PRINT string "K  KEYBOARD"
;NOTE: Protek убран, не нужно на БК
	MOV	#000013, R1		; 11.
	MOV	#040303, R2
	CALL	K01704			; PRINT string "J  JOYSTICK"
	MOV	#000020, R1		; 16.
	MOV	#044043, R2
	CALL	K01704			; PRINT string "R REDEFINE KEYS "
	MOV	#000020, R1		; 16.
	MOV	#044243, R2
	CALL	K01704			; PRINT string "M  ALTER MISSION"
	MOV	#000015, R1		; 13.
	MOV	#044343, R2
	CALL	K01704			; PRINT string "S  START GAME"
	MOV	#000007, R1		; 7.
	MOV	#050103, R2
	CALL	K01704			; PRINT string "X  EXIT"
	CALL	L13024			; KPASE Empty keyboard buffer
	CALL	L13474			; INICL Show Menu selection
	MOV	#60000., R1		; menu delay
; DLNX2: Menu waiting loop
L11360:	PUSH	R1
	CALL	L13036			; KEYB Read a key
	CMPB	R0, #113		; 'K' - KEYBOARD
	BNE	L11400
	JMP	L13146			; Keyboard selected
;TODO: Проверять 'X' - EXIT
L11400:	NOP2
	NOP1
	NOP2
L11412:	CMPB	R0, #112		; 'J' - KEMPSTON
	BNE	L11424
	JMP	L13206			; Kempston selected
L11424:	CMPB	R0, #122		; 'R' - REDEFINE KEYS
	BNE	L11436
	JMP	L12316			; Redefine Keys selected
L11436:	CMPB	R0, #115		; 'M' - ALTER MISSION
	BEQ	L11476			; Alter Mission selected
L11450:	CMPB	R0, #123		; 'S' - START GAME
	BNE	L11464
; Start Game selected
L11456:	POP	R1
	JMP	K10624			; Start the game
L11464:	POP	R1
	SOB	R1, L11360		; decrease timer, => DLNX2
	JMP	L11050			; Time is out => NOYBA
; MISSN: Alter Mission selected
L11476:	CALL	L10320			; CLSLF Clear Menu left part
	MOV	#040104, R2
	MOV	#L12225, R3		; "TYPE REQUIRED"
	MOV	#000015, R1		; 13.
	CALL	K01704			; PRINT string "TYPE REQUIRED"
	MOV	#040204, R2
	MOV	#000014, R1		; 12.
	CALL	K01704			; PRINT string "MISSION CODE"
	MOV	#040343, R2
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string "OR PRESS ENTER"
	MOV	#044042, R2
	MOV	#000021, R1		; 17.
	CALL	K01704			; PRINT string "FOR FIRST MISSION"
	CALL	L13024			; KPASE
	CALL	L12570			; INPUT string
; Calculate new mission type
L11576:	MOV	#000011, R5		; 9. codes
	MOV	#L12062, R3		; CODES address
; NXCDL:
L11606:	MOV	#K12440, R2		; NAME address
	MOV	#000013, R1		; 11. characters
	PUSH	R3			; save pointer to codes
L11620:	CMPB	(R2)+, (R3)+		; < check a character
	BNE	L11712			; | no => NXCDE
	SOB	R1, L11620		; repeat
	POP	R3			; get back to the code
	MOV	R5, L11666		; set MSLEV Mission Level
	ADD	#000060, R5		; +'0'
	MOVB	R5, <L11670+10>		; put level number in the string
	MOV	#L11670, R3		; "MISSION X SELECTED"
	MOV	#000022, R1		; 18.
	MOV	#044242, R2		; screen address
	CALL	K01704			; PRINT string
	BR	L11756			; => JACKB
;
L11666:	.WORD	1			; MSLEV - Mission Level number
;
L11670:	.ASCII	/MISSION X SELECTED/
;
; NXCDE: Subcode not found
L11712:	POP	R3			; pop addr of last level code
	ADD	#000013, R3		; 11.  go to code for next level
	SOB	R5, L11606		; go for rest
; Code not listed
L11722:	MOV	#L12030, R3		; "MISSION CODE"
	MOV	#044245, R2
	MOV	#000014, R1		; 12.
	CALL	K01704			; PRINT string "MISSION CODE"
	MOV	#044304, R2
	MOV	#000016, R1		; 14.
	CALL	K01704			; PRINT string "NOT RECOGNISED"
; JACKB:
L11756:	MOV	#K07336, R3		; "PRESS ANY KEY TO CONTINUE"
	MOV	#050244, R2
	MOV	#000015, R1		; 13.
	CALL	K01704			; PRINT string "PRESS ANY KEY"
	MOV	#050304, R2
	MOV	#000014, R1		; 12.
	CALL	K01704			; PRINT string " TO CONTINUE"
	CALL	L13024			; KPASE
	CALL	L13100			; PAWS0
	POP	R1
	JMP	L11224			; Return to Menu => CLAW1
;
L12030:	.ASCII	/MISSION CODE/
L12044:	.ASCII	/NOT RECOGNISED/
; CODES:
L12062:	.ASCII	/SATORI     /
	.ASCII	/DIM MAK    /
	.ASCII	/MI LU KATA /
	.ASCII	/GENIN      /
	.ASCII	/SAIMENJITSU/
	.ASCII	/KUJI KIRI  /
	.ASCII	/KIME       /
	.ASCII	/JONIN      /
	.ASCII	/           /
L12225:	.ASCII	/TYPE REQUIRED/
	.ASCII	/MISSION CODE/
	.ASCII	/OR PRESS ENTER/
	.ASCIZ	/FOR FIRST MISSION/
	.EVEN

; REDEF: Redefine Keys selected in Menu
L12316:	CALL	L10320			; CLSLF Clear Menu left part
	MOV	#040106, R2
	MOV	#<L13540+2>, R3		; "REDEFINE KEYS"
	MOV	#000015, R1		; 13.
	CALL	K01704			; PRINT string
	CALL	L13024			; KPASE Empty keyboard buffer
	MOV	#040204, R2
	MOV	#L13115, R3		; "UP   " etc.
	PUSH	R5
	MOV	#000005, R5		; 5 keys
	MOV	#L15775, R4		; KEYSEL Redefined keys address
L12370:	MOV	#000005, R1		; <  5.
L12374:	MOV	R2, #000000		;!!MUT-ARG!!
	CALL	K01704			; PRINT string
	PUSH	R3
L12406:	CALL	L13036			; KEYB Read a key
	CMPB	R0, #000133
	BHIS	L12406
	CMPB	R0, #000040		; ' '
	BEQ	L12450
	CMPB	R0, #000060		; '0'
	BLO	L12406
	CMPB	R0, #000072		; ':'
	BLO	L12450
	CMPB	R0, #000101		; 'A'
	BLO	L12406
L12450:	MOVB	R0, <L13112+1>		; set key name
	MOV	<L12374+2>, R2
	ADD	#000006, R2		; + 6.
	MOV	#L13112, R3		; String - key name in quotes
	MOV	#000003, R1		; 3-char
	CALL	K01704			; PRINT string
	MOVB	<L13112+1>, R0		; get key name
	MOVB	R0, (R4)+
	ADD	#000002, R4		; + 2.
	CALL	L13024			; KPASE Empty keyboard buffer
	MOV	<L12374+2>, R2
	MOV	#000002, R3
L12526:	ADD	#000040, R2		; <
	BIT	#000340, R2
	BNE	L12550
	SUB	#000400, R2
	ADD	#004000, R2
L12550:	SOB	R3, L12526		; repeat
	POP	R3
	DEC	R5
	BNE	L12370			; repeat
	POP	R5
	POP	R1
	JMP	L11224			; Return to Menu
; INPUT procedure: Input NAME string, up to 11. chars
L12570:	MOV	#000013, R1		; 11.
	MOV	#K12440, R3		; NAME address
L12600:	MOVB	#040, (R3)+		; < ' '
	SOB	R1, L12600		; repeat
	MOV	#000001, R1		; 1.
	MOV	#054646, K01606
	MOV	#044246, R2
	MOV	#K12440, R3		; NAME address
L12630:	PUSH	R1
	PUSH	R2
	MOV	K01606, R2
	MOVB	#000343, R0
	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
	POP	R2
L12652:	CALL	L13036			; KEYB Read a key
	CMPB	R0, #000177
	BNE	L12670
	JMP	L13616
L12670:	CMPB	R0, #000015
	BEQ	L13004
	CMP	(SP), #000014
	BHIS	L12652
	CMPB	R0, #000040
	BEQ	L12736
	CMPB	R0, #000101
	BHIS	L12724
	JMP	L12652
L12724:	CMPB	R0, #000134
	BLO	L12736
	JMP	L12652
L12736:	MOVB	R0, (R3)
	MOV	#000001, R1
	PUSH	R2
	CALL	K01704			; PRINT string
	MOV	K01606, R2		; screen coords
	MOVB	#000016, R0
	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
	INC	K01606
	POP	R2
	INC	R2
	INC	(SP)
L13000:	POP	R1
	BR	L12630
L13004:	POP	R1
	MOV	K01606, R2		; screen coords
	MOV	#000016, R0
	JMP	L13224			; calc screen attr address and set attrs for 8x8 block
	NOP1
;
; KPASE procedure: Empty keyboard buffer
L13024:	CALL	L13036			; KEYB Read a key
	TSTB	R0
	BNE	L13024
	RETURN
; KEYB procedure: Read a key
L13036:
	TSTB	@#177660
	BPL	10$		; no key => exit
	MOVB	@#177662, R0
	RETURN
10$:	CLR	R0		; empty key
	RETURN
	NOP3
	NOP3
	NOP3
; PAWS0 procedure: Get a key
L13100:	CALL	L13036			; KEYB Read a key
	TSTB	R0
	BEQ	L13100
	RETURN

L13112:	.ASCII	/"/<000>/"/
L13115:	.ASCII	/UP   /
	.ASCII	/DOWN /
	.ASCII	/LEFT /
	.ASCII	/RIGHT/
	.ASCII	/FIRE /

	NOP2
	NOP2
	NOP2
	NOP1

; Keyboard selected in Menu
L13146:	CALL	L13424			; Clear Menu selection
	MOV	#054202, R3
	CLR	R0
;NOTE: Protek убран - не нужно на БК
L13176:	CALL	L13464			; Show Menu selection
	JMP	L11464			; Continue to Menu
; Kempston selected
L13206:	CALL	L13424			; Clear Menu selection
	MOV	#054402, R3
	MOV	#000001, R0
	BR	L13176			; Show Menu selection and Continue to Menu
;
; Procedure: Calculate screen attr address and set attributes for 8x8 block
L13224:	CALL	L13242			; calculate screen attr address
	CALL	L13312			; set attributes for 8x8 block
	MOV	<L13242+2>, R2		; restore R2
	RETURN
;
; Procedure: ??? Calculate screen attr address
L13242:	MOV	R2, #000000		;!!MUT-ARG!!
	BIC	#176037, R2		; keep bits: 001111100000
	PUSH	R2
	ASL	R2
	ASR	(SP)
	ADD	(SP), R2
	ASL	R2
	ASL	R2
	ASL	R2			; *8
	MOV	<L13242+2>, (SP)
	BIC	#177740, (SP)		; 0..31.
	ASL	(SP)
	ADD	(SP)+, R2
	ADD	#040001, R2		; screen attr address
	RETURN
;
; Procedure: Set attributes for 8x8 block; R0 = attribute, R2 = screen address
L13312:	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
	MOVB	R0, (R2)		; #0
	ADD	#000100, R2
	MOVB	R0, (R2)		; #1
	ADD	#000100, R2
	MOVB	R0, (R2)		; #2
	ADD	#000100, R2
	MOVB	R0, (R2)		; #3
	ADD	#000100, R2
	MOVB	R0, (R2)		; #4
	ADD	#000100, R2
	MOVB	R0, (R2)		; #5
	ADD	#000100, R2
	MOVB	R0, (R2)		; #6
	ADD	#000100, R2
	MOVB	R0, (R2)		; #7
	ADD	#000100, R2
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	RETURN
	NOP3
; Procedure: Clear Menu selection
L13424:	MOV	#000016, R0		; attribute
L13430:	MOV	#054202, R2		; !!MUT-ARG!!
	CALL	L13242
	MOV	#000015, R1		; 13.
L13444:	PUSH	R2			; <
	CALL	L13312			; |  set attributes for 8x8 block
	POP	R2			; |
	INC	R2			; |  next column
	INC	R2			; |
	SOB	R1, L13444		; repeat
	RETURN
; Procedure: Show Menu selection
L13464:	MOVB	R0, 041304		; Save input method selection
	MOV	R3, <L13430+2>
; INICL:
L13474:	MOV	#000061, R0		; attribute
	BR	L13430
;
; Text for Menu
L13502:	.ASCII	/K  KEYBOARD/
L13526:	.ASCII	/J  JOYSTICK/
L13540:	.ASCII	/R  REDEFINE KEYS/
	.ASCII	/M  ALTER MISSION/
	.ASCII	/S  START GAME/
	.ASCII	/X  EXIT/		;TODO
	NOP1
;
; DELETE:
L13616:	POP	R1
	CMPB	R1, #001		; == 1 ?
	BNE	L13632
	JMP	L12630			; => NXCHR
L13632:	DECB	R1
	PUSH	R1
	DEC	R2
	MOVB	#040, -(R3)		; 32.
	MOV	#000001, R1		; 1.
	PUSH	R2
	CALL	K01704			; PRINT string
	MOV	K01606, R2		; screen coords
	MOVB	#000016, R0		; 14.
	CALL	L13224			; calc screen attr address and set attributes for 8x8 block
	DEC	K01606
	POP	R2
	DEC	R3
	JMP	L13000			; => ENDDL
;
L13706:	.ASCII	/CONGRATULATIONS/
	.ASCII	/YOU ARE NOW A TRUE/
	.ASCII	/NINJA SABOTEUR/
	.ASCII	/ENTER YOUR NAME/
;
L14004:	.ASCII	/HIGH SCORES/
L14017:	.ASCII	/001000IGOR IWAN  /
	.ASCII	/000140IWAN ALEKS /
	.ASCII	/000130GENNADIJ P./
	.ASCII	/000120JURIJ IGOR /
	.ASCII	/000110LENA       /
	.ASCII	/000100DARREN     /
	.ASCII	/000090NOEL       /
	.ASCII	/000080BRAD       /
	.ASCII	/000070NICKY      /
	.ASCII	/000060JUSTIN     /
	.ASCII	/000050CLAIRE     /
	.ASCII	/000040JOE T ARAO /
	.ASCII	/000030ALAN       /
	.ASCII	/000020RICH       /
	.ASCII	/000010DIV        /

L14416:	.ASCII	/SPARE SCORE+NAME /

L14437:	.ASCII	/0 /			; ZERO
	.EVEN
;
; NRGUP procedure ??
L14442:	MOV	#<L14534+2>, R3		; NRGPX+1
	CLC
	RORB	(R3)
	BLO	L14456	;TODO
	RETURN
L14456:	BISB	#000200, (R3)
	MOV	#<L14506+2>, R3		; NRGCR+1
	INCB	(R3)
L14470:	RETURN
;
; DECEN procedure: Decrement energy, R1 = ??
L14472:	MOV	#000001, R0		;!!MUT-ARG!!
	BEQ	L14470			; 0 => to RETURN
	NOP1
; DECN2:
L14502:	PUSH	R1
	PUSH	R5
; NRGCR:
L14506:	MOV	#000000, R2		;!!MUT-ARG!!
	ADD	#050245, R2		; screen coords
	PUSH	R4
	CALL	K02056			; screen coords R2 to screen address
	POP	R4
	MOV	#001200, R3
	ADD	R2, R3
; NRGPX:
L14534:	MOVB	#000, R5		;!!MUT-ARG!!
	ASL	R5			;
	MOV	PXCONH(R5), R5		;
	MOV	#000010, R1		; 8.
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
L14560:	MOV	(R3), R0		; <
	XOR	R5, R0
	MOV	R0, (R3)
	MOV	(R2), R0
	XOR	R5, R0
	MOV	R0, (R2)
	ADD	#000100, R2		; next line
	ADD	#000100, R3
	SOB	R1, L14560		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	NOP3
	MOV	#<L14534+2>, R3
	ASLB	(R3)
	BHIS	L14664			; => NRGC1
	INCB	(R3)
	MOV	#<L14506+2>, R3
	DECB	(R3)
	BNE	L14664			; => NRGC1
; Out of energy, dead
	POP	R5
	POP	R1
	MOVB	#001, K33540		; set DEAD = 1
	CLRB	<L14472+2>		; clear (DECEN+1)
	RETURN
; NRGC1:
L14664:	POP	R5
	POP	R1
	SOB	R1, L14502		; repeat => DECN2
	RETURN
; COMPL:
L14674:	CALL	L15506			; PLFHN - MONEY up 500.
; Delay
	MOV	#165140, R1
L14704:	DEC	R1			; <
	MOVB	#006, R0		; | 6.
L14712:	DECB	R0
	BNE	L14712
	TST	R1
	BNE	L14704			; repeat
;
	CALL	L07634			; INITHI Draw Ninja for Menu
	MOVB	K11770, R5		; get CONQU
	MOVB	K51146, R0		; get TAPTT
	DECB	R5
	BEQ	L14746
	MOVB	K51145, R0		; get TAPCT
L14746:	MOV	#K52626, R3		; NTPND address
	CMPB	R0, (R3)
	BHIS	L14762
	JMP	L10606			; => FNISH - Finish the game
L14762:	CALL	L15506			; PLFHN - MONEY up 500.
	CALL	L15506			; PLFHN - MONEY up 500.
	MOV	#050141, R2
	MOV	#115274, R3		; TOTM
	MOVB	#005, R1		; 5.
	CALL	K01704			; PRINT string
	MOV	#L15530, R3		; "CONGRATULATIONS"
	MOV	#040103, R2
	MOV	#000017, R1		; 15.
	CALL	K01704			; PRINT string "CONGRATULATIONS"
	MOV	#040241, K01606
	MOV	#000022, R1		; 18.
	CALL	K01704			; PRINT string "YOU HAVE COMPLETED"
	MOV	#040340, R2
	MOV	#000025, R1		; 21.
	CALL	K01704			; PRINT string "YOUR ASSIGNED MISSION"
	MOVB	L11666, R0		; get MSLEV Mission Level
	CMPB	R0, #000011		; 9. last level?
	BNE	L15302
	MOV	#L15166, R3		; "YOU HAVE REACHED"
	MOV	#044042, R2
	MOV	#000020, R1		; 16.
	CALL	K01704			; PRINT string "YOU HAVE REACHED"
	MOV	#044141, R2
	MOV	#000022, R1		; 18.
	CALL	K01704			; PRINT string "THE ULTIMATE LEVEL"
	MOV	#044302, R2
	MOV	#000021, R1		; 17.
	CALL	K01704			; PRINT string "YOU HAVE MASTERED"
	MOV	#050001, R2
	MOV	#000023, R1		; 19.
	CALL	K01704			; PRINT string "THE ART OF NINJITSU"
	BR	L15436			; => HAK02
	NOP1
;
L15166:	.ASCII	/YOU HAVE REACHED/
	.ASCII	/THE ULTIMATE LEVEL/
	.ASCII	/YOU HAVE MASTERED/
	.ASCII	/THE ART OF NINJITSU/
	.ASCII	/TOTAL/
	.EVEN
;
; HAK01:
L15302:	ADD	#000061, R0		; + 49.
	MOVB	R0, 115640		; get (NXMSC+18.)
	MOV	#L15616, R3		; "THE CODE FOR"
	MOV	#044144, R2
	MOV	#000014, R1		; 12.
	CALL	K01704			; PRINT string "THE CODE FOR"
	MOV	#044245, R2
	MOV	#000012, R1		; 10.
	CALL	K01704			; PRINT string "STAGE X IS"
	MOV	#044345, R2
	MOV	#000001, R1		; 1.
	CALL	K01704			; PRINT string
	CLR	R0
	BISB	L11666, R0		; get MSLEV Mission Level
	MOV	#112212, R3		; CODES+88.
L15374:	SUB	#000013, R3		; - 11.
	SOB	R0, L15374
	MOV	#000013, R1		; 11.
	ADD	#000001, R2		; + 1.
	CALL	K01704			; PRINT string
	MOV	#113114, R3		; RSEE3+2
	MOV	#000001, R1		; 1.
	ADD	#000013, R2		; + 11.
	CALL	K01704			; PRINT string
; HAK02:
L15436:	MOV	#K07336, R3		; "PRESS ANY KEY"...
	MOV	#050244, R2
	MOV	#000015, R1		; 13.
	CALL	K01704			; PRINT string "PRESS ANY KEY"
	MOV	#050304, R2
	MOV	#000014, R1		; 12.
	CALL	K01704			; PRINT string " TO CONTINUE"
	CALL	L13024			; KPASE
	CALL	L13100			; PAWS0
	JMP	L10606			; => FNISH - Finish the game
; PLFHN procedure: MONEY up 500.
L15506:	MOV	#000372, R1		; 250.
	CALL	L10244			; MONUP
	MOV	#000372, R1		; 250.
	JMP	L10244			; MONUP
	NOP1
;
L15530:	.ASCII	/CONGRATULATIONS/
L15547:	.ASCII	/YOU HAVE COMPLETED/
L15571:	.ASCII	/YOUR ASSIGNED MISSION/
L15616:	.ASCII	/THE CODE FOR/
L15632:	.ASCII	/STAGE X IS"/
	.EVEN

L15646:	.WORD	0	; RMTIME
;
; CRUNCH procedure: Sound CRUNCH noise
L15650:	MOV	#000144, R1		; 100.
	CALL	K01314			; Get random number
	BICB	#177417, R0
	BISB	#000340, R0
	MOV	R0, R3
	SWAB	R3
; Sound
L15674:	NOP3	;BIC	#000140, @#157706	; sound
	NOP3	;BIS	#000200, @#157706	; sound timer
	NOP3	;MOV	@#157706, @#177604	; set SysRegC MS0515
	MOVB	(R3)+, K01604
L15722:	DECB	K01604
	BNE	L15722
	NOP3	;BIC	#000200, @#157706	; sound timer
	NOP3	;BIS	#000140, @#157706	; sound
	NOP3	;MOV	@#157706, @#177604	; set SysRegC MS0515
	SOB	R1, L15674
	RETURN
;
L15756:
	.BYTE	070,001,010, 062,002,004, 064,010,002
	.BYTE	066,004,001, 065,001,020
; Redefined keys stored here
L15775:
	.BYTE	070,001,010, 062,002,004, 064,010,002
	.BYTE	066,004,001, 065,001,020
;
; Computerized font, 59 chars 8x8
;L16014: 				; CHARSET
.INCLUDE /S2FNT2.MAC/
;
.INCLUDE /S29DE4.MAC/
;
.IIF	NE <.-122624>, ERRORA
; Reflection table, but starting from 128., 256. bytes; see K06660
L22624:	;.BLKB	256.
L23024 = L22624 + 200


;	.BLKW	440

; Tile screen 32x18 = 576. bytes; also used as a buffer for Ninja picture for Menu
L24324 = 124324			; BUFFD - Contact tile screen address
; Tile screen 32x18 = 576. bytes
L25424 = 125424			; BUFFB - Back tile screen address
; Tile screen 32x18 = 576. bytes
L26524 = 126524			; BUFFO - Front tile screen address
; Tile screen 32x18 = 576. bytes
L27624 = 127624			; BUFFN - Ninja tile screen address
; Tile screen 32x18 = 576. bytes
L30724 = 130724			; BUFFG1 - Enemy 0 tile screen address
; Tile screen 32x18 = 576. bytes
L32024 = 132024			; BUFFG2 - Enemy 1 tile screen address

; Таблица под расширение байта в слово для вывода на экран
L33124 = 133124
PXCONH = L33124 + <128.*2.>	; Середина таблицы конвертации

	.END
