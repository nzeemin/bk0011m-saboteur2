	.TITLE	S2CORE
	.ASECT

.MACRO	PUSH	RR
	MOV	RR, -(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+, RR
.ENDM

.MACRO	NOP1
	NOP
.ENDM
.MACRO	NOP2
	NOP
	NOP
.ENDM
.MACRO	NOP3
	NOP
	NOP
	NOP
.ENDM

; Режимы для регистра управления памятью
;          .___1___...00.00	Стр.	Назначение
MMODE0 = ^B0001110000000000	; 5:4  -  системный
MMOD34 = ^B0011110000000000	; 3:4  -  для загрузки
MMODE1 = ^B0011100000000000	; 3:1  -  основной
MMODE5 = ^B0001100000000000	; 5:1  -  для рисования на экране at 040000-077777 window

	.=001310

K01000:	MTPS	#000340			; Disable interrupts
;	MOV	SP, OSTACK		; Сохраняем начальное значение SP
	MOV	#1000, SP
;	MOV	#1330, @#177664		; Устанавливаем стандартное значение скролла
;	MOV	#MMODE1, @#177716	; Включаем основной режим памяти
K01220:	JMP	START

	.BLKW	24	;NOTE: Свободное место
;
; Clear 1024.*8.*2. = 16K bytes on the screen
K01224:	MOV	#000000, R0		; Filler value  WARN: mutable argument
	MOV	#002000, R1		; 1024.
	MOV	#040000, R5		; Screen start address
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K01254:	MOV	R0, (R5)+		; <  #0
	MOV	R0, (R5)+		; |  #1
	MOV	R0, (R5)+		; |  #2
	MOV	R0, (R5)+		; |  #3
	MOV	R0, (R5)+		; |  #4
	MOV	R0, (R5)+		; |  #5
	MOV	R0, (R5)+		; |  #6
	MOV	R0, (R5)+		; |  #7
	SOB	R1, K01254		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	RETURN
;
; Procedure: Something with timer ??
;NOTE: Пока убрал для БК
K01314:	RETURN
;
; Interrupt 130 handler
;NOTE: Убрал для БК

; Procedure: ??
K01434:	PUSH	R4
K01436:	MOV	#K01552, R4
K01442:	TST	(R4)
K01444:	BNE	K01470
K01446:	MOV	SP, (R4)+
K01450:	MOV	R1, (R4)+
K01452:	MOV	R2, (R4)+
K01454:	MOV	R3, (R4)+
K01456:	MOV	(R4)+, R1
K01460:	MOV	(R4)+, R2
K01462:	MOV	(R4), R3
K01464:	POP	R4
	RETURN
K01470:	ADD	#000014, R4
K01474:	MOV	R3, (R4)
K01476:	MOV	R2, -(R4)
K01500:	MOV	R1, -(R4)
K01502:	MOV	-(R4), R3
K01504:	MOV	-(R4), R2
K01506:	MOV	-(R4), R1
K01510:	CLR	-(R4)
	BR	K01464
;
K01514:	PUSH	R4
K01516:	MOV	#001572, R4
K01522:	TST	(R4)
K01524:	BNE	K01540
K01526:	MOV	SP, (R4)+
K01530:	MOV	R0, (R4)+
K01532:	MOV	(R4), R0
K01534:	POP	R4
	RETURN
K01540:	CLR	(R4)+
K01542:	TST	(R4)+
K01544:	MOV	R0, (R4)
K01546:	MOV	-(R4), R0
K01550:	BR	K01534
;
K01552:	.BLKW	15
K01604:	.WORD	0			; temp variable for markers
K01606:	.WORD	0
K01610:	.WORD	0			; offset value in room marker processing
K01611	=	K01610+1
;
; Procedure ?? fill screen attrs??
K01612:	PUSH	R5
	MOV	#040001, R3		; screen address
	MOV	#000022, R1		; 18. rows
	MOV	#177777, R2
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K01644:	MOV	#000040, R5		; < 32.
K01650:	MOVB	R2, (R3)+		; | <
	INC	R3			; | |
	SOB	R5, K01650		; | repeat
	NOP2	;ADD	#000020, R3
	SOB	R1, K01644		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R5
	RETURN
;
; Procedure: Print string; R3 = string address, R1 = length, R2 = screen coords
K01704:	PUSH	R2
	PUSH	R4
	PUSH	R5
	CALL	K02056			; screen coords R2 to screen address
K01716:	MOVB	(R3)+, R0		; <  get symbol
	BIC	#177400, R0
	ASL	R0
	ASL	R0
	ASL	R0			; *8
	ADD	#<L06234-256.>, R0	; + font base address minus 256. for 32. symbols
	PUSH	R2
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	PUSH	R1
	MOVB	#000010, R5		; 8. lines
K01760:	MOVB	(R0)+, R1		; <
	ASL	R1
	MOV	PXCONH(R1), (R2)	; |  copy to screen
	ADD	#000100, R2		; |  next line
	SOB	R5, K01760		; repeat
	POP	R1
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R2
K02006:	ADD	#000001, R4
	CMPB	#000040, <K02006+2>
	BNE	K02030
	ADD	#001200, R2
	BR	K02032
K02030:	TST	(R2)+
K02032:	BIT	#000037, R4
	BNE	K02044
	ADD	#001100, R2
K02044:	SOB	R1, K01716		; repeat
	POP	R5
	POP	R4
	POP	R2
	RETURN
;
; Procedure: Screen coords R2 to screen address
K02056:	MOV	R2, R4
	BIC	#177740, R4		; 0..31.
	BIC	#160037, R2
K02070:	MOV	R2, #000000		;WARN: mutable argument
	SWAB	R2
	BIC	#177770, R2		; 0..7
	ASL	R2
	ASL	R2
K02106:	BISB	R2, <K02070+2>
	BICB	#177747, <K02070+3>
	ASRB	<K02070+3>
	ASRB	<K02070+3>
	ASRB	<K02070+3>
	MOV	<K02070+2>, R2
	ASL	R2
	ASL	R2
	MOV	R2, <K02070+2>
	ASL	R2
	ASL	R2
	ADD	<K02070+2>, R2
	ASL	R4
	ADD	R4, R2
	ADD	#040000, R2		; R2 = screen address
	ASR	R4
	RETURN
	MOV	#000001, R0
	RETURN
;
; Procedure: Show the room on the screen
K02202:	MOV	#041173, R3
	MOVB	(R3), R5
	MOV	#000004, R0
	XOR	R0, R5
	MOVB	R5, (R3)+
	CLRB	(R3)
	MOV	#L27624, K04652		; Ninja tile screen address
	MOV	#L30724, K04656		; Enemy 0 tile screen address
	MOV	#L32024, K04660		; Enemy 1 tile screen address
	MOV	#L26524, K04654		; Front tile screen address
	MOV	#L25424, R3		; Back tile screen address
	MOV	#L24324, R2
	MOV	#040000, R5		; screen start address
	MOV	#L24324, R4
K02272:	MOV	#000022, #000000	;WARN: mutable 2nd argument
K02300:	MOV	#000040, R1
K02304:	PUSH	R1
	PUSH	R3
	PUSH	R2
	MOVB	(R4), R0
	BNE	K02322
	JMP	K04440
K02322:	MOVB	(R3), R0
	BIC	#177400, R0
	MOVB	R0, <K04672+1>
	MOV	R0, R3
	ASL	R3
	ASL	R3
	ASL	R3			; *8.
	ADD	R0, R3			; *9.
	ADD	#077531, R3		; ??? some base address
	MOV	#K04662, R2
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
K02374:	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	CLRB	041174
	MOVB	@K04656, R0		; get tile from Enemy 0 tile screen
	CLR	R3
	BISB	R0, R3
	INCB	R0
	BEQ	K03014
	CLRB	R1
	CMPB	R0, #000244
K02426:	BLO	K02450
K02430:	CMPB	R0, #000247
K02434:	BHIS	K02450
K02436:	MOVB	041173, R0
K02442:	MOVB	R0, 041174
K02446:	MOV	R0, R1
K02450:	BICB	#177407, K04672
K02456:	BISB	R1, K04672
K02462:	BIC	#177400, R3		; keep low byte
K02466:	ASL	R3
K02470:	ASL	R3
K02472:	ASL	R3			; *8
K02474:	ADD	#K73546, R3		; tiles base address
K02500:	MOV	#K04662, R2		; buffer address
K02504:	CALL	K36042
K02510:	MOVB	(R3), R1
K02512:	MOVB	007126(R1), R0
K02516:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02522:	COMB	(R2)
K02524:	BICB	(R2), R0
K02526:	MOVB	R0, (R2)
K02530:	MOVB	(R3)+, R0
K02532:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02536:	BISB	R0, (R2)+
K02540:	MOVB	(R3), R1
K02542:	MOVB	007126(R1), R0
K02546:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02552:	COMB	(R2)
K02554:	BICB	(R2), R0
K02556:	MOVB	R0, (R2)
K02560:	MOVB	(R3)+, R0
K02562:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02566:	BISB	R0, (R2)+
K02570:	MOVB	(R3), R1
K02572:	MOVB	007126(R1), R0
K02576:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02602:	COMB	(R2)
K02604:	BICB	(R2), R0
K02606:	MOVB	R0, (R2)
K02610:	MOVB	(R3)+, R0
K02612:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02616:	BISB	R0, (R2)+
K02620:	MOVB	(R3), R1
K02622:	MOVB	007126(R1), R0
K02626:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02632:	COMB	(R2)
K02634:	BICB	(R2), R0
K02636:	MOVB	R0, (R2)
K02640:	MOVB	(R3)+, R0
K02642:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02646:	BISB	R0, (R2)+
K02650:	MOVB	(R3), R1
K02652:	MOVB	007126(R1), R0
K02656:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02662:	COMB	(R2)
K02664:	BICB	(R2), R0
K02666:	MOVB	R0, (R2)
K02670:	MOVB	(R3)+, R0
K02672:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02676:	BISB	R0, (R2)+
K02700:	MOVB	(R3), R1
K02702:	MOVB	007126(R1), R0
K02706:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02712:	COMB	(R2)
K02714:	BICB	(R2), R0
K02716:	MOVB	R0, (R2)
K02720:	MOVB	(R3)+, R0
K02722:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02726:	BISB	R0, (R2)+
K02730:	MOVB	(R3), R1
K02732:	MOVB	007126(R1), R0
K02736:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02742:	COMB	(R2)
K02744:	BICB	(R2), R0
K02746:	MOVB	R0, (R2)
K02750:	MOVB	(R3)+, R0
K02752:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02756:	BISB	R0, (R2)+
K02760:	MOVB	(R3), R1
K02762:	MOVB	007126(R1), R0
K02766:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K02772:	COMB	(R2)
K02774:	BICB	(R2), R0
K02776:	MOVB	R0, (R2)
K03000:	MOVB	(R3)+, R0
K03002:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03006:	BISB	R0, (R2)+
K03010:	CALL	K36042
K03014:	MOVB	@K04660, R0		; get tile from Enemy 1 tile screen
K03020:	CLR	R3
K03022:	BISB	R0, R3
K03024:	INCB	R0
K03026:	BEQ	K03364
K03030:	BICB	#177407, K04672
K03036:	ASL	R3
K03040:	ASL	R3
K03042:	ASL	R3			; *8.
K03044:	ADD	#K73546, R3		; tiles base address
K03050:	MOV	#K04662, R2
K03054:	CALL	K36056
K03060:	MOVB	(R3), R1
K03062:	MOVB	007126(R1), R0
K03066:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03072:	COMB	(R2)
K03074:	BICB	(R2), R0
K03076:	MOVB	R0, (R2)
K03100:	MOVB	(R3)+, R0
K03102:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03106:	BISB	R0, (R2)+
K03110:	MOVB	(R3), R1
K03112:	MOVB	007126(R1), R0
K03116:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03122:	COMB	(R2)
K03124:	BICB	(R2), R0
K03126:	MOVB	R0, (R2)
K03130:	MOVB	(R3)+, R0
K03132:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03136:	BISB	R0, (R2)+
K03140:	MOVB	(R3), R1
K03142:	MOVB	007126(R1), R0
K03146:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03152:	COMB	(R2)
K03154:	BICB	(R2), R0
K03156:	MOVB	R0, (R2)
K03160:	MOVB	(R3)+, R0
K03162:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03166:	BISB	R0, (R2)+
K03170:	MOVB	(R3), R1
K03172:	MOVB	007126(R1), R0
K03176:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03202:	COMB	(R2)
K03204:	BICB	(R2), R0
K03206:	MOVB	R0, (R2)
K03210:	MOVB	(R3)+, R0
K03212:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03216:	BISB	R0, (R2)+
K03220:	MOVB	(R3), R1
K03222:	MOVB	007126(R1), R0
K03226:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03232:	COMB	(R2)
K03234:	BICB	(R2), R0
K03236:	MOVB	R0, (R2)
K03240:	MOVB	(R3)+, R0
K03242:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03246:	BISB	R0, (R2)+
K03250:	MOVB	(R3), R1
K03252:	MOVB	007126(R1), R0
K03256:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03262:	COMB	(R2)
K03264:	BICB	(R2), R0
K03266:	MOVB	R0, (R2)
K03270:	MOVB	(R3)+, R0
K03272:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03276:	BISB	R0, (R2)+
K03300:	MOVB	(R3), R1
K03302:	MOVB	007126(R1), R0
K03306:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03312:	COMB	(R2)
K03314:	BICB	(R2), R0
K03316:	MOVB	R0, (R2)
K03320:	MOVB	(R3)+, R0
K03322:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03326:	BISB	R0, (R2)+
K03330:	MOVB	(R3), R1
K03332:	MOVB	007126(R1), R0
K03336:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03342:	COMB	(R2)
K03344:	BICB	(R2), R0
K03346:	MOVB	R0, (R2)
K03350:	MOVB	(R3)+, R0
K03352:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03356:	BISB	R0, (R2)+
K03360:	CALL	K36056
K03364:	MOVB	003542, 041175
K03372:	CLR	R3
K03374:	MOVB	@K04652, R0		; get tile from Ninja tile screen
K03400:	BISB	R0, R3
K03402:	INCB	R0
K03404:	BNE	K03412
	JMP	K04104
K03412:	CMPB	R0, #000341
K03416:	BHIS	K03462
K03420:	CMPB	R0, #000323
K03424:	BLO	K03462
K03426:	CMPB	R0, #000327
K03432:	BLO	003442
K03434:	CMPB	R0, #000333
K03440:	BLO	003462
K03442:	MOVB	004673, R0
K03446:	DECB	R0
K03450:	BNE	003462
K03452:	MOVB	#000007, 003542
K03460:	BR	K03544
K03462:	MOVB	004673, R0
K03466:	CMPB	R0, #000117
K03472:	BLO	K03516
K03474:	CMPB	R0, #000126
K03500:	BHIS	K03516
K03502:	MOVB	114474, R0
K03506:	BEQ	K03516
K03510:	MOVB	#000001, K36216
K03516:	MOVB	041174, R0
K03522:	BEQ	K03544
K03524:	PUSH	R3
K03526:	MOVB	#000003, R1
K03532:	CALL	L14472
K03536:	POP	R3
K03540:	BR	K03560
K03542:	.BYTE	0
	.EVEN
K03544:	BICB	#177407, K04672
K03552:	BISB	003542, K04672
K03560:	MOVB	041175, 003542
K03566:	ASL	R3
K03570:	ASL	R3
K03572:	ASL	R3
K03574:	ADD	#116744, R3
K03600:	MOV	#K04662, R2
K03604:	MOVB	(R3), R1
K03606:	MOVB	007126(R1), R0
K03612:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03616:	COMB	(R2)
K03620:	BICB	(R2), R0
K03622:	MOVB	R0, (R2)
K03624:	MOVB	(R3)+, R0
K03626:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03632:	BISB	R0, (R2)+
K03634:	MOVB	(R3), R1
K03636:	MOVB	007126(R1), R0
K03642:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03646:	COMB	(R2)
K03650:	BICB	(R2), R0
K03652:	MOVB	R0, (R2)
K03654:	MOVB	(R3)+, R0
K03656:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03662:	BISB	R0, (R2)+
K03664:	MOVB	(R3), R1
K03666:	MOVB	007126(R1), R0
K03672:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03676:	COMB	(R2)
K03700:	BICB	(R2), R0
K03702:	MOVB	R0, (R2)
K03704:	MOVB	(R3)+, R0
K03706:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03712:	BISB	R0, (R2)+
K03714:	MOVB	(R3), R1
K03716:	MOVB	007126(R1), R0
K03722:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03726:	COMB	(R2)
K03730:	BICB	(R2), R0
K03732:	MOVB	R0, (R2)
K03734:	MOVB	(R3)+, R0
K03736:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03742:	BISB	R0, (R2)+
K03744:	MOVB	(R3), R1
K03746:	MOVB	007126(R1), R0
K03752:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03756:	COMB	(R2)
K03760:	BICB	(R2), R0
K03762:	MOVB	R0, (R2)
K03764:	MOVB	(R3)+, R0
K03766:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K03772:	BISB	R0, (R2)+
K03774:	MOVB	(R3), R1
K03776:	MOVB	007126(R1), R0
K04002:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04006:	COMB	(R2)
K04010:	BICB	(R2), R0
K04012:	MOVB	R0, (R2)
K04014:	MOVB	(R3)+, R0
K04016:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04022:	BISB	R0, (R2)+
K04024:	MOVB	(R3), R1
K04026:	MOVB	007126(R1), R0
K04032:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04036:	COMB	(R2)
K04040:	BICB	(R2), R0
K04042:	MOVB	R0, (R2)
K04044:	MOVB	(R3)+, R0
K04046:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04052:	BISB	R0, (R2)+
K04054:	MOVB	(R3), R1
K04056:	MOVB	007126(R1), R0
K04062:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04066:	COMB	(R2)
K04070:	BICB	(R2), R0
K04072:	MOVB	R0, (R2)
K04074:	MOVB	(R3)+, R0
K04076:	CALL	K04634			; if K36264 != 0 then mirror byte R0
K04102:	BISB	R0, (R2)+
;
K04104:	MOV	#K04672, R3
K04110:	MOV	#000020, R0
K04114:	NOP				; "NOP" command or "MOVB R0,(R3)" command
K04116:	MOVB	@K04654, R0		; get tile from Front tile screen
K04122:	CLR	R3
K04124:	BISB	R0, R3
K04126:	INCB	R0
K04130:	BEQ	K04274
K04132:	MOV	R3, R1
K04134:	ASL	R3
K04136:	ASL	R3
K04140:	ASL	R3			; *8
K04142:	CMPB	R0, #000345
K04146:	BHIS	K04526
K04150:	ASL	R3
K04152:	ADD	R1, R3
K04154:	ADD	#041342, R3
K04160:	MOV	#K04662, R2
K04164:	MOVB	(R3)+, R0
K04166:	COMB	R0
K04170:	BICB	R0, (R2)
K04172:	BISB	(R3)+, (R2)+
K04174:	MOVB	(R3)+, R0
K04176:	COMB	R0
K04200:	BICB	R0, (R2)
K04202:	BISB	(R3)+, (R2)+
K04204:	MOVB	(R3)+, R0
K04206:	COMB	R0
K04210:	BICB	R0, (R2)
K04212:	BISB	(R3)+, (R2)+
K04214:	MOVB	(R3)+, R0
K04216:	COMB	R0
K04220:	BICB	R0, (R2)
K04222:	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	MOVB	(R3)+, R0
	COMB	R0
	BICB	R0, (R2)
	BISB	(R3)+, (R2)+
	CMPB	(R3), #377
	BEQ	K04274
	MOVB	(R3), (R2)
; Copy pixels from K04662 to screen; R5 = address on screen
K04274:	MOV	#K04662, R3
	PUSH	R5
	MOV	#100, R1		; offset to next line
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	MOVB	(R3)+, R0		; #0
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #1
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #2
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #3
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	;TODO: Копировать и этот байт тоже
	CLR	(R5)			; Пустая строка в середине тайла
	ADD	R1, R5
	MOVB	(R3)+, R0		; #4
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #5
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #6
	ASL	R0
	MOV	PXCONH(R0), (R5)
	ADD	R1, R5
	MOVB	(R3)+, R0		; #7
	ASL	R0
	MOV	PXCONH(R0), (R5)
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	MOVB	(R3), R0		; get attr
	POP	R5
K04440:	TST	(R5)+			; next column
	INC	K04652			; next address in Ninja tile screen
	INC	K04656			; next address in Enemy 0 tile screen
	INC	K04660			; next address in Enemy 1 tile screen
	INC	K04654			; next address in Front tile screen
	POP	R2
	POP	R3
	POP	R1
	INC	R2
	INC	R3
	INC	R4
	DEC	R1
	BEQ	K04506
	JMP	K02304
K04506:	ADD	#001100, R5
	DEC	<K02272+4>
	BEQ	K04632		; Переход на RETURN
	JMP	K02300
K04526:	ADD	#112754, R3		; ??? some base address
	CMPB	R0, #000345
	BNE	K04544
	MOV	#L16014, R3		; Computerized font base address
K04544:	MOV	#K04662, R2
	MOV	#000010, R1		; 8.
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	MOVB	(R3)+, (R2)+
	;MOVB	#060, (R2)		;NOTE: Атрибут, не нужно на БК
	BR	K04274
;
; Procedure: ?? Draw string as tiles; R2 = string, R1 = length
K04604:	MOV	R1, R5
K04606:	MOVB	(R2)+, R0		; <
	ADD	#000244, R0
	MOVB	R0, (R3)+
	SOB	R1, K04606		; repeat
	SUB	#002200, R3
K04624:	MOVB	#000001, -(R3)		; <
	SOB	R5, K04624		; repeat
K04632:	RETURN
;
; Procedure: ?? if K36264 != 0 then mirror byte R0
K04634:	TSTB	K36264
	BEQ	K04650			; = 0 ? => don't mirroring
	MOVB	R0, R1
	MOVB	L23024(R1), R0		; byte mirroring
K04650:	RETURN
;
K04652:	.WORD	0			; Address in Ninja tile screen
K04654:	.WORD	0			; Address in Front tile screen
K04656:	.WORD	0			; Address in Enemy 0 tile screen
K04660:	.WORD	0			; Address in Enemy 1 tile screen
;
K04662:	.BLKW	4	;TODO

K04672:	.WORD	2
;
; Procedure: Update NEAR indicator
K04674:	PUSH	R3
K04676:	TSTB	R0
K04700:	BNE	K05032
K04702:	MOV	#K24762, R3
K04706:	TSTB	(R3)
K04710:	BEQ	K05032
K04712:	DECB	(R3)
K04714:	MOV	K23746, R3
K04720:	MOV	#000005, R1		; 5.
K04724:	BICB	#177600, (R3)+		; <
K04730:	SOB	R1, K04724		; repeat
	MOV	#073477, R3		; screen address
	MOV	#000010, R1
	MOV	#000017, R0
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
K04762:	MOVB	R0, (R3)+
K04764:	INC	R3
K04766:	MOVB	R0, (R3)+
K04770:	INC	R3
K04772:	MOVB	R0, (R3)+
K04774:	INC	R3
K04776:	MOVB	R0, (R3)+
K05000:	INC	R3
K05002:	ADD	#000070, R3
K05006:	SOB	R1, K04762
K05010:	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	NOP3
K05024:	CALL	110300
K05030:	CLR	R0
K05032:	MOV	#000032, R3
K05036:	BR	K05050
;
K05040:	MOVB	K33464, R0		; get HELD value
K05044:	PUSH	R3
K05046:	CLR	R3
K05050:	ASL	R3
K05052:	MOV	R3, <K05100+2>
K05056:	BIC	#177600, R0		; 0..177
K05062:	PUSH	R1
K05064:	PUSH	R2
K05066:	ASL	R0
K05070:	MOV	K05254(R0), R2		; get item address
K05074:	MOV	#067602, R3
K05100:	ADD	#000000, R3		;WARN: mutable argument
K05104:	PUSH	R3
K05106:	MOV	#000030, R1
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
K05126:	MOVB	(R2)+, R5		; <
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; | copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; | copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; |  copy pixels
	MOVB	(R2)+, R5		; |
	ASL	R5			; |
	MOV	PXCONH(R5), (R3)+	; |  copy pixels
	ADD	#000070, R3		; |  next line
	SOB	R1, K05126		; repeat
	POP	R3
	INC	R3
	MOV	#000003, R5
K05164:	;MOV	#000010, R1		; <
K05170:	;MOV	R2, R4			;   <
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;MOVB	(R2)+, (R3)+
	;INC	R3
	;ADD	#000070, R3
	;MOV	R4, R2
	;SOB	R1, K05170		;   repeat
	;ADD	#000004, R2
	;SOB	R5, K05164		; repeat
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R2
	POP	R1
	POP	R3
	RETURN

	.BLKW	14	;NOTE: Свободное место
;
; Table of addrs: Nothing, Shuriken, Knife, Empty Box, Question, Pipe, Question, Wrench
K05254:	.WORD	K05274, K05450, K05624, K06000, K06154, K06504, K06154, K06330
; Item pictograms 32x24, 108. bytes each * 7 = 756. bytes total
.INCLUDE /S2ITEM.MAC/

START:
;K01206:	MOV	#004000, <K01224+2>	; set filler
	CALL	K01224			; Clear the screen
	CALL	PREPAR
;
; Preparing table for byte mirroring, but starting from 200
K06660:	MOV	#000200, R4		; ^B10000000
K06664:	CLR	R0
K06666:	MOV	#000400, R1		; 256.
K06672:	MOV	#L22624, R3		; Table address
K06676:	MOVB	#000010, R2		; <  8.
K06702:	CLR	R5
K06704:	BISB	R4, R5
K06706:	RORB	R5			; | <
K06710:	ROLB	R0			; | |
K06712:	SOB	R2, K06706		; | repeat
K06714:	MOVB	R0, (R3)+
K06716:	INCB	R4
K06720:	SOB	R1, K06676		; repeat
;
K06722:	JMP	K07326			; Go to Menu
;
;K06726:
.INCLUDE /S20DD6.MAC/
;
; Coming here from K06722
; Prepare for Menu and start the Menu
K07326:	CALL	L07634			; Draw Ninja for Menu
	JMP	L11224			; Entering Menu
;
K07336:	.ASCII	/PRESS ANY KEY TO CONTINUE/
; Levels info
K07367:	.ASCII	/RIN  999/
	.ASCII	/  STRENGTH OF MIND AND BODY   00/
	.BYTE	000, 000, 377, 377
K07443:	.ASCII	/KYO  901/
	.ASCII	/     DIRECTION OF ENERGY      00/
	.BYTE	000, 000, 377, 376
K07517:	.ASCII	/TOH  801/
	.ASCII	/   HARMONY WITH THE UNIVERSE  02/
	.BYTE	002, 000, 377, 377
K07573:	.ASCII	/SHA  751/
	.ASCII	/  HEALING OF SELF AND OTHERS  05/
	.BYTE	005, 000, 356, 377
K07647:	.ASCII	/KAI  701/
	.ASCII	/    PREMONITION OF DANGER     07/
	.BYTE	007, 000, 356, 377
K07723:	.ASCII	/JIN  651/
	.ASCII	/KNOWING THE THOUGHTS OF OTHERS09/
	.BYTE	011, 001, 356, 377
K07777:	.ASCII	/RETSU601/
	.ASCII	/  MASTERY OF TIME AND SPACE   11/
	.BYTE	013, 001, 377, 376
K10053:	.ASCII	/ZAI  551/
	.ASCII	/ CONTROL OF NATURES ELEMENTS  14/
	.BYTE	016, 001, 377, 377
K10127:	.ASCII	/ZEN  999/
	.ASCII	/        ENLIGHTENMENT         14/
	.BYTE	016, 001, 356, 377
	.EVEN
; Levels table
K10204:	.WORD	K07367, K07367, K07443, K07517, K07573, K07647, K07723, K07777
	.WORD	K10053, K10127

K10230:	.ASCII	/MISSION   BRIEFING/
K10252:	.ASCII	/LEVEL 0/
K10261:	.ASCII	/KILL ENEMY GUARDS/
	.ASCII	/ESCAPE FROM BUILDING VIA TUNNELS/
	.ASCII	/"#/
	.ASCII	/GOOD LUCK ON YOUR MISSION/
	.ASCII	/PREPARE TO BEGIN/
K10415:	.ASCII	/MISSION NAME ' /
K10434:	.ASCII	/COLLECT XX PIECES OF PAPER TAPE/
K10473:	.ASCII	/INSERT TAPE IN MISSILE CONSOLE/
K10531:	.ASCII	/DISABLE ELECTRIFIED FENCE/
K10562:	.ASCII	/SMASH THROUGH FENCE ON MOTORBIKE/
;
K10622:	.WORD	0

; Start Game selected in Menu - show level briefing
K10624:	CLR	<K01224+2>		; set filler
	NOP3	;MOVB	#000062, <K01224+3>
	CALL	K01224			; Clear the screen
	MOV	#K10230, R3		; "MISSION   BRIEFING" etc.
	MOV	#040007, R2		; screen coords
	MOV	#000022, R1
	CALL	K01704			; Print string
	MOV	L11666, R0		; Level
	ADD	#000060, R0		; +'0'
	MOVB	R0, <K10252+6>		; put in the "LEVEL 1" string
	MOV	#040114, R2		; screen coords
K10702:	MOV	#000007, R1
K10706:	CALL	K01704			; Print string
K10712:	MOV	#040207, R2		; screen coords
K10716:	MOV	#K10415, R3		; "MISSION NAME ' "
K10722:	MOV	#000017, R1
K10726:	CALL	K01704			; Print string
K10732:	MOV	L11666, R0		; Level
K10736:	ASL	R0
K10740:	MOV	K10204(R0), R3		; get mission info, starts with mission name
K10744:	MOV	#000005, R1
K10750:	ADD	#000017, R2		; screen coords (0,15)
K10754:	CALL	K01704			; Print string - mission name
K10760:	MOV	#K36204, R2
K10764:	MOV	#000003, R1		; Copy 3-char TIMER initial value
K10770:	MOVB	(R3)+, (R2)+		; <
K10772:	SOB	R1, K10770		; repeat
K10774:	MOV	#040241, R2		; screen coords
K11000:	MOV	#000036, R1		; 30.
K11004:	CALL	K01704			; Print string
K11010:	MOVB	(R3)+, <K10434+10>	; higher digit in "COLLECT XX"
K11014:	MOVB	(R3), <K10434+11>	; lower digit
K11020:	MOV	R3, K10622
K11024:	MOV	R3, R4
K11026:	MOVB	000001(R4), 052626
K11034:	BEQ	K11056
K11036:	MOV	#K10434, R3		; "COLLECT 00 PIECES OF PAPER TAPE"
K11042:	MOV	#044000, R2
K11046:	MOV	#000037, R1		; 31.
K11052:	CALL	K01704			; Print string
K11056:	MOVB	000004(R4), K17200
K11064:	MOV	#000377, R0
K11070:	CMPB	#177777, K17200
K11076:	BNE	K11124
K11100:	MOV	#K10562, R3		; "SMASH THROUGH FENCE ON MOTORBIKE"
K11104:	MOV	#044200, R2
K11110:	MOV	#000040, R1		; 32.
K11114:	CALL	K01704			; Print string
K11120:	MOV	#000001, R0
K11124:	MOVB	R0, <K13224+2>
K11130:	MOVB	000002(R4), K11770
K11136:	BEQ	K11160
K11140:	MOV	#K10473, R3		; "INSERT TAPE IN MISSILE CONSOLE"
K11144:	MOV	#044041, R2
K11150:	MOV	#000036, R1
K11154:	CALL	K01704			; Print string
K11160:	MOVB	000003(R4), <K31220+2>
K11166:	CMPB	#177777, <K31220+2>
K11174:	BEQ	K11216
K11176:	MOV	#K10531, R3		; "DISABLE ELECTRIFIED FENCE"
K11202:	MOV	#044103, R2
K11206:	MOV	#000031, R1
K11212:	CALL	K01704			; Print string
K11216:	MOV	#K10261, R3		; "KILL ENEMY GUARDS"
K11222:	MOV	#040347, R2
K11226:	MOV	#000021, R1		; 17.
K11232:	CALL	K01704			; Print string "KILL ENEMY GUARDS"
K11236:	MOV	#044140, R2
K11242:	MOV	#000040, R1		; 32.
K11246:	CALL	K01704			; Print string "ESCAPE FROM BUILDING VIA TUNNELS"
K11252:	MOV	#040240, R2
K11256:	MOV	#000001, R1		; 1.
K11262:	CALL	K01704			; Print string
K11266:	INC	R1
K11270:	MOV	#040277, R2		; 1.
K11274:	CALL	K01704			; Print string
K11300:	MOV	#050003, R2
K11304:	MOV	#000031, R1		; 25.
K11310:	CALL	K01704			; Print string "GOOD LUCK ON YOUR MISSION"
K11314:	MOV	#050110, R2
K11320:	MOV	#000020, R1		; 16.
K11324:	CALL	K01704			; Print string "PREPARE TO BEGIN"
;NOTE: Временно закомментировал, из-за нехватки слов в K11632 TODO
;K11330:	MOV	#K07336, R3		; "PRESS ANY KEY TO CONTINUE"
;K11334:	MOV	#050343, R2
;K11340:	MOV	#000031, R1		; 25.
;K11344:	CALL	K01704			; Print string
;K11350:	CALL	L13024			; Empty keyboard buffer
K11354:	CALL	L13100			; Get a key
; After the briefing - clear the screen, show the indicator panel
K11360:	CLR	<K01224+2>		; set filler
K11364:	NOP3	;MOVB	#000011, <K01224+3>
K11372:	CALL	K01224			; Clear the screen
K11376:	MOVB	K41304, R0		; get input method
K11402:	MOV	#115756, R2
K11406:	DECB	R0
K11410:	BEQ	K11436
K11412:	DECB	R0
K11414:	BEQ	K11422
K11416:	MOV	#L15775, R2		; Redefined keys address
K11422:	MOV	#K41305, R3
K11426:	MOV	#000017, R1		; Copy 15. bytes
K11432:	MOVB	(R2)+, (R3)+		; <
K11434:	SOB	R1, K11432		; repeat
K11436:	MOV	#000041, R1		; 33.
K11442:	MOV	#<K23030+4>, R2
K11446:	MOV	#<K23030+11>, R3
K11452:	PUSH	R1			; <
K11454:	MOV	#000005, R1		; | Copy 5 bytes
K11460:	MOVB	(R3)+, (R2)+		; | <
K11462:	SOB	R1, K11460		; | repeat
K11464:	MOV	#000011, R1
K11470:	ADD	R1, R3
K11472:	ADD	R1, R2
K11474:	POP	R1
K11476:	SOB	R1, K11452		; repeat
K11500:	PUSH	R4
K11502:	MOV	#050100, R2		; screen coords
K11506:	CALL	K02056			; screen coords R2 to screen address
K11512:	MOV	#011772, R5
K11516:	MOVB	(R5), R3		; <  get byte
K11520:	CMPB	#177777, R3		; |  end of sequence?
K11524:	BNE	K11534
K11526:	POP	R4
K11530:	JMP	K12454			; Indicator panel frame is shown - exit the loop
K11534:	BIC	#177400, R3		; keep low byte
K11540:	PUSH	R3
K11542:	ASL	R3			; | *2
K11544:	ASL	R3			; | *4
K11546:	ASL	R3			; | *8
K11550:	ADD	(SP)+, R3		; | *9
K11552:	ADD	#012121, R3		; | +tile base address
K11556:	MOVB	000010(R3), R0
K11562:	MOV	#000001, R1
K11566:	CMPB	(R5)+, #000021		; |  less than 17. ?
K11572:	BLO	K11600
K11574:	CLR	R1
K11576:	BISB	(R5)+, R1		; |   get counter byte
K11600:	PUSH	R3		;   <
K11602:	CALL	K11632			;   |  show one tile of the indicator panel
K11606:	POP	R3
K11610:	TST	(R2)+			;   |  next column
K11612:	INC	R4
K11614:	BIT	#000037, R4
K11620:	BNE	K11626
K11622:	ADD	#001100, R2
K11626:	SOB	R1, K11600		;   repeat
K11630:	BR	K11516			; repeat
; Procedure: Show one tile of the indicator panel
K11632:	PUSH	R2
	PUSH	R5
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	MOVB	(R3)+, R5		; #0
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #1
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #2
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #3
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #4
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #5
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #6
	ASL	R5
	MOV	PXCONH(R5), (R2)
	ADD	#00100, R2
	MOVB	(R3)+, R5		; #7
	ASL	R5
	MOV	PXCONH(R5), (R2)
	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R5
	POP	R2
K11766:	RETURN
K11770:	.BYTE	000
	.EVEN
;
; Indicator panel tile sequence
K11772:	.BYTE	010,021,004,016,021,016,016,021,005,016,021,004,011,014,022,004
	.BYTE	014,022,016,014,000,001,001,001,002,014,022,004,014,014,022,004
	.BYTE	014,022,016,014,003,022,003,004,014,022,004,014,014,022,004,014
	.BYTE	023,016,014,005,006,006,006,007,014,022,004,014,014,022,004,014
	.BYTE	023,016,014,022,005,014,022,004,014,012,021,004,017,021,016,017
	.BYTE	021,005,017,021,004,013,377
; Indicator panel tiles, 9 bytes each
K12121:	.BYTE	000,017,020,047,110,120,120,120,017
	.BYTE	000,377,000,377,000,000,000,000,017
	.BYTE	000,360,010,344,022,012,012,012,017
	.BYTE	120,120,120,120,120,120,120,120,017
	.BYTE	012,012,012,012,012,012,012,012,017
	.BYTE	120,120,120,110,047,020,017,000,017
	.BYTE	000,000,000,000,377,000,377,000,017
	.BYTE	012,012,012,022,344,010,360,000,017
	.BYTE	000,022,015,333,062,051,044,040,002
	.BYTE	000,060,100,106,310,260,236,050,002
	.BYTE	020,031,361,063,057,102,102,004,002
	.BYTE	036,050,230,330,144,104,042,040,002
	.BYTE	020,076,110,010,020,174,022,060,002
	.BYTE	010,052,034,260,340,222,114,030,002
	.BYTE	000,042,044,107,314,152,222,020,002
	.BYTE	020,125,135,053,342,042,104,000,002
	.BYTE	020,036,070,217,022,004,170,014,002
	.BYTE	000,041,042,372,027,022,042,000,002
	.BYTE	000,000,000,000,000,000,000,000,017
	.BYTE	377,377,377,377,377,377,377,377,012
; Indicator signs
K12405:	.ASCII	/HELD/
	.ASCII	/TIMER/
	.ASCII	/NEAR/
K12422:	.ASCII	/ PAY $0000000 /
	.ASCIZ	/XXXXXXXXXXX/
	.EVEN
;
; Starting the game, indicator panel frame is already shown
K12454:	MOV	K10622, R3
	CLR	R2
	BISB	000001(R3), R2
	BEQ	K12504
	ADD	#055205, R2		; screen coords
	MOV	#000014, R0
	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
K12504:	MOV	#<K12422+6>, R3
	MOV	#000006, R1		; 6 bytes
K12514:	MOVB	#060, (R3)+		; <
	SOB	R1, K12514		; repeat
	MOV	#K12405, R3		; "HELD" etc.
	MOV	#050301, R2
	MOV	#000004, R1		; 4.
	CALL	K01704			; Print string "HELD"
	MOV	#050325, R2
	MOV	#000005, R1		; 5.
	CALL	K01704			; Print string "TIMER"
	MOV	#050333, R2
	MOV	#000004, R1		; 4.
	CALL	K01704			; Print string "NEAR"
	MOV	#050146, R2
	MOV	#000016, R1		; 14.
	CALL	K01704			; Print string " PAY $0000000 "
	MOVB	#000016, 114510
	MOVB	#000007, K36211
	MOVB	#000046, K36210
	MOVB	#000006, K36212
	MOVB	#000001, K36213
	MOVB	#000021, K36215
	MOV	#050205, K51142
	CLR	R0
	CLRB	K24762
	CLRB	051145
	CLRB	051146
	CLRB	017716
	CLRB	K36216
	CLRB	003542
	CLRB	K33540
	CLRB	K36214			; clear room number
	MOV	#<K23030+4>, K23746
	MOV	#046310, <K36276+2>
	MOV	#K40520, <K25272+2>	; set JMP address
	MOVB	R0, K37662
	MOVB	R0, K36264
	MOV	#000240, K04114		; set NOP command
	MOV	#070613, <K13332+2>
	INCB	R0			; R0 = 1
	MOVB	R0, 114536
	MOVB	R0, 114474
	MOVB	R0, K33464		; set HELD value = 1 = Shuriken
	MOVB	R0, K33465		; set NEAR value = 1
	MOVB	R0, K33542
	MOVB	R0, K36207		; set TIMER counter value = 1
	MOV	#033556, R3
	MOV	#000014, R2		; 12.
	MOV	#000145, R1		; 101.
K13036:	MOVB	(R3), R0		; <
K13040:	CMPB	R0, #000005
K13044:	BNE	K13050
K13046:	CLRB	(R3)
K13050:	CMPB	R0, #000006
K13054:	BNE	K13062
K13056:	MOVB	#000001, (R3)
K13062:	ADD	R2, R3
K13064:	SOB	R1, K13036		; repeat
K13066:	CALL	K05040
K13072:	MOVB	#000005, K26666
K13100:	MOVB	#000003, 115646
K13106:	CLRB	K14640
K13112:	MOVB	K17200, R0
K13116:	INCB	R0
K13120:	BNE	K13166
K13122:	CMPB	K36214, #000023		; check room number
K13130:	BNE	K13166
K13132:	MOV	#017716, R3
K13136:	TSTB	(R3)
K13140:	BNE	K13166
K13142:	MOVB	#000001, (R3)
K13146:	MOV	#050146, R2
K13152:	MOV	#K17720, R3		; " BIKE ARRIVED "
K13156:	MOV	#000016, R1
K13162:	CALL	K01704			; Print string
K13166:	MOV	#000006, R1
K13172:	MOV	#033466, R3
K13176:	MOV	#000007, R2
K13202:	CLRB	(R3)			; <
K13204:	ADD	R2, R3
K13206:	SOB	R1, K13202		; repeat
K13210:	MOVB	K36215, R1
K13214:	MOVB	#000001, R0
K13220:	DECB	R1
K13222:	BNE	K13230
K13224:	MOVB	#000001, R0		;WARN: mutable argument
K13230:	MOVB	R0, 070340
K13234:	CLRB	K17635
K13240:	CALL	K46120			; Fill Ninja tile screen
K13244:	CALL	K46150			; Fill Enemy 0/1 tile screens
K13250:	MOV	#L25424, R3		; Back tile screen address
K13254:	MOV	#000440, R1		; 288. words
K13260:	CLR	(R3)+			; <
K13262:	SOB	R1, K13260		; repeat
K13264:	MOV	#000440, R1		; 288. words
K13270:	MOV	#177777, R5		; filler
K13274:	MOV	R5, (R3)+		; <
K13276:	SOB	R1, K13274		; repeat
K13300:	MOV	#L24324, R3
K13304:	MOV	#000440, R1		; 288. words
K13310:	MOV	#000401, R5		; filler
K13314:	MOV	R5, (R3)+		; <
K13316:	SOB	R1, K13314		; repeat
;
K13320:	NOP
K13322:	NOP	;CLR	<K01400+2>
	NOP
K13326:	NOP2	;MTPS	#000000			; Enable interrupts
;
K13332:	MOV	#000000, R3		;WARN: mutable argument
K13336:	MOVB	K36214, R0		; get room number
K13342:	BEQ	K13346
K13344:	MOVB	(R3), R0		; get room number
K13346:	BIC	#177400, R0
K13352:	ASL	R0
K13354:	MOV	K72572(R0), R3		; Get room sequence address from the table
; Build the room using the room sequence
K13360:	MOVB	(R3), R0		; get marker
K13362:	INCB	R0			; end of sequence?
K13364:	BNE	K13372
K13366:	JMP	K24272			; End of room sequence
K13372:	INC	R3
K13374:	PUSH	R3
K13376:	ASL	R0			; *2
K13400:	BIC	#177400, R0
K13404:	ADD	#013424, R0
K13410:	JMP	@000000(R0)		; Process this marker
K13414:	POP	R3
K13416:	INC	R3
K13420:	BR	K13360
K13422:	JMP	@#K13414		;WARN: mutable argument
K13426:	.WORD	K20120			; $00 000 - Fill horizontally W with tile
	.WORD	K20152			; $01 001 - Fill vertically H with tile
	.WORD	K24104			; $02 002 - Fill rectangle WxH with tile
	.WORD	K17762			; $03 003 - Fill the whole room with tile
	.WORD	K20022			; $04 004 - Fill one tile
	.WORD	K16024			; $05 005 - Rocket upper part
	.WORD	K20136			; $06 006 - Fill diagonally right-down
	.WORD	K20144			; $07 007 - Fill diagonally left-down
	.WORD	K20260			; $08 010 - Ladder
	.WORD	K20346			; $09 011 - Supertile
	.WORD	K24004			; $0A 012 - Fill triangle down-right
	.WORD	K23752			; $0B 013 - Fill triangle up-right
	.WORD	K23760			; $0C 014 - Fill triangle right-up
	.WORD	K23776			; $0D 015 - Fill triangle right-down
	.WORD	K20240			; $0E 016 - Wide white ladder
	.WORD	K20056			; $0F 017 - Joint between the ladder and the mast
	.WORD	K15226			; $10 020 - Cabinet with doors
	.WORD	K16220			; $11 021 - Lift platform bottom
	.WORD	K15562			; $12 022 - Tree leaves small
	.WORD	K16400			; $13 023 - Moon
	.WORD	K16134			; $14 024 - Rocket wing left top
	.WORD	K16152			; $15 025 - Rocket wing right top
	.WORD	K15634			; $16 026 - Rocket wing element left bottom
	.WORD	K15670			; $17 027 - Rocket wing element right bottom
	.WORD	K15724			; $18 030
	.WORD	K15764			; $19 031
	.WORD	K17736			; $1A 032
	.WORD	K17754			; $1B 033
	.WORD	K16116			; $1C 034
	.WORD	K16350			; $1D 035
	.WORD	K20250			; $1E 036
	.WORD	K16324			; $1F 037
	.WORD	K16100			; $20 040
	.WORD	K20230			; $21 041
	.WORD	K17640			; $22 042
	.WORD	K17646			; $23 043
	.WORD	K17654			; $24 044
	.WORD	K16656			; $25 045
	.WORD	K16742			; $26 046
	.WORD	K16500			; $27 047
	.WORD	K15376			; $28 050
	.WORD	K15464			; $29 051
	.WORD	K15352			; $2A 052
	.WORD	K15332			; $2B 053
	.WORD	K15324			; $2C 054
	.WORD	K15316			; $2D 055
	.WORD	K15500			; $2E 056
	.WORD	K15264			; $2F 057
	.WORD	K15206			; $30 060
	.WORD	K15200			; $31 061
	.WORD	K15154			; $32 062
	.WORD	K15130			; $33 063
	.WORD	K15122			; $34 064
	.WORD	K15234			; $35 065
	.WORD	K15242			; $36 066
	.WORD	K15250			; $37 067
	.WORD	K16624			; $38 070
	.WORD	K16616			; $39 071
	.WORD	K15114			; $3A 072
	.WORD	K15106			; $3B 073
	.WORD	K15220			; $3C 074
	.WORD	K15100			; $3D 075
	.WORD	K15256			; $3E 076
	.WORD	K15472			; $3F 077
	.WORD	K16576			; $40 100
	.WORD	K15440			; $41 101
	.WORD	K15424			; $42 102
	.WORD	K15432			; $43 103
	.WORD	K23772			; $44 104
	.WORD	K20132			; $45 105
	.WORD	K16770			; $46 106
	.WORD	K17166			; $47 107
	.WORD	K17024			; $48 110
	.WORD	K17124			; $49 111
	.WORD	K17076			; $4A 112
	.WORD	K17152			; $4B 113
	.WORD	K17160			; $4C 114
	.WORD	K16570			; $4D 115
	.WORD	K16632			; $4E 116
	.WORD	K16562			; $4F 117
	.WORD	K16554			; $50 120
	.WORD	K16546			; $51 121
	.WORD	K16540			; $52 122
	.WORD	K16532			; $53 123
	.WORD	K15072			; $54 124
	.WORD	K15064			; $55 125
	.WORD	K15056			; $56 126
	.WORD	K15050			; $57 127
	.WORD	K15042			; $58 130
	.WORD	K15034			; $59 131
	.WORD	K15026			; $5A 132
	.WORD	K15020			; $5B 133
	.WORD	K15012			; $5C 134
	.WORD	K15004			; $5D 135
	.WORD	K14776			; $5E 136
	.WORD	K14770			; $5F 137
	.WORD	K14762			; $60 140
	.WORD	K16524			; $61 141
	.WORD	K14712			; $62 142
	.WORD	K14720			; $63 143
	.WORD	K14704			; $64 144
	.WORD	K14676			; $65 145
	.WORD	K14644			; $66 146
	.WORD	K15310			; $67 147
;
.INCLUDE /S217E6.MAC/
;
K14640:	.BYTE	0
	.EVEN
	.WORD	0
;
; Room marker $66 146
K14644:	MOVB	#000001, K14640
K14652:	MOV	#062260, R3
K14656:	MOV	#014434, R4
K14662:	MOVB	#000006, K01604
K14670:	MOV	#000006, R1
K14674:	BR	K14756
; Room marker $65 145
K14676:	MOV	#062175, R3
K14702:	BR	K14724
; Room marker $64 144
K14704:	MOV	#062157, R3
K14710:	BR	K14724
; Room marker $62 142
K14712:	MOV	#062164, R3
K14716:	BR	K14724
; Room marker $63 143
K14720:	MOV	#062177, R3
K14724:	CMPB	036214, #000014
K14732:	BLO	K14740
K14734:	JMP	K16466
K14740:	MOV	#014346, R4		; copy from
K14744:	MOVB	#000011, K01604		; width = 9.
K14752:	MOV	#000006, R1		; height = 6
K14756:	JMP	K16432			; Copy tiles
; Room marker $60 140
K14762:	MOV	#062564, R3
K14766:	BR	K15134
; Room marker $5F 137
K14770:	MOV	#062602, R3
K14774:	BR	K15134
; Room marker $5E 136
K14776:	MOV	#062573, R3
K15002:	BR	K15134
; Room marker $5D 135
K15004:	MOV	#062555, R3
K15010:	BR	K15134
; Room marker $5C 134
K15012:	MOV	#062631, R3
K15016:	BR	K15134
; Room marker $5B 133
K15020:	MOV	#062616, R3
K15024:	BR	K15134
; Room marker $5A 132
K15026:	MOV	#062743, R3
K15032:	BR	K15134
; Room marker $59 131
K15034:	MOV	#062733, R3
K15040:	BR	K15134
; Room marker $58 130
K15042:	MOV	#062723, R3
K15046:	BR	K15134
; Room marker $57 127
K15050:	MOV	#062705, R3
K15054:	BR	K15134
; Room marker $56 126
K15056:	MOV	#062675, R3
K15062:	BR	K15134
; Room marker $55 125
K15064:	MOV	#062663, R3
K15070:	BR	K15134
; Room marker $54 124
K15072:	MOV	#062654, R3
K15076:	BR	K15134
; Room marker $3D 075
K15100:	MOV	#062542, R3
K15104:	BR	K15134
; Room marker $3B 073
K15106:	MOV	#062532, R3
K15112:	BR	K15134
; Room marker $3A 072
K15114:	MOV	#062515, R3
K15120:	BR	K15134
; Room marker $34 064
K15122:	MOV	#062640, R3
K15126:	BR	K15134
; Room marker $33 063
K15130:	MOV	#062625, R3
K15134:	MOV	#014310, R4
K15140:	MOVB	#000006, K01604
K15146:	MOV	#000005, R1
K15152:	BR	K15420
; Room marker $32 062
K15154:	MOV	#062342, R3
K15160:	MOV	#014302, R4
K15164:	MOVB	#000003, K01604
K15172:	MOV	#000002, R1
K15176:	BR	K15420
; Room marker $31 061
K15200:	MOV	#064026, R3
K15204:	BR	K15212
; Room marker $30 060
K15206:	MOV	#064020, R3
K15212:	MOV	#K13746, R4
K15216:	BR	K15362
; Room marker $3C 074
K15220:	MOV	#062364, R3
K15224:	BR	K15270
; Room marker $10 020
K15226:	MOV	#062546, R3
K15232:	BR	K15270
; Room marker $35 065
K15234:	MOV	#062532, R3
K15240:	BR	K15270
; Room marker $36 066
K15242:	MOV	#062516, R3
K15246:	BR	K15270
; Room marker $37 067
K15250:	MOV	#062500, R3
K15254:	BR	K15270
; Room marker $3E 076
K15256:	MOV	#062401, R3
K15262:	BR	K15270
; Room marker $2F 057
K15264:	MOV	#062517, R3
K15270:	MOV	#014036, R4
K15274:	MOVB	#000005, K01604
K15302:	MOV	#000010, R1
K15306:	BR	K15420
; Room marker $67 147
K15310:	MOV	#062726, R3
K15314:	BR	K15356
; Room marker $2D 055
K15316:	MOV	#062732, R3
K15322:	BR	K15356
; Room marker $2C 054
K15324:	MOV	#062735, R3
K15330:	BR	K15356
; Room marker $2B 053
K15332:	MOV	#062740, R3
K15336:	MOV	#014255, R4
K15342:	MOVB	#000005, K01604
K15350:	BR	K15370
; Room marker $2A 052
K15352:	MOV	#062665, R3
K15356:	MOV	#K14274, R4
K15362:	MOVB	#000002, K01604
K15370:	MOV	#000003, R1
K15374:	BR	K15420
; Room marker $28 050
K15376:	MOV	#062471, R3
K15402:	MOV	#014156, R4		; copy from
K15406:	MOVB	#000007, K01604		; width = 7
K15414:	MOV	#000011, R1		; height = 9.
K15420:	JMP	K16432			; Copy tiles
; Room marker $42 102
K15424:	MOV	#063506, R3
K15430:	BR	K15444
; Room marker $43 103
K15432:	MOV	#063475, R3
K15436:	BR	K15444
; Room marker $41 101
K15440:	MOV	#063461, R3
K15444:	MOV	#013754, R4
K15450:	MOVB	#000005, K01604
K15456:	MOV	#000012, R1
K15462:	BR	K15420
; Room marker $29 051
K15464:	MOV	#062456, R3
K15470:	BR	K15402
; Room marker $3F 077
K15472:	MOV	#062503, R3
K15476:	BR	K15402
; Room marker $2E 056
K15500:	MOVB	036214, 001602
K15506:	MOV	#000134, R0
K15512:	SUB	001602, R0
K15516:	MOVB	R0, <K15550+7>		; put digit in " LEVEL X " string
K15522:	MOV	#000011, R1
K15526:	MOV	#K15550, R2		; " LEVEL X "
K15532:	MOV	#127105, R3
K15536:	CALL	K04604			; Draw string as tiles
K15542:	DEC	(SP)
K15544:	JMP	K13422
;
K15550:	.ASCIZ	/@LEVEL@X@/
;
; Room marker $12 022 - Tree leaves small, 5x4 tiles
K15562:	MOV	#K15610, R4		; copy from
K15566:	MOVB	#000005, K01604		; width = 5
K15574:	MOV	#000004, R1		; height = 4
K15600:	MOV	#063477, R3
K15604:	JMP	K16432			; Copy tiles
; Tree leaves small, 5x4 tiles
K15610:	.BYTE	013,014,015,015,016
	.BYTE	017,020,020,020,021
	.BYTE	017,020,020,020,025
	.BYTE	022,023,024,025,377
;
; Room marker $16 026 - Rocket wing element left bottom, 2x3 tiles
K15634:	MOV	#K15662, R4		; copy from
K15640:	MOVB	#000002, K01604		; width = 2
K15646:	MOV	#000003, R1		; height = 3
K15652:	MOV	#062570, R3
K15656:	JMP	K16432			; Copy tiles
; Rocket wing element left bottom, 2x3 tiles
K15662:	.BYTE	370,370,370,321,321,000
;
; Room marker $17 027 - Rocket wing element right bottom, 2x3 tiles
K15670:	MOV	#K15716, R4		; copy from
K15674:	MOVB	#000002, K01604		; width = 2
K15702:	MOV	#000003, R1		; height = 3
K15706:	MOV	#062600, R3
K15712:	JMP	K16432			; Copy tiles
; Rocket wing element right bottom, 2x3 tiles
K15716:	.BYTE	370,370,320,370,000,320
;
; Room marker $18 030 - ??? 3x3 tiles
K15724:	MOV	#K15752, R4		; copy from
K15730:	MOVB	#000003, K01604		; width = 3
K15736:	MOV	#000003, R1		; height = 3
K15742:	MOV	#062731, R3
K15746:	JMP	K16432			; Copy tiles
; Object in tiles 3x3 tiles
K15752:	.BYTE	000,000,316
	.BYTE	000,316,317
	.BYTE	316,317,317
	.EVEN
;
; Room marker $19 031 - ??? 3x3 tiles
K15764:	MOV	#K16012, R4		; copy from
K15770:	MOVB	#000003, K01604		; width = 3
K15776:	MOV	#000003, R1		; height = 3
K16002:	MOV	#062737, R3
K16006:	JMP	K16432			; Copy tiles
; Object in tiles 3x3 tiles
K16012:	.BYTE	315,000,000
	.BYTE	317,315,000
	.BYTE	317,317,315
	.EVEN
;
; Room marker $05 005 - Rocket upper part 3x4 tiles
K16024:	MOV	#070616, R4		; copy from
K16030:	MOVB	#000003, K01604		; width = 3
K16036:	MOV	#000004, R1		; height = 4
K16042:	MOV	#062334, R3
K16046:	JMP	K16432			; Copy tiles
; Object in tiles, 5x3 tiles
K16052:	.BYTE	001,037,040,036,036
	.BYTE	041,036,036,036,036
	.BYTE	001,042,043,044,044
; Object in tiles, 3x2 tiles
K16071:	.BYTE	047,050,051,036,052,053
	.EVEN
; Room marker $20 040 - ??? 3x2 tiles
K16100:	MOV	#K16071, R4		; copy from
K16104:	MOV	#000003, R2		; width = 3
K16110:	MOV	#000002, R1		; height = 2
K16114:	BR	K16234
; Room marker $1C 034 - ??? 5x3 tiles
K16116:	MOV	#K16052, R4		; copy from
K16122:	MOV	#000005, R2		; width = 5
K16126:	MOV	#000003, R1		; height = 3
K16132:	BR	K16234
; Room marker $14 024 - Rocket wing left top, 2x6 tiles
K16134:	MOV	#K16170, R4
K16140:	MOV	#000002, R2		; width = 2
K16144:	MOV	#000006, R1		; height = 6
K16150:	BR	K16234
; Room marker $15 025 - Rocket wing right top, 2x6 tiles
K16152:	MOV	#K16204, R4
K16156:	MOV	#000002, R2		; width = 2
K16162:	MOV	#000006, R1		; height = 6
K16166:	BR	K16234
; Rocket wing left top, 2x6 tiles
K16170:	.BYTE	000,366,366,370,370,370,370,370,370,370,321,000
; Rocket wing right top, 2x6 tiles
K16204:	.BYTE	365,000,370,365,370,370,370,370,370,370,000,320
;
; Room marker $11 021 - Lift platform bottom
K16220:	MOV	#070602, R4
K16224:	MOV	#000001, R1		; height = 1
K16230:	MOV	#000006, R2		; width = 6
K16234:	MOV	(SP), R0
K16236:	MOVB	(R0)+, K01610		; offset low
K16242:	MOVB	(R0), K01611		; offset high
K16246:	MOV	R0, (SP)
K16250:	MOV	K01610, R3		; get offset
K16254:	ADD	#K43310, R3		; + base address tiles for current room
K16260:	PUSH	R2		; <
K16262:	PUSH	R3
K16264:	MOVB	(R4)+, (R3)+		;   <
K16266:	SOB	R2, K16264		;   repeat
K16270:	POP	R3
K16272:	ADD	#000040, R3
K16276:	POP	R2
K16300:	SOB	R1, K16260		; repeat
	JMP	K13422
; ??? 3x3 tiles
K16306:	.BYTE	026,027,030
	.BYTE	031,032,033
	.BYTE	034,035,036
; ??? 2x2 tiles
K16317:	.BYTE	037,037
	.BYTE	037,037
	.EVEN
;
; Room marker $1F 037 - ??? 2x2 tiles
K16324:	MOV	#K16317, R4		; copy from
K16330:	MOVB	#000002, K01604		; width = 2
K16336:	MOV	#000002, R1		; height = 2
K16342:	MOV	#064235, R3
K16346:	BR	K16432			; Copy tiles
; Room marker $1D 035 - ??? 3x3 tiles
K16350:	CLRB	114474
K16354:	MOV	#K16306, R4		; copy from
K16360:	MOVB	#000003, K01604		; width = 3
K16366:	MOV	#000003, R1		; height = 3
K16372:	MOV	#064040, R3
K16376:	BR	K16432			; Copy tiles
; Room marker $13 023 - Moon 2x2 tiles
K16400:	MOV	#062245, R3
K16404:	CMPB	#000001, @#125555
K16412:	BNE	K16466
K16414:	MOV	#K16474, R4		; copy from
K16420:	MOVB	#000002, K01604		; width = 2
K16426:	MOV	#000002, R1
; Entry point: Copy tiles; K01604 = width, R1 = height, R4 = address to copy from
K16432:	MOV	#000040, R2		; 32. = row width
K16436:	ADD	#K43310, R3		; + base address tiles for current room
K16442:	PUSH	R5
K16444:	MOVB	K01604, R5		; < width  WARN: mutable argument
K16450:	PUSH	R3
K16452:	MOVB	(R4)+, (R3)+		; | < copy tile
K16454:	SOB	R5, K16452		; | repeat
K16456:	POP	R3
K16460:	ADD	R2, R3
K16462:	SOB	R1, K16444		; repeat
K16464:	POP	R5
K16466:	DEC	(SP)
K16470:	JMP	K13422
; Moon in tiles, 2x2 tiles
K16474:	.BYTE	032,033
	.BYTE	034,035
;
; Room marker $27 047 - ??? 5x8 tiles
K16500:	MOV	#K14106, R4		; copy from
K16504:	MOVB	#000005, K01604		; width = 5
K16512:	MOV	#000010, R1		; height = 8.
K16516:	MOV	#062540, R3
K16522:	BR	K16432			; Copy tiles
; Room marker $61 141 - ??? 11x7 tiles
K16524:	MOV	#063023, R3
K16530:	BR	K16662
; Room marker $53 123 - ??? 8x4 tiles
K16532:	MOV	#064026, R3
K16536:	BR	K16636
; Room marker $52 122 - ??? 10x7 tiles
K16540:	MOV	#063263, R3
K16544:	BR	K16602
; Room marker $51 121 - ??? 11x7 tiles
K16546:	MOV	#063655, R3
K16552:	BR	K16662
; Room marker $50 120 - ??? 10x7 tiles
K16554:	MOV	#063255, R3
K16560:	BR	K16602
; Room marker $4F 117 - ??? 11x7 tiles
K16562:	MOV	#063633, R3
K16566:	BR	K16662
; Room marker $4D 115 - ??? 11x7 tiles
K16570:	MOV	#063615, R3
K16574:	BR	K16662
; Room marker  $40 100 - ??? 10x7 tiles
K16576:	MOV	#063637, R3
K16602:	MOVB	#000012, K01604		; width = 10.
K16610:	MOV	#K17527, R4		; copy from
K16614:	BR	K16674			; Copy tiles; height = 7
; Room marker $39 071 - ??? 11x7 tiles
K16616:	MOV	#063636, R3
K16622:	BR	K16662
; Room marker $38 070 - ??? 11x7 tiles
K16624:	MOV	#063617, R3
K16630:	BR	K16662
; Room marker $4E 116 - ??? 8x4 tiles
K16632:	MOV	#063765, R3
K16636:	MOVB	#000010, K01604		; width = 8.
K16644:	MOV	#K16702, R4		; copy from
K16650:	MOV	#000004, R1		; height = 4
K16654:	BR	K16432			; Copy tiles
; Room marker $25 045 - ??? 11x7 tiles
K16656:	MOV	#063666, R3
K16662:	MOVB	#000013, K01604		; width = 11.
K16670:	MOV	#K17412, R4		; copy from
K16674:	MOV	#000007, R1		; height = 7
K16700:	BR	K16432			; Copy tiles
; ??? 8x4 tiles
K16702:	.BYTE	002,003,003,003,003,003,003,004
	.BYTE	005,006,006,006,006,006,006,007
	.BYTE	005,006,006,006,006,006,006,007
	.BYTE	010,011,011,011,011,011,011,012
;
; Room marker $26 046 - ??? 6x4 tiles
K16742:	MOV	#K17362, R4		; copy from
K16746:	MOVB	#000006, K01604		; width = 6
K16754:	MOV	#000004, R1		; height = 4
K16760:	MOV	#064044, R3
K16764:	JMP	K16432			; Copy tiles
; Room marker $46 106 - ??? 11x5 tiles
K16770:	MOVB	K17200, R0
K16774:	INCB	R0
K16776:	BNE	K17044
K17000:	MOV	#K17204, R4
K17004:	MOVB	#000013, K01604		; width = 11.
K17012:	MOV	#000005, R1		; height = 5
K17016:	MOV	#063730, R3
K17022:	BR	K16764
; Room marker $48 110
K17024:	MOVB	K17200, R0
K17030:	CMPB	R0, #000376
K17034:	BNE	K17044
K17036:	MOVB	#000020, K17200
K17044:	JMP	K16466
; ??? 4x4 tiles
K17050:	.BYTE	211,212,212,213
	.BYTE	377,377,041,377
	.BYTE	377,377,041,377
	.BYTE	377,377,041,377
; ??? 5x1 tiles
K17070:	.BYTE	322,322,323,323,325
	.EVEN
;
; Room marker $4A 112 - ??? 4x4 tiles
K17076:	MOV	#063760, R3
K17102:	MOV	#K17050, R4		; copy from
K17106:	MOVB	#000004, K01604		; width = 4
K17114:	MOV	#000004, R1		; height = 4
K17120:	JMP	K16432			; Copy tiles
; Room marker $49 111 - ??? 5x1 tiles
K17124:	MOV	#063057, R3
K17130:	MOV	#K17070, R4		; copy from
K17134:	MOVB	#000005, K01604		; width = 5
K17142:	MOV	#000001, R1		; height = 1
K17146:	JMP	K16432			; Copy tiles
; Room marker $4B 113 - ??? 5x1 tiles
K17152:	MOV	#063034, R3
K17156:	BR	K17130
; Room marker $4C 114 - ??? 4x4 tiles
K17160:	MOV	#063735, R3
K17164:	BR	K17102
; Room marker $47 107
K17166:	MOVB	#000132, K37662
K17174:	JMP	K16466
;
K17200:	.BYTE	000,000
K17202:	.WORD	0
;
.INCLUDE /S21E80.MAC/
;
K17635:	.BYTE	000,000,000
;
; Room marker $22 042
K17640:	MOV	#000001, R0
K17644:	BR	K17660
; Room marker $23 043
K17646:	MOV	#000002, R0
K17652:	BR	K17660
; Room marker $24 044
K17654:	MOV	#000003, R0
K17660:	MOVB	R0, K17635
K17664:	BR	K17746
;
K17666:	.ASCII	/OLONEL BRIGGSY  EXPLORER/
	.WORD	0
K17720:	.ASCII	/ BIKE ARRIVED /
;
; Room marker $1A 032
K17736:	MOV	#000240, R0		; NOP command
K17742:	MOV	R0, K04114
K17746:	DEC	(SP)
	JMP	K13422
; Room marker $1B 033
K17754:	MOV	#110013, R0		; "MOVB R0,(R3)" command
K17760:	BR	K17742
; Room marker $03 003 - Fill the whole room with tile
K17762:	MOV	(SP), R3
K17764:	CLR	R0
K17766:	BISB	(R3), R0		; get tile
K17770:	SWAB	R0
K17772:	BISB	(R3), R0		; get same tile again
K17774:	MOV	#L25424, R3		; Back tile screen address
K20000:	MOV	#000110, R1		; 72. * 8. = 576.
K20004:	MOV	R0, (R3)+		; < fill 2 tiles
K20006:	MOV	R0, (R3)+		; | fill 2 tiles
K20010:	MOV	R0, (R3)+		; | fill 2 tiles
K20012:	MOV	R0, (R3)+		; | fill 2 tiles
K20014:	SOB	R1, K20004		; repeat
	JMP	K13422
; Room marker $04 004 - Fill one tile
K20022:	POP	R3
K20024:	MOVB	(R3)+, R0
K20026:	MOVB	(R3)+, 001606
K20032:	MOVB	(R3), 001607
K20036:	PUSH	R3
K20040:	MOV	K01606, R3
K20044:	ADD	#K43310, R3		; + base address tiles for current room
K20050:	MOVB	R0, (R3)
	JMP	K13422
; Room marker $0F 017
K20056:	MOV	#000312, R0
K20062:	POP	R3
K20064:	MOVB	(R3)+, 001606
K20070:	MOVB	(R3), 001607
K20074:	PUSH	R3
K20076:	MOV	001606, R3
K20102:	ADD	#K43310, R3		; + base address tiles for current room
K20106:	MOVB	R0, (R3)+
K20110:	INCB	R0
K20112:	MOVB	R0, (R3)
	JMP	K13422
; Room marker $00 000 - Fill horizontally W with tile
K20120:	MOV	#000001, R2
	BR	K20156
;
K20126:	.WORD	153006,062206		; height = 6, tile = 326, offset lo, offset hi
;
; Room marker $45 105 - Fill diagonally right-down with tile 326, height 6
K20132:	MOV	#K20126, (SP)
; Room marker $06 006 - Fill diagonally right-down
K20136:	MOV	#000041, R2		; offset = 33.
K20142:	BR	K20156			; go fill
; Room marker $07 007 - Fill diagonally left-down
K20144:	MOV	#000037, R2		; offset = 31.
K20150:	BR	K20156			; go fill
; Room marker $01 001 - Fill vertically H with tile
K20152:	MOV	#000040, R2		; offset = 32.
K20156:	POP	R0
K20160:	CLR	R1
K20162:	BISB	(R0)+, R1		; get height
K20164:	MOVB	(R0)+, K01604		; get tile
K20170:	MOVB	(R0)+, K01610		; get offset low
K20174:	MOVB	(R0), K01611		; get offset hi
K20200:	PUSH	R0
K20202:	MOV	K01610, R3		; offset
K20206:	ADD	#K43310, R3		; + base address tiles for current room
K20212:	MOVB	K01604, R0		; tile
K20216:	MOVB	R0, (R3)		; < put tile
K20220:	ADD	R2, R3			; | + offset
K20222:	SOB	R1, K20216		; repeat
K20224:	JMP	K13422
; Room marker $21 041 - Black on green ladder
K20230:	MOVB	#000054, K01604
K20236:	BR	K20266
; Room marker $0E 016 - Wide white ladder
K20240:	MOVB	#000011, K01604
K20246:	BR	K20266
; Room marker $1E 036 - Black ladder
K20250:	MOVB	#000045, K01604
K20256:	BR	K20266
; Room marker $08 010 - White ladder
K20260:	MOVB	#000005, K01604
K20266:	MOV	#000037, R2
K20272:	POP	R0
K20274:	CLR	R1
K20276:	BISB	(R0)+, R1		; get height
K20300:	MOVB	(R0)+, K01610		; get offset low
K20304:	PUSH	R0
K20306:	MOVB	(R0), K01611		; get offset hi
K20312:	MOV	K01610, R3		; offset
K20316:	ADD	#K43310, R3		; + base address tiles for current room
K20322:	MOVB	K01604, R0		; get tile
K20326:	MOVB	R0, (R3)+		; < put tile
K20330:	INCB	R0			; | next tile
K20332:	MOVB	R0, (R3)		; | put tile
K20334:	DECB	R0			; | prev tile
K20336:	ADD	R2, R3			; | + offset
K20340:	SOB	R1, K20326		; repeat
K20342:	JMP	K13422
; Room marker $09 011 - Supertile, 8x6 tiles
K20346:	MOV	#L25424, R2		; Back tile screen address
K20352:	MOV	#000003, R1
K20356:	MOVB	#000004, K01604		; <
K20364:	POP	R3
K20366:	CLR	R0
K20370:	BISB	(R3)+, R0		; get Supertile number
K20372:	PUSH	R3
K20374:	PUSH	R2
K20376:	CALL	K01434
K20402:	ASL	R0			; *2
K20404:	MOV	K20466(R0), R3		; get Supertile address from the table
K20410:	POP	R2
K20412:	MOV	#000006, R1		; height 6
K20416:	MOV	#000010, R5		; <  width 8.
K20422:	MOVB	(R3)+, (R2)+		;   <  copy tile number
K20424:	SOB	R5, K20422		;   repeat
K20426:	ADD	#000030, R2		;   next line
K20432:	SOB	R1, K20416		; repeat
K20434:	CALL	K01434
K20440:	ADD	#000010, R2
K20444:	DECB	K01604
K20450:	BNE	K20364
K20452:	ADD	#000240, R2
K20456:	SOB	R1, K20356		; repeat
K20460:	DEC	(SP)
K20462:	JMP	K13422
;
; STILES == K20550
.INCLUDE /S2TILE.MAC/
;
K23746:	.WORD	0
K23750:	.BYTE	000
	.EVEN
;
; Room marker $0B 013 - Fill triangle up-right
K23752:	MOV	#177740, R3
K23756:	BR	K24010
; Room marker $0C 014 - Fill triangle right-up
K23760:	MOV	#177741, R3
K23764:	BR	K24010

K23766:	.WORD	163406, 62146		; ??

; Room marker $44 104
K23772:	MOV	#K23766, (SP)
; Room marker $0D 015 - Fill triangle right-down
K23776:	MOV	#000041, R3
K24002:	BR	K24010
; Room marker $0A 012 - Fill triangle down-right
K24004:	MOV	#000040, R3
K24010:	MOV	R3, <K24062+2>
K24014:	POP	R0
K24016:	CLR	R2
K24020:	BISB	(R0)+, R2
K24022:	MOV	R2, R1
K24024:	MOVB	(R0)+, R5
K24026:	MOVB	(R0)+, K01610
K24032:	PUSH	R0
K24034:	MOVB	(R0), K01611
K24040:	MOV	K01610, R3
K24044:	ADD	#K43310, R3		; + base address tiles for current room
K24050:	PUSH	R2		; <
K24052:	PUSH	R3
K24054:	MOVB	R5, (R3)+
K24056:	SOB	R2, K24054		; repeat
K24060:	POP	R3
K24062:	ADD	#000040, R3		;WARN: mutable argument
K24066:	POP	R2
K24070:	DEC	R2
K24072:	BIC	#177400, R2
K24076:	SOB	R1, K24050		; repeat
K24100:	JMP	K13422
; Room marker $02 002 - Fill rectangle WxH with tile
K24104:	POP	R0		;
K24106:	CLR	R2
K24110:	BISB	(R0)+, R2		; get width
K24112:	CLR	R1
K24114:	BISB	(R0)+, R1		; get height
K24116:	MOVB	(R0)+, R5		; get tile index
K24120:	MOVB	(R0)+, K01610		; get offset low
K24124:	PUSH	R0
K24126:	MOVB	(R0), K01611		; get offset high
K24132:	MOV	K01610, R3		; offset
K24136:	ADD	#K43310, R3		; + base address tiles for current room
K24142:	PUSH	R2		; <
K24144:	PUSH	R3
K24146:	MOVB	R5, (R3)+		; | <  put one tile
K24150:	SOB	R2, K24146		; | repeat
K24152:	POP	R3
K24154:	ADD	#000040, R3
K24160:	POP	R2
K24162:	SOB	R1, K24142		; repeat
K24164:	JMP	K13422
;
; Table??
K24170:
	.BYTE	033, 007, 106
	.BYTE	000, 014, 107
	.BYTE	033, 000, 110
	.BYTE	026, 030, 113
	.BYTE	026, 030, 114
	.BYTE	033, 016, 113
	.BYTE	033, 016, 114
	.BYTE	015, 016, 136
	.BYTE	033, 015, 070
	.BYTE	033, 011, 071
	.BYTE	033, 005, 053
	.BYTE	007, 033, 070
	.BYTE	022, 031, 100
	.BYTE	031, 014, 100
	.BYTE	017, 034, 070
	.BYTE	017, 005, 070
	.BYTE	017, 034, 100
	.BYTE	015, 003, 103
	.BYTE	023, 036, 101
	.BYTE	035, 037, 102
	.BYTE	026, 026, 104
	.BYTE	026, 026, 105
;
; End of the room sequence
K24272:	MOV	#K24352, <K13422+2>		; set return point
K24300:	MOV	#K24170, R4
K24304:	MOV	#000032, R1		; 26.
K24310:	CMPB	K36214, (R4)		; <  check room number
K24314:	BNE	K24360
K24316:	CMPB	036215, 000001(R4)
K24324:	BNE	K24360
K24326:	CLR	R0
K24330:	BISB	000002(R4), R0
K24334:	ASL	R0
K24336:	MOV	013426(R0), R3
K24342:	PUSH	R4
K24344:	PUSH	R1
K24346:	PUSH	R3
K24350:	JMP	(R3)
K24352:	POP	R3
K24354:	POP	R1
K24356:	POP	R4
K24360:	ADD	#000003, R4
K24364:	SOB	R1, K24310		; repeat
K24366:	MOV	#013414, <K13422+2>
K24374:	CMPB	K36214, #000037		; check room number
K24402:	BNE	K24436
K24404:	MOV	#000400, R1
K24410:	MOV	#126463, R3
K24414:	MOV	#127563, R2
K24420:	CMPB	(R3), #000307
K24424:	BHIS	K24430
K24426:	CLRB	(R2)
K24430:	DEC	R3
K24432:	DEC	R2
K24434:	SOB	R1, K24420
K24436:	MOV	#K23030, R4
K24442:	MOV	#000041, R1		; 33.
K24446:	CMPB	K36214, (R4)		; <  check room number
K24452:	BNE	K24556
K24454:	CMPB	K36215, 000001(R4)
K24462:	BNE	K24556
K24464:	MOVB	000002(R4), K01610
K24472:	MOVB	000003(R4), K01611
K24500:	MOV	K01610, R3
K24504:	ADD	#K43310, R3		; + base address tiles for current room
K24510:	MOVB	(R3), R0
K24512:	INCB	R0
K24514:	BNE	K24530
K24516:	MOVB	#000051, (R3)
K24522:	MOVB	#000052, 000001(R3)
K24530:	SUB	#001100, R3
K24534:	MOVB	#000144, (R3)+
K24540:	MOVB	#000144, (R3)
K24544:	MOV	R4, R3
K24546:	ADD	#000004, R3
K24552:	MOV	R3, K23746
K24556:	ADD	#000016, R4		; 14.
K24562:	SOB	R1, K24446		; repeat
K24564:	CALL	K02202			; Show the room on the screen
K24570:	MOVB	K17635, R0
K24574:	DECB	R0
K24576:	BNE	K24620
K24600:	MOV	#K24616, R3
K24604:	MOV	#050063, R2
K24610:	MOV	#000001, R1
K24614:	BR	K24646
;
K24616:	.WORD	177777	;???
;
K24620:	DECB	R0
K24622:	BNE	K24662
K24624:	MOV	#000040, 002010
K24632:	MOV	#K17666, R3		; "OLONEL BRIGGSY  EXPLORER"
K24636:	MOV	#040023, R2
K24642:	MOV	#000022, R1		; 18.
K24646:	CALL	K01704
K24652:	MOV	#000001, 002010
K24660:	BR	K24764
K24662:	DECB	R0
K24664:	BNE	K24764
K24666:	MOV	#000040, 002010
K24674:	MOV	#017710, R3
K24700:	MOV	#040023, R2
K24704:	MOV	#000006, R1
K24710:	BR	K24646
K24712:	MOV	024746, R3
K24716:	MOV	#000004, R1
K24722:	MOVB	(R2)+, (R3)+
K24724:	SOB	R1, K24722
K24726:	SUB	#001100, R3
K24732:	MOV	#000004, R1
K24736:	MOVB	#000001, -(R3)
K24742:	SOB	R1, K24736
K24744:	RETURN
;
K24746:
	.BYTE	041, 255, 000, 012, 157, 157, 157, 157
	.BYTE	322, 323, 323, 325
K24762:	.BYTE	000, 000
;
K24764:	CALL	K46120			; Fill Ninja tile screen
K24770:	MOV	#L24324, R3
K24774:	MOV	#000220, R1
K25000:	CLR	(R3)+			; <
K25002:	CLR	(R3)+
K25004:	SOB	R1, K25000		; repeat
K25006:	MOV	#000001, R1
K25012:	MOV	#L30724, R3		; Enemy 0 tile screen address
K25016:	SUB	#004400, R3
K25022:	MOV	#000001, R0
K25026:	MOVB	R0, (R3)		; <
K25030:	INC	R3			; | WARN: mutable command
K25032:	SOB	R1, K25026		; repeat
K25034:	MOVB	R0, <K25006+2>
K25040:	MOV	013334, R3
K25044:	CMPB	(R3), #000072
K25050:	BNE	K25072
K25052:	MOV	#000006, R1
K25056:	MOV	#K26660, R2		; " LIFT "
K25062:	MOV	#126665, R3
K25066:	CALL	K04604			; Draw string as tiles
K25072:	CMPB	(R3), #000074
K25076:	BNE	K25120
K25100:	MOV	#000006, R1
K25104:	MOV	#K26660, R2		; " LIFT "
K25110:	MOV	#126700, R3
K25114:	CALL	K04604			; Draw string as tiles
K25120:	CMPB	(R3), #000236
K25124:	BNE	K25216
K25126:	MOV	#024752, R2
K25132:	CALL	K24712
K25136:	MOV	#024751, R3
K25142:	TSTB	024750
K25146:	BEQ	K25172
K25150:	INCB	(R3)
K25152:	INC	024746
K25156:	CMPB	#000023, (R3)
K25162:	BNE	K25206
K25164:	DECB	024750
K25170:	BR	K25206
K25172:	DEC	024746
K25176:	DECB	(R3)
K25200:	BNE	K25206
K25202:	INCB	024750
K25206:	MOV	#024756, R2
K25212:	CALL	K24712
K25216:	CALL	L10200
K25222:	CALL	K36220
K25226:	CALL	L10236
K25232:	CLR	R1
K25234:	CMPB	050156, #000144
K25242:	BNE	K25250
K25244:	MOVB	@K23746, R1		; get new NEAR value
K25250:	MOV	R1, R0
K25252:	MOV	#K33465, R3		; NEAR value address
K25256:	MOVB	(R3), R5		; get NEAR value
K25260:	MOVB	R0, (R3)		; set new NEAR value
K25262:	CMPB	R0, R5			; compare old/new NEAR values
	BEQ	K25272			; same, no need to update => jump
	CALL	K04674			; Update NEAR indicator
K25272:	JMP	@#000000		;WARN: mutable argument
;
K25276:	CALL	K36266
K25302:	CALL	K36220
K25306:	CALL	K46150			; Fill Enemy 0/1 tile screens
K25312:	MOVB	036211, R0
K25316:	ADD	#000007, R0
K25322:	CMPB	R0, #000010
K25326:	BLO	K25362
K25330:	MOV	K36212, R3
K25334:	MOV	#126566, R2
K25340:	CALL	K55630
K25344:	ADD	R2, R3
K25346:	MOV	#000002, R1
K25352:	TSTB	(R3)
K25354:	BNE	K25362
K25356:	CALL	L14472
K25362:	MOVB	077520, R0
K25366:	INCB	R0
K25370:	BIC	#177774, R0
K25374:	MOVB	R0, 077520
K25400:	ASL	R0
K25402:	MOV	077506(R0), 077516
K25410:	MOVB	077530, R0
K25414:	INCB	R0
K25416:	CMPB	R0, #000003
K25422:	BNE	K25426
K25424:	CLR	R0
K25426:	MOVB	R0, 077530
K25432:	ASL	R0
K25434:	MOV	077522(R0), R3
K25440:	MOV	R3, <K27556+2>
K25444:	MOV	#033543, R4
K25450:	MOV	#000145, R1
K25454:	PUSH	R1
K25456:	MOV	#000007, R1
K25462:	MOVB	#000006, K01604
K25470:	MOVB	000013(R4), R0
K25474:	CMPB	R0, #000001
K25500:	BNE	K25506
K25502:	CALL	K32176
K25506:	CMPB	R0, #000006
K25512:	BNE	K25520
K25514:	CALL	K32176
K25520:	CMPB	R0, #000004
K25524:	BNE	K25532
K25526:	CALL	K32176
K25532:	CMPB	R0, #000011
K25536:	BNE	K25544
K25540:	CALL	K32176
K25544:	CMPB	R0, #000012
K25550:	BNE	K25556
K25552:	CALL	K32176
K25556:	CALL	K36072
K25562:	CALL	K26572
K25566:	MOV	R4, R3
K25570:	ADD	#000003, R3
K25574:	MOV	R3, 047720
K25600:	MOV	R3, 055316
K25604:	MOVB	K36214, R1		; get room number
K25610:	MOVB	(R4), R0
K25612:	BIC	#177600, R0
K25616:	CMPB	R0, R1
K25620:	BNE	K25646
K25622:	CMPB	036215, 000002(R4)
K25630:	BNE	K25646
K25632:	CALL	L10200
K25636:	CALL	K36112
K25642:	CALL	L10236
K25646:	MOVB	K36214, R1		; get room number
K25652:	MOVB	(R4), R0
K25654:	BIC	#177600, R0
K25660:	SUB	R1, R0
K25662:	ADD	#000003, R0
K25666:	CMPB	R0, #000006
K25672:	BLO	K25700
K25674:	JMP	K30606
K25700:	MOVB	036215, R0
K25704:	CLR	R5
K25706:	BISB	000002(R4), R5
K25712:	SUB	R5, R0
K25714:	ADD	#000006, R0
K25720:	CMPB	R0, #000014
K25724:	BLO	K25732
K25726:	JMP	K30606
K25732:	CMPB	000013(R4), #000002
K25740:	BLO	K25746
K25742:	JMP	K26310
K25746:	MOVB	000001(R4), R1
K25752:	MOVB	000004(R4), K01611
K25760:	MOVB	000003(R4), K01610
K25766:	MOV	K01610, R3
K25772:	MOVB	#177777, 001607
K26000:	TSTB	(R4)
K26002:	BPL	K26060
K26004:	CALL	K01314
K26010:	BIC	#177774, R0		; 0..3
K26014:	BEQ	K26060
K26016:	INCB	001607
K26022:	MOVB	000001(R4), R0
K26026:	ADD	#000012, R0
K26032:	MOVB	R0, 001606
K26036:	MOVB	K36210, R0
K26042:	ADD	#000012, R0
K26046:	CMPB	R0, 001606
K26052:	BHIS	K26060
K26054:	INCB	001607
K26060:	TSTB	K36264
K26064:	BEQ	K26210
K26066:	CMPB	000002(R4), 000005(R4)
K26074:	BNE	K26160
K26076:	CMPB	000006(R4), R1
K26102:	BNE	K26160
K26104:	DECB	001607
K26110:	BEQ	K26132
K26112:	MOVB	000013(R4), R0
K26116:	ASL	R0
K26120:	ADD	#000007, R0
K26124:	MOVB	R0, 000013(R4)
K26130:	BR	K26310
K26132:	CALL	K01314
K26136:	BIC	#177770, R0		; 0..7
K26142:	ADD	#000003, R0
K26146:	MOVB	R0, K26670
K26152:	MOV	#000014, R0
K26156:	BR	K26124
K26160:	DECB	R1
K26162:	DEC	R3
K26164:	CMPB	#000374, R1
K26170:	BNE	K26264
K26172:	MOV	#000034, R1
K26176:	ADD	#000040, R3
K26202:	DECB	000002(R4)
K26206:	BR	K26264
K26210:	CMPB	000002(R4), 000007(R4)
K26216:	BNE	K26236
K26220:	CMPB	000010(R4), R1
K26224:	BNE	K26236
K26226:	INCB	001607
K26232:	JMP	K26104
K26236:	INCB	R1
K26240:	INC	R3
K26242:	CMPB	#000036, R1
K26246:	BNE	K26264
K26250:	MOV	#000376, R1
K26254:	SUB	#000040, R3
K26260:	INCB	000002(R4)
K26264:	MOV	R3, K01610
K26270:	MOVB	K01610, 000003(R4)
K26276:	MOVB	K01611, 000004(R4)
K26304:	MOVB	R1, 000001(R4)
K26310:	MOVB	K36214, R1		; get room number
K26314:	MOVB	(R4), R0
K26316:	BIC	#177600, R0
K26322:	CMPB	R0, R1
K26324:	BEQ	K26332
K26326:	JMP	K30606
K26332:	CMPB	036215, 000002(R4)
K26340:	BEQ	K26346
K26342:	JMP	K30606
K26346:	CALL	L10200
K26352:	CALL	K36112
K26356:	CALL	L10236
K26362:	MOV	#000001, R0
K26366:	TSTB	000011(R4)
K26372:	BPL	K26376
K26374:	INC	R0
K26376:	MOV	#K26672, R3
K26402:	CMPB	R0, (R3)
K26404:	BNE	K26546
K26406:	MOVB	000013(R4), R0
K26412:	CMPB	R0, #000005
K26416:	BEQ	K26546
K26420:	CMPB	R0, #000006
K26424:	BEQ	K26546
K26426:	MOV	#000002, R1
K26432:	CALL	L10244
K26436:	CALL	L15650			; Sound
K26442:	MOV	#026666, R3
K26446:	DECB	(R3)
K26450:	BEQ	K26464
K26452:	CALL	K01314
K26456:	BIC	#177774, R0
K26462:	BNE	K26546
K26464:	MOVB	#000005, (R3)
K26470:	MOVB	000013(R4), R0
K26474:	MOV	#000006, R1
K26500:	CMPB	R0, #000004
K26504:	BEQ	K26532
K26506:	CMPB	R0, #000001
K26512:	BEQ	K26532
K26514:	CMPB	R0, #000011
K26520:	BEQ	K26532
K26522:	CMPB	R0, #000012
K26526:	BEQ	K26532
K26530:	DECB	R1
K26532:	MOVB	R1, 000013(R4)
K26536:	MOV	#000012, R1
K26542:	CALL	L10244
K26546:	CLR	R0
K26550:	BISB	000013(R4), R0
K26554:	ASL	R0
K26556:	MOV	K26626(R0), R3
K26562:	MOVB	K36264, R0
K26566:	MOVB	R0, R1
K26570:	JMP	(R3)
;
K26572:	TSTB	000011(R4)
K26576:	BMI	K26602
K26600:	RETURN
K26602:	SWAB	K26670
K26606:	MOV	K26674, R3
K26612:	MOV	K26676, K26674
K26620:	MOV	R3, K26676
K26624:	RETURN
;
; Table?? jump addresses
K26626:
	.WORD	K26720, K27470, K27670, K30324, K30422, K30310, K30316, K30222
	.WORD	K30236, K30260, K30274, K30406, K30014
K26660:	.ASCII	/@LIFT@/
K26666:	.WORD	000005
K26670:	.WORD	000000
K26672:	.WORD	000000
K26674:	.WORD	000000
K26676:	.WORD	000000
K26700:	.WORD	000012, 004012, 000012, 000010, 004010, 000011, 004011, 000011
;
K26720:	MOV	#127771, R3
K26724:	TSTB	R0
K26726:	BEQ	K26734
K26730:	MOV	#127764, R3
K26734:	MOVB	000003(R4), 001606
K26742:	MOVB	000004(R4), 001607
K26750:	ADD	001606, R3
K26754:	MOVB	050137, R0
K26760:	INCB	R0
K26762:	BEQ	K27026
K26764:	MOVB	(R3), R0
K26766:	INCB	R0
K26770:	BEQ	K27026
K26772:	MOV	R3, K26674
K26776:	MOVB	#000002, 000013(R4)
K27004:	MOVB	#000003, K26670
K27012:	CALL	K01314
K27016:	RORB	R0
K27020:	BLO	K27026
K27022:	JMP	K27460
;
K27026:	MOVB	050131, R0
K27032:	INCB	R0
K27034:	BEQ	K27106
K27036:	MOV	#127731, R3
K27042:	TSTB	R1
K27044:	BEQ	K27052
K27046:	MOV	#127724, R3
K27052:	ADD	001606, R3
K27056:	MOVB	(R3), R0
K27060:	INCB	R0
K27062:	BEQ	K27106
K27064:	MOV	R3, K26674
K27070:	MOVB	#000002, K26670
K27076:	MOVB	#000013, 000013(R4)
K27104:	BR	K27460
K27106:	CALL	K01314
K27112:	BIC	#177770, R0
K27116:	BNE	K27454
K27120:	MOVB	K33475, R0
K27124:	BNE	K27454
K27126:	MOVB	050136, R0
K27132:	INCB	R0
K27134:	BEQ	K27454
K27136:	MOV	#036211, R3
K27142:	MOVB	000011(R4), R0
K27146:	BIC	#177700, R0
K27152:	MOVB	(R3), R5
K27154:	SUB	R5, R0
K27156:	ADD	#000004, R0
K27162:	CMPB	R0, #000011
K27166:	BHIS	K27454
K27170:	MOVB	000003(R4), K01610
K27176:	MOVB	000004(R4), K01611
K27204:	MOV	K01610, R3
K27210:	ADD	#000144, R3
K27214:	MOVB	#000004, 001605
K27222:	MOVB	#000010, K01604
K27230:	CLRB	001607
K27234:	MOVB	000001(R4), R0
K27240:	ADD	#000012, R0
K27244:	MOVB	R0, 001606
K27250:	MOVB	036210, R0
K27254:	ADD	#000012, R0
K27260:	CMPB	R0, 001606
K27264:	BHIS	K27316
K27266:	MOVB	#000001, 001605
K27274:	MOVB	#000004, K01604
K27302:	MOVB	#000001, 001607
K27310:	DEC	R3
K27312:	DEC	R3
K27314:	DEC	R3
K27316:	MOVB	K36264, R0
K27322:	CMPB	R0, 001607
K27326:	BNE	K27454
K27330:	MOVB	000001(R4), R0
K27334:	MOVB	001605, K36202
K27342:	ADD	036202, R0
K27346:	MOVB	R0, K33477
K27352:	MOV	R3, K01610
K27356:	MOVB	K01610, K33500
K27364:	MOVB	K01611, K33501
K27372:	MOVB	K01604, R0
K27376:	MOVB	R0, K33502
K27402:	MOVB	R0, K33503
K27406:	MOVB	#000324, K33475
K27414:	MOVB	000011(R4), R0
K27420:	BIC	#177700, R0
K27424:	ADD	#000003, R0
K27430:	MOVB	R0, K33476
K27434:	MOVB	#000002, 000013(R4)
K27442:	MOVB	#000001, K26670
K27450:	JMP	K27460
K27454:	CALL	K27566
K27460:	MOV	077516, R3
K27464:	JMP	K30450
;
K27470:	MOV	#127672, R3
K27474:	TSTB	R1
K27476:	BEQ	K27504
K27500:	MOV	#127665, R3
K27504:	MOVB	050127, R0
K27510:	INCB	R0
K27512:	BEQ	K27552
K27514:	MOVB	000003(R4), 001606
K27522:	MOVB	000004(R4), 001607
K27530:	ADD	001606, R3
K27534:	MOVB	(R3), R0
K27536:	INCB	R0
K27540:	BEQ	K27552
K27542:	MOVB	#000004, 000013(R4)
K27550:	BR	K27556
K27552:	CALL	K27566
K27556:	MOV	#000000, R3
K27562:	JMP	K30450
K27566:	CALL	K01314
K27572:	BIC	#177774, R0
K27576:	BEQ	K27602
K27600:	RETURN
K27602:	MOVB	036210, R0
K27606:	ADD	#000004, R0
K27612:	MOVB	000001(R4), R5
K27616:	SUB	R5, R0
K27620:	MOV	#000001, R1
K27624:	SUB	#000004, R0
K27630:	TSTB	R0
K27632:	BMI	K27636
K27634:	DECB	R1
K27636:	MOVB	K36264, R0
K27642:	CMPB	R0, R1
K27644:	BNE	K27650
K27646:	RETURN
K27650:	MOVB	000013(R4), R0
K27654:	ASL	R0
K27656:	ADD	#000007, R0
K27662:	MOVB	R0, 000013(R4)
K27666:	RETURN
;
K27670:	MOV	#K26670, R3
K27674:	CMPB	#000002, (R3)
K27700:	BNE	K27734
K27702:	PUSH	R3
K27704:	MOV	K26674, R3
K27710:	MOVB	(R3), R0
K27712:	INCB	R0
K27714:	BEQ	K27732
K27716:	CALL	L15650			; Sound
K27722:	MOVB	#000014, R1
K27726:	CALL	L14472
K27732:	POP	R3
K27734:	DECB	(R3)
K27736:	BNE	K27744
K27740:	CLRB	000013(R4)
K27744:	MOV	#076606, R3
K27750:	JMP	K30450
K27754:	CMPB	(R2)+, -(R3)
K27756:	CMPB	(R2)+, -(R4)
K27760:	CMPB	(R2)+, -(R4)
K27762:	CMPB	(R2)+, -(R4)
K27764:	CMPB	(SP)+, -(R4)
K27766:	PUSH	R3
K27770:	MOV	#000000, R3
K27774:	INC	R3
K27776:	BIC	#040000, R3
K30002:	MOV	R3, <K27770+2>
K30006:	MOVB	(R3), R0
K30010:	POP	R3
K30012:	RETURN
;
K30014:
K30014:	MOV	#131072, R2
K30020:	MOV	#105205, R5		; command ??
K30024:	MOV	#005203, R0		; command ??
K30030:	CMPB	K36264, #000001
K30036:	BNE	K30054
K30040:	MOV	#131063, R2
K30044:	MOV	#105305, R5		; command ??
K30050:	MOV	#005303, R0		; command ??
K30054:	MOV	R0, K30170
K30060:	MOV	R0, K25030
K30064:	MOV	R5, K30174
K30070:	MOVB	000001(R4), R5
K30074:	DECB	R5
K30076:	MOVB	000003(R4), K01610
K30104:	MOVB	000004(R4), K01611
K30112:	MOV	K01610, R3
K30116:	ADD	R2, R3
K30120:	MOV	R3, <K25012+2>
K30124:	MOV	#027754, R2
K30130:	MOV	#000012, R1
K30134:	MOV	R1, <K25006+2>
K30140:	CMPB	R5, #000031
K30144:	BHIS	030170
K30146:	MOVB	174500(R3), R0
K30152:	CMPB	R0, #000307
K30156:	BHIS	030200
K30160:	MOVB	(R2), (R3)
K30162:	MOVB	#000001, 173400(R3)
K30170:	INC	R3
K30172:	INC	R2
K30174:	INCB	R5
K30176:	SOB	R1, K30140
K30200:	DECB	K26670
K30204:	BNE	K30214
K30206:	MOVB	#000007, 000013(R4)
K30214:	MOV	#076606, R3
K30220:	BR	K30450
;
K30222:	MOVB	#000010, 000013(R4)
K30230:	MOV	#077261, R3
K30234:	BR	K30450
;
K30236:	CLRB	000013(R4)
K30242:	MOV	#077261, R3
K30246:	MOV	#000001, R0
K30252:	XOR	R0, K36264
K30256:	BR	K30450
;
K30260:	MOVB	#000012, 000013(R4)
K30266:	MOV	#077037, R3
K30272:	BR	K30450
;
K30274:	MOVB	#000001, 000013(R4)
K30302:	MOV	#077037, R3
K30306:	BR	K30246
;
K30310:	MOV	#077403, R3
K30314:	BR	K30450
;
K30316:	MOV	#077455, R3
K30322:	BR	K30450
;
K30324:	MOV	#K26670, R3
K30330:	CMPB	#000001, (R3)
K30334:	BNE	K30370
K30336:	PUSH	R3
K30340:	MOV	K26674, R3
K30344:	MOVB	(R3), R0
K30346:	INCB	R0
K30350:	BEQ	K30366
K30352:	CALL	L15650			; Sound
K30356:	MOV	#000007, R1
K30362:	CALL	L14472
K30366:	POP	R3
K30370:	DECB	(R3)
K30372:	BNE	K30400
K30374:	CLRB	000013(R4)
K30400:	MOV	#077333, R3
K30404:	BR	K30450
;
K30406:	MOVB	#000003, 000013(R4)
K30414:	MOV	#076657, R3
K30420:	BR	K30450
;
K30422:	CALL	L15650			; Sound
K30426:	MOVB	#000006, R1
K30432:	CALL	L14472
K30436:	MOVB	#000001, 000013(R4)
K30444:	MOV	#076757, R3
;
K30450:	MOV	R3, <K30534+2>
K30454:	MOV	#036037, R3
K30460:	TSTB	000011(R4)
K30464:	BPL	K30470
K30466:	INC	R3
K30470:	MOVB	K36264, (R3)
K30474:	MOVB	000003(R4), K01610
K30502:	MOVB	000004(R4), K01611
K30510:	MOV	K01610, R3
K30514:	MOV	#L30724, R2		; Enemy 0 tile screen address
K30520:	TSTB	000011(R4)
K30524:	BPL	K30532
K30526:	MOV	#L32024, R2		; Enemy 1 tile screen address
K30532:	ADD	R2, R3
K30534:	MOV	#000000, R2
K30540:	MOV	#000007, R1
K30544:	MOVB	030604, K01604
K30552:	MOVB	000011(R4), R0
K30556:	BIC	#177600, R0
K30562:	MOVB	R0, 001607
K30566:	MOVB	000001(R4), R0
K30572:	CALL	K47660
K30576:	CALL	K36112
K30602:	BR	K30756
;
K30604:	.WORD	6
;
K30606:	MOVB	000013(R4), R0
K30612:	CMPB	R0, #000014
K30616:	BNE	K30630
K30620:	MOVB	#000007, 000013(R4)
K30626:	BR	K30756
K30630:	CMPB	R0, #000013
K30634:	BEQ	K30752
K30636:	CMPB	R0, #000011
K30642:	BNE	K30664
K30644:	MOV	#000001, R0
K30650:	XOR	R0, K36264
K30654:	MOVB	#000001, 000013(R4)
K30662:	BR	K30756
K30664:	CMPB	R0, #000007
K30670:	BNE	K30704
K30672:	MOV	#000001, R0
K30676:	XOR	R0, K36264
K30702:	BR	K30752
K30704:	CMPB	R0, #000006
K30710:	BEQ	K30756
K30712:	CMPB	R0, #000004
K30716:	BNE	K30730
K30720:	MOVB	#000001, 000013(R4)
K30726:	BR	K30756
K30730:	CMPB	R0, #000005
K30734:	BEQ	K30756
K30736:	CMPB	R0, #000012
K30742:	BEQ	K30720
K30744:	CMPB	R0, #000002
K30750:	BLO	K30756
K30752:	CLRB	000013(R4)
K30756:	MOV	#036212, R3
K30762:	MOV	R3, 047720
K30766:	MOV	R3, 055316
K30772:	CALL	K36072
K30776:	CALL	K26572
K31002:	ADD	#000014, R4
K31006:	MOV	#050115, R3
K31012:	MOV	R3, 055312
K31016:	MOVB	#000005, R0
K31022:	MOVB	R0, 055334
K31026:	INCB	R0
K31030:	MOVB	R0, K30604
K31034:	MOVB	R0, K36200
K31040:	INCB	R0
K31042:	MOVB	R0, <K30540+2>
K31046:	INCB	R0
K31050:	MOVB	R0, <K36142+2>
K31054:	MOVB	#000014, R0
K31060:	MOVB	R0, 055452
K31064:	MOVB	R0, 055436
K31070:	MOVB	#000032, R0
K31074:	MOVB	R0, 055446
K31100:	MOVB	R0, 055432
K31104:	POP	R1
K31106:	DECB	R1
K31110:	BEQ	K31116
K31112:	JMP	K25454
K31116:	CLRB	K26672
K31122:	CMP	#000240, K04114		; NOP command
K31130:	BEQ	K31212
K31132:	MOVB	042150, R0
K31136:	INCB	R0
K31140:	CMPB	R0, #000026
K31144:	BEQ	K31136
K31146:	CMPB	R0, #000030
K31152:	BNE	K31160
K31154:	MOV	#000023, R0
K31160:	MOVB	R0, 042150
K31164:	MOVB	R0, 042171
K31170:	MOVB	R0, 042212
K31174:	MOVB	#000001, R0
K31200:	MOV	#125150, R3
K31204:	MOVB	R0, (R3)+
K31206:	MOVB	R0, (R3)+
K31210:	MOVB	R0, (R3)
K31212:	MOV	013334, R3
K31216:	MOVB	(R3), R0
K31220:	CMPB	R0, #000356
K31224:	BNE	K31324
K31226:	MOV	#125633, R3
K31232:	MOV	#124533, R2
K31236:	MOVB	#000012, R1
K31242:	CALL	K01314
K31246:	BIC	#177774, R0
K31252:	ADD	#000117, R0
K31256:	MOVB	R0, (R3)+
K31260:	INC	R3
K31262:	MOVB	#000001, R0
K31266:	MOVB	R0, (R2)+
K31270:	INC	R2
K31272:	MOVB	R0, (R2)
K31274:	CALL	K01314
K31300:	BIC	#177774, R0
K31304:	ADD	#000122, R0
K31310:	MOVB	R0, (R3)
K31312:	ADD	#000036, R3
K31316:	ADD	#000036, R2
K31322:	SOB	R1, K31242
K31324:	MOVB	115646, R0
K31330:	BEQ	K31344
K31332:	DECB	R0
K31334:	MOVB	R0, 115646
K31340:	JMP	K31712
K31344:	CMPB	036214, #000037
K31352:	BNE	K31360
K31354:	JMP	K31712
K31360:	MOV	013334, R3
K31364:	MOVB	(R3), R0
K31366:	CMPB	R0, #000035
K31372:	BEQ	K31430
K31374:	CMPB	R0, #000043
K31400:	BEQ	K31430
K31402:	CMPB	R0, #000042
K31406:	BEQ	K31430
K31410:	CMPB	R0, #000046
K31414:	BEQ	K31430
K31416:	CMPB	R0, #000052
K31422:	BEQ	K31430
K31424:	JMP	K31712
K31430:	CALL	K27766
K31434:	BIC	#177700, R0
K31440:	INCB	R0
K31442:	CMPB	R0, #000005
K31446:	BHIS	031626
K31450:	MOV	#K33475, R3
K31454:	ADD	#000007, R3
K31460:	DECB	R0
K31462:	BNE	K31454
K31464:	MOVB	(R3), R0
K31466:	BNE	K31626
K31470:	MOVB	#000340, (R3)+
K31474:	MOVB	#000011, (R3)+
K31500:	CLRB	(R3)+
K31502:	MOVB	#000040, (R3)+
K31506:	MOVB	#000001, (R3)+
K31512:	CALL	K27766
K31516:	BIC	#177770, R0
K31522:	ASL	R0
K31524:	MOV	#026700, R4
K31530:	ADD	R0, R4
K31532:	MOVB	(R4), (R3)+
K31534:	MOVB	000001(R4), (R3)
K31540:	CALL	K27766
K31544:	BIC	#177776, R0
K31550:	BEQ	K31626
K31552:	MOV	#000014, R0
K31556:	MOVB	(R3), R5
K31560:	XOR	R0, R5
K31562:	MOVB	R5, (R3)
K31564:	MOVB	-(R3), R5
K31566:	XOR	R0, R5
K31570:	MOVB	R5, (R3)
K31572:	MOVB	-(R3), 001607
K31576:	MOVB	-(R3), 001606
K31602:	MOVB	#000037, -(R3)
K31606:	INC	R3
K31610:	ADD	#000037, 001606
K31616:	MOVB	001606, (R3)+
K31622:	MOVB	001607, (R3)
K31626:	MOV	#000004, R1
K31632:	MOV	#033504, R4
K31636:	MOV	#000007, R2
K31642:	MOVB	000001(R4), R0
K31646:	CMPB	R0, #000010
K31652:	BEQ	K31662
K31654:	CMPB	R0, #000012
K31660:	BNE	K31706
K31662:	MOVB	000005(R4), 001602
K31670:	MOV	#000003, R0
K31674:	XOR	R0, 001602
K31700:	MOVB	001602, 000005(R4)
K31706:	ADD	R2, R4
K31710:	SOB	R1, K31642
K31712:	MOV	#000006, R0
K31716:	MOV	#033466, R4
;
K31722:	MOVB	R0, K32300
K31726:	MOVB	(R4), R0
K31730:	BNE	K31736
K31732:	JMP	K32436
;
K31736:
K31736:	MOVB	000003(R4), K01610
K31744:	MOVB	000004(R4), K01611
K31752:	MOV	K01610, R3
K31756:	ADD	#L24324, R3
K31762:	MOVB	#000001, (R3)
K31766:	MOVB	000005(R4), R5
K31772:	PUSH	R1
K31774:	MOV	#000002, R1
K32000:	BIT	#000001, R5
K32004:	BEQ	K32012
K32006:	CALL	K33274
K32012:	BIT	#000002, R5
K32016:	BEQ	K32024
K32020:	CALL	K33362
K32024:	BIT	#000004, R5
K32030:	BEQ	K32036
K32032:	CALL	K33404
K32036:	BIT	#000010, R5
K32042:	BEQ	K32050
K32044:	CALL	K33424
K32050:	MOVB	000003(R4), K01610
K32056:	MOVB	000004(R4), K01611
K32064:	MOV	K01610, R3
K32070:	ADD	#L25424, R3		; Back tile screen address
K32074:	CMPB	(R3), #000307
K32100:	BLO	K32112
K32102:	CLRB	(R4)
K32104:	POP	R1
K32106:	JMP	K32436
K32112:	ADD	#003300, R3
K32116:	CMPB	032300, #000006
K32124:	BNE	K32146
K32126:	MOVB	(R3), R0
K32130:	INCB	R0
K32132:	BEQ	K32146
K32134:	MOV	#000001, R0
K32140:	MOVB	R0, K26672
K32144:	BR	K32102
K32146:	ADD	#001100, R3
K32152:	CMPB	032300, #000006
K32160:	BNE	K32302
K32162:	MOVB	(R3), R0
K32164:	INCB	R0
K32166:	BEQ	K32302
K32170:	MOV	#000002, R0
K32174:	BR	K32140
;
; Procedure: ??
K32176:
K32176:	MOV	#000007, R0
K32202:	MOV	#050116, 055312
K32210:	MOVB	R0, 055334
K32214:	INCB	R0
K32216:	MOVB	R0, K30604
K32222:	MOVB	R0, K36200
K32226:	MOV	#000003, R0
K32232:	MOVB	R0, <K30540+2>
K32236:	INCB	R0
K32240:	MOVB	R0, <K36142+2>
K32244:	MOV	#000020, R0
K32250:	MOVB	R0, 055452
K32254:	MOVB	R0, 055436
K32260:	MOV	#000030, R0
K32264:	MOVB	R0, 055446
K32270:	MOVB	R0, 055432
K32274:	CLR	R0
K32276:	RETURN
;
K32300:	.WORD	0		;???
;
K32302:	SUB	#002200, R3
K32306:	CMPB	032300, #000006
K32314:	BEQ	K32350
K32316:	CMPB	(R3), #000340
K32322:	BHIS	032350
K32324:	MOV	#000005, R1
K32330:	CALL	L14472
K32334:	CALL	L15650			; Sound
K32340:	CMPB	(R4), #000340
K32344:	BLO	K32102
K32346:	BR	K32364
K32350:	MOVB	000006(R4), R5
K32354:	DECB	R1
K32356:	BEQ	K32364
K32360:	JMP	K32000
K32364:	POP	R1
K32366:	MOVB	000003(R4), K01610
K32374:	MOVB	000004(R4), K01611
K32402:	MOV	K01610, R3
K32406:	ADD	#L27624, R3		; Ninja tile screen address
K32412:	MOVB	(R4), (R3)
K32414:	RORB	(R4)
K32416:	BHIS	032422
K32420:	TST	#000261
K32424:	ROLB	(R4)
K32426:	SUB	#003300, R3
K32432:	MOVB	#000001, (R3)
;
K32436:	ADD	#000007, R4
K32442:	MOVB	032300, R0
K32446:	DECB	R0
K32450:	BEQ	K32456
K32452:	JMP	K31722
K32456:	TSTB	K36214			; check room number
K32462:	BNE	K32542
K32464:	MOVB	K36210, R2
K32470:	ADD	#000060, R2
K32474:	ADD	#000156, R2
K32500:	MOV	R2, K40276
K32504:	MOVB	#005, 040300
K32512:	MOV	#040301, R2
K32516:	MOV	#L26524, R1		; Front tile screen address??
K32522:	CALL	K40356
K32526:	MOV	#046162, R2
K32532:	MOV	#L24324, R1
K32536:	CALL	K40356
K32542:	TSTB	014640
K32546:	BEQ	K32736
K32550:	MOV	#014641, R4
K32554:	DECB	(R4)
K32556:	BNE	K32612
K32560:	CALL	K27766
K32564:	MOVB	R0, (R4)
K32566:	BIC	#177774, R0
K32572:	BNE	K32624
K32574:	CALL	K27766
K32600:	BIC	#177774, R0
K32604:	ADD	#000004, R0
K32610:	BR	K32650
K32612:	MOVB	000001(R4), R0
K32616:	BIT	#000004, R0
K32622:	BNE	K32650
K32624:	CALL	K27766
K32630:	BIC	#177774, R0
K32634:	CMPB	R0, 000001(R4)
K32640:	BNE	K32650
K32642:	INCB	R0
K32644:	BIC	#177774, R0
K32650:	MOVB	R0, 000001(R4)
K32654:	ASL	R0
K32656:	ASL	R0
K32660:	MOV	R0, R1
K32662:	ASL	R0
K32664:	ADD	R1, R0
K32666:	MOV	R0, R2
K32670:	ADD	#014500, R2
K32674:	MOV	#125631, R3
K32700:	MOV	#124531, R4
K32704:	MOV	#000003, R5
K32710:	MOV	#000004, R1
K32714:	MOVB	(R2)+, (R3)+
K32716:	MOVB	#000001, (R4)+
K32722:	SOB	R1, K32714
K32724:	ADD	#000034, R4
K32730:	ADD	#000034, R3
K32734:	SOB	R5, K32710
;
K32736:	MOV	K36212, R3
K32742:	ADD	#126666, R3
K32746:	MOVB	#000050, R0
K32752:	CMPB	(R3), #000212
K32756:	BNE	K32764
K32760:	MOV	#000030, R0
K32764:	MOVB	R0, 046013
K32770:	MOVB	R0, 046034
K32774:	MOVB	R0, 046055
K33000:	CALL	K02202			; Show the room on the screen
K33004:	TSTB	K36216
K33010:	BEQ	K33052
K33012:	CALL	K01314
K33016:	BIC	#177770, R0
K33022:	CMPB	R0, #000001
K33026:	BEQ	K33012
K33030:	CMPB	R0, #000004
K33034:	BEQ	K33012
K33036:	MOVB	R0, 003542
K33042:	MOV	#000024, R1
K33046:	CALL	L14472
;
K33052:	TSTB	K33540
K33056:	BEQ	K33114
K33060:	TSTB	K33542
K33064:	BNE	K33114
K33066:	MOV	#047606, R2
K33072:	MOVB	#000001, K33542
K33100:	MOV	#K54302, R3
K33104:	MOV	R2, <K36276+2>
K33110:	MOV	R3, <K25272+2>		; set JMP address
K33114:	CMPB	K33540, #000002
K33122:	BEQ	K33270
; Update TIMER counter
K33124:	MOV	#K36207, R3		; TIMER counter address
K33130:	DECB	(R3)
K33132:	BNE	K33270
K33134:	MOVB	#000024, (R3)		; reset the counter
K33140:	DECB	-(R3)			; decrement
K33142:	CMPB	#000057, (R3)		; less than '0' ?
K33146:	BNE	K33250
K33150:	MOVB	#000071, (R3)		; '9'
K33154:	DECB	-(R3)			; decrement
K33156:	CMPB	#000057, (R3)		; less than '0' ?
K33162:	BNE	K33250
K33164:	MOVB	#000071, (R3)		; '9'
K33170:	DECB	-(R3)			; decrement
K33172:	MOVB	(R3), R0
K33174:	CMPB	R0, #000060		; '0' ?
K33200:	BNE	K33232
K33202:	PUSH	R0
K33204:	PUSH	R3
K33206:	MOV	#050146, R2		; screen address
K33212:	MOV	#K33446, R3		; "TIME IS SHORT "
K33216:	MOV	#000016, R1		; 14.
K33222:	CALL	K01704			; Print string
K33226:	POP	R3
K33230:	POP	R0
K33232:	CMPB	R0, #000057		; less than '0' ?
K33236:	BNE	K33250
K33240:	MOVB	#000002, K33540
K33246:	BR	K33270
K33250:	MOV	#050226, R2		; screen address
K33254:	MOV	#K36204, R3		; TIMER value 3-char
K33260:	MOV	#000003, R1		; 3.
K33264:	CALL	K01704			; Print string
K33270:	JMP	K24764
;
K33274:	TSTB	000001(R4)
K33300:	BEQ	K33350
K33302:	DECB	000001(R4)
K33306:	MOV	#177740, R2
K33312:	MOVB	000003(R4), K01610
K33320:	MOVB	000004(R4), K01611
K33326:	ADD	R2, K01610
K33332:	MOVB	K01610, 000003(R4)
K33340:	MOVB	K01611, 000004(R4)
K33346:	RETURN
K33350:	CLRB	(R4)
K33352:	TST	(SP)+
K33354:	TST	(SP)+
K33356:	JMP	K32436
;
K33362:	CMPB	#000021, 000001(R4)
K33370:	BEQ	K33350
K33372:	INCB	000001(R4)
K33376:	MOV	#000040, R2
K33402:	BR	K33312
K33404:	TSTB	000002(R4)
K33410:	BEQ	K33350
K33412:	DECB	000002(R4)
K33416:	MOV	#177777, R2
K33422:	BR	K33312
K33424:	CMPB	#000037, 000002(R4)
K33432:	BEQ	K33350
K33434:	INCB	000002(R4)
K33440:	MOV	#000001, R2
K33444:	BR	K33312
;
K33446:	.ASCII	/TIME IS SHORT /

K33464:	.BYTE	1			; HELD value
K33465:	.BYTE	0			; NEAR value
K33466:	.BYTE	0
K33467:	.BYTE	0
K33470:	.BYTE	0
K33471:	.BYTE	0
K33472:	.BYTE	0
K33473:	.BYTE	0
K33474:	.BYTE	0
K33475:	.BYTE	0
K33476:	.BYTE	010
K33477:	.BYTE	031
K33500:	.BYTE	031
K33501:	.BYTE	001
K33502:	.BYTE	0
K33503:	.BYTE	0
	.WORD	004000, 013427, 000001, 000000, 013410
	.WORD	000427, 000000, 004000, 013427, 000001, 000000, 013410, 000427
	.WORD	000000

K33540:	.BYTE	0			; Energy?? Alive?
	.EVEN
K33542:	.BYTE	0			; Energy?? Alive?
;
;K33543:			; 3763..3c21 - 1215. bytes
.INCLUDE /S23763.MAC/

K36040:	.BYTE	000,000
;
; Procedure: ??
K36042:	MOVB	036037, R0
K36046:	MOVB	K36264, 036037
K36054:	BR	K36104
;
; Procedure: ??
K36056:	MOVB	K36040, R0
K36062:	MOVB	K36264, K36040
K36070:	BR	K36104
;
; Procedure: ??
K36072:	MOVB	000012(R4), R0
K36076:	MOVB	K36264, 000012(R4)
K36104:	MOVB	R0, K36264
K36110:	RETURN
;
; Procedure: ??
K36112:	MOVB	000004(R4), K01611
K36120:	MOVB	000003(R4), K01610
K36126:	MOV	K01610, R3
K36132:	ADD	#L24324, R3
K36136:	MOV	#046162, R2
K36142:	MOV	#000010, R1
K36146:	MOVB	036200, K01604
K36154:	MOVB	000011(R4), 001607
K36162:	BICB	#177600, 001607
K36170:	MOVB	000001(R4), R0
K36174:	JMP	K47660
;
K36200:	.WORD	000006
K36202:	.WORD	000000
;
K36204:	.ASCII	/999/			; TIMER current value, 3-char
K36207:	.BYTE	012			; TIMER counter
K36210:	.BYTE	012			; ??
K36211:	.BYTE	012
K36212:	.BYTE	112			; ??
K36213:	.BYTE	001
K36214:	.BYTE	0			; room number
K36215:	.BYTE	0			; ??
K36216:	.BYTE	0			; ??
	.EVEN
;
; Procedure: ??
K36220:	MOV	036212, R3
K36224:	ADD	#L24324, R3
K36230:	MOV	#046162, R2
K36234:	MOV	#000010, R1
K36240:	MOVB	#000006, K01604
K36246:	MOVB	036211, 001607
K36254:	MOVB	036210, R0
K36260:	JMP	K47660
;
K36264:	.WORD	0			; mirroring flag
;
; Procedure: ??
K36266:	MOV	036212, R3
K36272:	ADD	#L27624, R3		; Ninja tile screen address
K36276:	MOV	#000000, R2		;WARN: mutable argument
K36302:	MOV	#000007, R1
K36306:	BR	K36240
;
; Procedure: ??
K36310:	MOVB	K36264, R2
K36314:	ASL	R2
K36316:	BIC	#177400, R2
K36322:	DEC	R2
K36324:	MOVB	036210, R0
K36330:	ADD	R2, R0
K36332:	MOVB	R0, K36210
K36336:	ADD	R2, K36212
K36342:	RETURN
K36344:	MOVB	036210, R0
K36350:	TSTB	K36264
K36354:	BEQ	K36374
K36356:	CMPB	R0, #000035
K36362:	BEQ	K36366
K36364:	RETURN
K36366:	POP	R3
K36370:	JMP	K37746
K36374:	CMPB	R0, #000375
K36400:	BEQ	K36404
K36402:	RETURN
K36404:	POP	R3
K36406:	JMP	K40012
K36412:	CALL	K40726
K36416:	CALL	K36344
K36422:	CALL	K37270
K36426:	CALL	K36310
K36432:	MOV	#000004, R1
K36436:	MOV	#050111, R3
K36442:	MOVB	(R3)+, R0
K36444:	INCB	R0
K36446:	CMPB	R0, #000310
K36452:	BHIS	036504
K36454:	SOB	R1, K36442
K36456:	DECB	036211
K36462:	SUB	#000040, K36212
K36470:	MOV	#037662, R3
K36474:	DECB	(R3)
K36476:	BEQ	K36504
K36500:	JMP	K25276
K36504:	MOVB	#000004, R0
;
K36510:	MOVB	R0, K37662
K36514:	MOV	#036546, R3
K36520:	MOV	#046352, R2
K36524:	CLRB	036534
K36530:	JMP	K55246
;
K36534:	.BYTE	0
	.EVEN
K36536:
	.WORD	046352, 046413, 046455, 046517
;
K36546:	MOVB	036534, R3
K36552:	INCB	R3
K36554:	BIC	#177774, R3
K36560:	MOVB	R3, K36534
K36564:	ASL	R3
K36566:	MOV	036536(R3), <K36276+2>
K36574:	BR	K36646
;
K36576:	MOV	#036612, R3
K36602:	MOV	#047462, R2
K36606:	JMP	K55246
;
K36612:	MOVB	050116, R0
K36616:	INCB	R0
K36620:	BEQ	K36646
K36622:	MOV	#130764, R2
K36626:	MOVB	K36264, R0
K36632:	DECB	R0
K36634:	BNE	K36642
K36636:	MOV	#130771, R2
K36642:	CALL	K51646
K36646:	CALL	K36344
K36652:	CALL	K37270
K36656:	CALL	K36310
K36662:	DECB	037662
K36666:	BEQ	K36674
K36670:	JMP	K25276
K36674:	MOVB	#000006, K37662
K36702:	MOV	#036712, R3
K36706:	JMP	K55252
K36712:	CALL	K54212
K36716:	CALL	K36344
K36722:	CALL	K37270
K36726:	MOVB	050162, R0
K36732:	INCB	R0
K36734:	CMPB	R0, #000310
K36740:	BLO	K36746
K36742:	JMP	K55262
K36746:	CALL	K50274
K36752:	BEQ	K36760
K36754:	JMP	K50744
K36760:	CALL	K36310
K36764:	INCB	036211
K36770:	ADD	#000040, K36212
K36776:	MOV	#047336, <K36276+2>
K37004:	DECB	037662
K37010:	BEQ	K37016
K37012:	JMP	K25276
K37016:	MOVB	#000031, R0
K37022:	MOVB	R0, K37662
K37026:	MOVB	#000001, R0
K37032:	MOVB	R0, 054512
K37036:	MOVB	R0, K33542
K37042:	MOV	#047606, R2
K37046:	MOV	#037060, R3
K37052:	JMP	K55246
;
K37056:	.WORD	0
;
K37060:	CALL	K54212
K37064:	CALL	K36344
K37070:	CALL	K50274
K37074:	BEQ	K37102
K37076:	JMP	K54510
K37102:	MOV	#054512, R3
K37106:	INCB	(R3)
K37110:	RORB	037056
K37114:	BHIS	037120
K37116:	TST	#000261
K37122:	ROLB	037056
K37126:	BNE	K37134
K37130:	JMP	K37164
K37134:	CALL	K37270
K37140:	MOVB	050162, R0
K37144:	INCB	R0
K37146:	CMPB	R0, #000310
K37152:	BLO	K37160
K37154:	JMP	K55262
K37160:	CALL	K36310
K37164:	INCB	036211
K37170:	ADD	#000040, K36212
K37176:	MOV	#037662, R3
K37202:	DECB	(R3)
K37204:	BEQ	K37212
K37206:	JMP	K25276
K37212:	MOV	#047606, R2
K37216:	JMP	K52152
K37222:	MOV	#000006, R1
K37226:	MOV	#050116, R3
K37232:	MOV	#000006, R2
K37236:	MOV	#000001, R5
K37242:	MOVB	(R3), R0
K37244:	INCB	R0
K37246:	CMPB	R0, #000310
K37252:	BHIS	037262
K37254:	ADD	R2, R3
K37256:	SOB	R1, K37242
K37260:	CLRB	R5
K37262:	DECB	R5
K37264:	INCB	R5
K37266:	RETURN
;
K37270:	CALL	K37222
K37274:	BNE	K37300
K37276:	RETURN
K37300:	POP	R3
K37302:	BR	K37212
K37304:	POP	R1
K37306:	CMPB	050163, #000007
K37314:	BEQ	K37520
K37316:	CMPB	050166, #000007
K37324:	BEQ	K37520
K37326:	PUSH	R1
K37330:	MOVB	#000005, R1
K37334:	CALL	K37226
K37340:	POP	R1
K37342:	TSTB	R5
K37344:	BEQ	K37352
K37346:	JMP	K55262
K37352:	MOVB	050154, R0
K37356:	INCB	R0
K37360:	CMPB	R0, #000310
K37364:	BHIS	037372
K37366:	JMP	K37412
K37372:	DECB	036211
K37376:	SUB	#000040, K36212
K37404:	CALL	K40726
K37410:	BR	K37520
K37412:	CMPB	050165, #000307
K37420:	BLO	K37426
K37422:	JMP	K37520
K37426:	CMPB	050162, #000307
K37434:	BLO	K37442
K37436:	JMP	K37520
K37442:	INCB	036211
K37446:	ADD	#000040, K36212
K37454:	CALL	K54212
K37460:	PUSH	R1
K37462:	CALL	L10200
K37466:	CALL	K36220
K37472:	CALL	L10236
K37476:	CALL	K50274
K37502:	POP	R1
K37504:	MOVB	#000005, R0
K37510:	TSTB	R5
K37512:	BNE	K37520
K37514:	JMP	K37022
K37520:	PUSH	R1
K37522:	RETURN
;
K37524:	CALL	K36344
K37530:	CALL	K37304
K37534:	CALL	K36310
K37540:	CALL	K41000
K37544:	CALL	K41176
K37550:	BIT	#000010, R0
K37554:	BEQ	K37636
K37556:	MOVB	#000001, R0
K37562:	MOVB	R0, K33542
K37566:	MOVB	R0, 054512
K37572:	MOVB	#000004, K37662
K37600:	MOV	#036412, R3
K37604:	MOV	#047336, R2
K37610:	JMP	K55246
;
K37614:	MOVB	#000005, K37662
K37622:	MOV	#036576, R3
K37626:	MOV	#047336, R2
K37632:	JMP	K55246
K37636:	BIT	#000020, R0
K37642:	BNE	K37614
K37644:	BIT	#000001, R0
K37650:	BNE	K37656
K37652:	JMP	K55262
K37656:	JMP	K25276
;
K37662:	.WORD	0
;
K37664:	CALL	K01612
K37670:	MOVB	#000036, K36215
K37676:	MOVB	#000030, K36214
K37704:	MOVB	#000005, K36211
K37712:	MOVB	#000004, K36210
K37720:	MOV	#000244, K36212
K37726:	MOV	#072230, <K13332+2>
K37734:	MOVB	#000002, 003542
K37742:	JMP	K13072
K37746:	MOV	013334, R3
K37752:	CMPB	(R3), #000101
K37756:	BEQ	K37664
K37760:	INCB	036215
K37764:	MOVB	#000375, K36210
K37772:	MOV	036212, R3
K37776:	SUB	#000040, R3
K40002:	MOV	#000001, R2
K40006:	JMP	K54262
;
K40012:	DECB	036215
K40016:	MOVB	#000035, K36210
K40024:	MOV	036212, R3
K40030:	ADD	#000040, R3
K40034:	MOV	#177777, R2
K40040:	JMP	K54262
K40044:	CALL	K36344
K40050:	CALL	K37304
K40054:	CALL	K36310
K40060:	CALL	K41000
K40064:	MOV	#K17200, R3
K40070:	MOVB	(R3), R0
K40072:	INCB	R0
K40074:	BEQ	K40230
K40076:	INCB	R0
K40100:	BEQ	K40230
K40102:	DECB	(R3)
K40104:	BEQ	K40112
K40106:	JMP	K25276
K40112:	MOV	#000021, R1		; 17.
K40116:	MOV	#K40164, R2		; " EXCELLENT VALUE "
K40122:	MOV	#127133, R3		; address
K40126:	CALL	K04604			; Draw string as tiles
K40132:	MOV	#000022, R1		; 18.
K40136:	MOV	#K40205, R2		; " YOU HAVE ESCAPED "
K40142:	MOV	#127273, R3		; address
K40146:	CALL	K04604			; Draw string as tiles
K40152:	MOVB	#000310, K17200
K40160:	JMP	K55262
;
K40164:	.ASCII	/@EXCELLENT@VALUE@/
K40205:	.ASCIZ	/@YOU@HAVE@ESCAPED@/
;
K40230:	CALL	K41176
K40234:	BIT	#000010, R0
K40240:	BEQ	K40246
K40242:	JMP	K37556
K40246:	BIT	#000020, R0
K40252:	BEQ	K40260
K40254:	JMP	K37614
K40260:	BIT	#000002, R0
K40264:	BNE	K40272
K40266:	JMP	K55262
K40272:	JMP	K25276
;
K40276:	.WORD	0
K40300:	.BYTE	0
	.BYTE	377
	.BYTE	377, 377, 377, 105, 106, 107, 110, 111, 112, 377
	.BYTE	113, 114, 115, 116, 117, 120, 121, 122, 123, 377
	.BYTE	377, 124, 125, 126, 127, 130, 131, 132, 133, 134
	.BYTE	135, 377, 377, 377, 377, 136, 137, 377, 140, 141
	.BYTE	377, 377, 377, 000
;
; Procedure: ??
K40356:	MOV	#040276, 047720
K40364:	MOV	040276, R3
K40370:	ADD	R1, R3
K40372:	MOV	#000004, R1
K40376:	MOVB	#000013, K01604
K40404:	MOVB	040300, 001607
K40412:	MOVB	036210, R0
K40416:	SUB	#000002, R0
K40422:	CALL	K47660
K40426:	MOV	#036212, 047720
K40434:	RETURN
;
K40436:	MOV	#K17202, 047720
K40444:	MOV	036212, R3
K40450:	ADD	#000076, R3
K40454:	MOV	R3, K17202
K40460:	ADD	R1, R3
K40462:	MOVB	#000005, R1
K40466:	MOVB	#000013, K01604
K40474:	MOVB	#000012, 001607
K40502:	MOVB	036210, R0
K40506:	SUB	#000002, R0
K40512:	CALL	K47660
K40516:	BR	K40426
;
K40520:	CMPB	K36210, #000375
K40526:	BNE	K40534
K40530:	JMP	K40012
K40534:	CALL	K36310
K40540:	CALL	K41176			; Check if we have a key pressed
K40544:	BIT	#000020, R0		; fire key?
K40550:	BNE	K40564
K40552:	DECB	037662
K40556:	BEQ	K40564
K40560:	JMP	K25276
K40564:	MOVB	#000001, R0
K40570:	JMP	K36510
;
K40574:	.WORD	0
;
K40576:	CMPB	036210, #000375
K40604:	BNE	K40612
K40606:	JMP	K40012
K40612:	CALL	K36310
K40616:	RORB	040574
K40622:	BHIS	040626
K40624:	TST	#000261
K40630:	ROLB	040574
K40634:	BNE	K40576
K40636:	MOV	#K17273, R2		; ??? 11x5 tiles
K40642:	MOV	#L26524, R1		; Front tile screen address??
K40646:	CALL	K40436
K40652:	MOV	#046162, R2
K40656:	MOV	#L24324, R1
K40662:	CALL	K40436
K40666:	DECB	037662
K40672:	BEQ	K40700
K40674:	JMP	K25276
K40700:	MOV	#K17204, R2		; ??? 11x5 tiles
K40704:	MOV	#L26524, R1		; Front tile screen address??
K40710:	CALL	K40436
K40714:	MOVB	#000020, K17200
K40722:	JMP	K55262
K40726:	MOVB	036211, R0
K40732:	CMPB	R0, #000371
K40736:	BEQ	K40742
K40740:	RETURN
K40742:	DECB	036214
K40746:	POP	R3
K40750:	ADD	#000022, R0
K40754:	MOVB	R0, K36211
K40760:	MOV	036212, R3
K40764:	ADD	#001100, R3
K40770:	MOV	#177740, R2
K40774:	JMP	K54262
K41000:	MOVB	046775, 001602
K41006:	MOV	#000233, R0
K41012:	XOR	R0, 001602
K41016:	MOVB	001602, 046775
K41024:	ADD	#000022, 041152
K41032:	MOVB	041172, R0
K41036:	INCB	R0
K41040:	CMPB	R0, #000004
K41044:	BNE	K41144
K41046:	MOV	#047030, 041152
K41054:	MOV	#000001, R5
K41060:	CMPB	050164, #000376
K41066:	BEQ	K41074
K41070:	MOV	#000012, R5
; Sound
K41074:	NOP3	;BIC	#000200, @#157706	; < sound timer
K41102:	NOP3	;BIS	#000140, @#157706	;   sound
K41110:	NOP3	;MOV	@#157706, @#177604	;   set SysRegC MS0515
K41116:	CLR	R0
K41120:	NOP3	;BIS	#000200, @#157706	;   sound timer
K41126:	NOP3	;BIC	#000140, @#157706	;   sound
K41134:	NOP3	;MOV	@#157706, @#177604	;   set SysRegC MS0515
K41142:	SOB	R5, K41074		; repeat
;
K41144:	MOVB	R0, 041172
K41150:	MOV	#000000, R3
K41154:	MOV	#047006, R2
K41160:	MOV	#000022, R1
K41164:	MOVB	(R3)+, (R2)+
K41166:	SOB	R1, K41164
K41170:	RETURN
;
K41172:	.WORD	001000, 000000
;
K41176:	NOP2	;MTPS	#000340			; disable interrupts
K41202:	PUSH	R3
K41204:	MOV	#K41304, R3
K41210:	MOVB	(R3)+, R0		; get input method; R3 = K41305
K41212:	DECB	R0
	BR	K41232
;
K41216:	MOVB	R0, 041340
K41222:	POP	R3
K41224:	NOP2	;MTPS	#000000			; enable interrupts
K41230:	RETURN
; If we have a key pressed, go through key mapping table
K41232:	PUSH	R1
	TSTB	@#177660	;БК	; do we have an unprocessed key?
	BPL	K41276		;БК	; no => jump
	NOP2	;CLR	001402			; mark as processed
	MOVB	@#177662, R0	;БК	; get the key
K41252:	MOV	#000011, R1		; 9.
K41256:	CMPB	(R3)+, R0		; <  matches the key?
K41260:	BNE	K41270			; |  no => jump
K41262:	INC	R3			; |
K41264:	MOVB	(R3), R0		; |  get the result byte
K41266:	BR	K41300			; |  break the loop
K41270:	ADD	#000002, R3		; |  to next key probe
K41274:	SOB	R1, K41256		; repeat
K41276:	CLR	R0			; not found - result is empty
K41300:	POP	R1
K41302:	BR	K41216
;
; Input method
K41304:	.BYTE	0
; Key mappings
K41305:	.BYTE	070, 001, 010
	.BYTE	062, 002, 004
	.BYTE	064, 010, 002
	.BYTE	066, 004, 001
	.BYTE	065, 001, 020
	.BYTE	061, 000, 012
	.BYTE	063, 000, 011
	.BYTE	067, 000, 024
	.BYTE	071, 000, 024
;
K41340:	.BYTE	0
	.EVEN
;
;K41342:
.INCLUDE /S242E2.MAC/
;
; Room tiles for the current room
;K43310:
.INCLUDE /S246C8.MAC/
;
; Procedure: Fill Ninja tile screen
K46120:	MOV	#L27624, R3		; Ninja tile screen address
K46124:	MOV	#000110, R1		; 72. * 4 = 288. words
K46130:	MOV	#177777, R5		; filler
K46134:	MOV	R5, (R3)+		; <
	MOV	R5, (R3)+
	MOV	R5, (R3)+
	MOV	R5, (R3)+
K46144:	SOB	R1, K46134		; repeat
K46146:	RETURN
;
; Procedure: Fill Enemy 0/1 tile screens
K46150:	MOV	#L30724, R3		; Enemy 0 tile screen address
K46154:	MOV	#000220, R1		; 144.
K46160:	BR	K46130			; fill Enemy 0/1 tile screens
;
;K46162:
.INCLUDE /S24C72.MAC/
;
K47660:	MOVB	R0, #000000
K47664:	MOVB	R0, #000000
;
K47670:	MOVB	K36264, R0
K47674:	DECB	R0
K47676:	BNE	K47704
K47700:	JMP	K55302
K47704:	PUSH	R4
K47706:	PUSH	R5
K47710:	MOV	R1, R5
K47712:	MOV	#050110, R1
K47716:	MOV	@#036212, R4
K47722:	ADD	#L25424, R4		; Back tile screen address
K47726:	MOVB	K01604, 050062
K47734:	MOVB	050062, K01604
K47742:	PUSH	R4
K47744:	MOVB	047662, 001606
K47752:	PUSH	R3
K47754:	CMPB	001606, #000040
K47762:	BHIS	050010
K47764:	CMPB	001607, #000022
K47772:	BHIS	050010
K47774:	MOVB	(R4), R0
K47776:	NOP
K50000:	CMPB	R0, #000307
K50004:	BHIS	050010
K50006:	MOVB	(R2), (R3)
K50010:	INCB	001606
K50014:	INC	R4
K50016:	INC	R1
K50020:	INC	R3
K50022:	INC	R2
K50024:	DECB	K01604
K50030:	BNE	K47754
K50032:	POP	R3
K50034:	ADD	#000040, R3
K50040:	INCB	001607
K50044:	POP	R4
K50046:	ADD	#000040, R4
K50052:	SOB	R5, K47734
K50054:	POP	R5
K50056:	POP	R4
K50060:	RETURN
;
K50062:	.BYTE	6
	.EVEN
;
	.BLKW	42	;TODO
;
K50170:	CALL	K50274
K50174:	BNE	K50336
K50176:	MOV	036212, R3
K50202:	MOV	#126566, R2
K50206:	CALL	K55630
K50212:	ADD	R2, R3
K50214:	MOV	#000002, R1
K50220:	TSTB	(R3)
K50222:	BNE	K50230
K50224:	CALL	L14472
K50230:	INCB	036211
K50234:	MOV	036212, R3
K50240:	ADD	#000040, R3
K50244:	MOV	R3, K36212
K50250:	MOV	#126566, R2
K50254:	CALL	K55630
K50260:	ADD	R2, R3
K50262:	TSTB	(R3)
K50264:	BEQ	K50272
K50266:	JMP	K55262
K50272:	BR	K50442
K50274:	MOV	#050163, R3
K50300:	MOV	#000001, R5
K50304:	MOV	#000004, R1
K50310:	MOVB	(R3), R0
K50312:	INCB	R0
K50314:	CMPB	R0, #000310
K50320:	BHIS	050332
K50322:	INC	R3
K50324:	SOB	R1, K50310
K50326:	DECB	R5
K50330:	RETURN
K50332:	INCB	R5
K50334:	RETURN
K50336:	MOV	#126566, R2
K50342:	CMPB	036211, #000377
K50350:	BPL	K50356
K50352:	MOV	#127026, R2
K50356:	CALL	K55630
K50362:	MOV	036212, R3
K50366:	ADD	R2, R3
K50370:	TSTB	(R3)
K50372:	BEQ	K50442
K50374:	CALL	K41176
K50400:	BIT	#000020, R0
K50404:	BEQ	K50430
K50406:	MOVB	#000001, K37662
K50414:	MOV	#050624, R3
K50420:	MOV	#047140, R2
K50424:	JMP	K55246
K50430:	BIT	#000004, R0
K50434:	BNE	K50446
K50436:	JMP	K55262
K50442:	CALL	K41176
K50446:	BIT	#000002, R0
K50452:	BEQ	K50536
K50454:	MOVB	K36264, R0
K50460:	DECB	R0
K50462:	BEQ	K50514
K50464:	CALL	K50572
K50470:	MOV	#000002, R1
K50474:	CALL	L14472
K50500:	MOV	#047264, R2
K50504:	MOV	#055644, R3
K50510:	JMP	K55246
K50514:	MOVB	R0, K36264
K50520:	JMP	K25276
K50524:	INCB	R0
K50526:	MOVB	R0, K36264
K50532:	JMP	K25276
K50536:	BIT	#000001, R0
K50542:	BEQ	K50620
K50544:	MOVB	K36264, R0
K50550:	BEQ	K50524
K50552:	CALL	K50572
K50556:	MOV	#047264, R2
K50562:	MOV	#055466, R3
K50566:	JMP	K55246
K50572:	MOV	036212, R3
K50576:	MOV	#126726, R2
K50602:	CALL	K55630
K50606:	ADD	R2, R3
K50610:	TSTB	(R3)
K50612:	BNE	K50616
K50614:	RETURN
K50616:	TST	(SP)+
K50620:	JMP	K25276
K50624:	TSTB	037662
K50630:	BEQ	K50722
K50632:	MOVB	050154, R0
K50636:	INCB	R0
K50640:	BEQ	K50666
K50642:	MOV	#131224, R2
K50646:	MOVB	K36264, R0
K50652:	DECB	R0
K50654:	BNE	K50662
K50656:	MOV	#131231, R2
K50662:	CALL	K51646
K50666:	MOVB	050140, R0
K50672:	INCB	R0
K50674:	BEQ	K50722
K50676:	MOV	#131124, R2
K50702:	MOVB	K36264, R0
K50706:	DECB	R0
K50710:	BNE	K50716
K50712:	MOV	#131131, R2
K50716:	CALL	K51646
K50722:	CLRB	037662
K50726:	CALL	K41176
K50732:	BIT	#000020, R0
K50736:	BEQ	K50744
K50740:	JMP	K25276
K50744:	CLRB	K33542
K50750:	MOV	#050170, R3
K50754:	MOV	#047212, R2
K50760:	JMP	K55246
;
K50764:	.ASCII	/STASH SEARCHED/
;
K51002:	DECB	037662
K51006:	BEQ	K51014
K51010:	JMP	K25276
K51014:	MOV	K23746, R3
K51020:	MOVB	(R3), K23750
K51024:	MOV	#000005, R1
K51030:	MOVB	000001(R3), R0
K51034:	MOVB	R0, (R3)+
K51036:	CMPB	R0, #000003
K51042:	BEQ	K51046
K51044:	SOB	R1, K51030
K51046:	DEC	R3
K51050:	CMPB	K23750, #000004
K51056:	BNE	K51150
K51060:	MOV	K51142, R2
K51064:	INC	R2
K51066:	MOV	R2, K51142
K51072:	MOV	#051145, R3
K51076:	INCB	(R3)
K51100:	CALL	K01314
K51104:	BIC	#177776, R0
K51110:	ADD	#000045, R0
K51114:	MOVB	R0, -(R3)
K51116:	MOV	#000001, R1		; 1.
K51122:	CALL	K01704			; Print string
K51126:	MOV	#000144, R1
K51132:	CALL	L10244
K51136:	JMP	K55262
;
K51142:	.WORD	0, 0, 0
;
K51150:	CLR	R1
K51152:	TSTB	K24762
K51156:	BNE	K51164
K51160:	MOV	#000200, R1
K51164:	MOVB	K33464, R0		; get HELD value
K51170:	BNE	K51200
K51172:	MOV	#000003, R0
K51176:	CLR	R1
K51200:	BISB	R1, R0
K51202:	MOVB	R0, (R3)
K51204:	TSTB	R1
K51206:	BEQ	K51216
K51210:	MOVB	#001, K24762
K51216:	MOVB	K23750, R0
K51222:	BPL	K51300
K51224:	BIC	#177600, R0		; 0..177
K51230:	PUSH	R0
K51232:	MOV	#055333, R2		; screen coords
K51236:	MOVB	#000004, R1		; 4. rows
K51242:	MOV	#000217, R0
K51246:	CALL	L13224			; <  calc screen attr address and set attrs for 8x8 block
K51252:	INC	R2
K51254:	SOB	R1, K51246		; repeat
K51256:	MOV	#K50764, R3		; "STASH SEARCHED"
K51262:	MOV	#000016, R1		; 14.
K51266:	MOV	#050146, R2		; screen coords
K51272:	CALL	K01704			; Print string "STASH SEARCHED"
K51276:	POP	R0
K51300:	CMPB	R0, #000003
K51304:	BNE	K51310
K51306:	CLR	R0
K51310:	MOVB	R0, K33464		; clear HELD value
K51314:	CALL	K05040
K51320:	JMP	K55262
K51324:	MOVB	050124, R0
K51330:	INCB	R0
K51332:	BEQ	K51620
K51334:	TSTB	K33464			; check HELD value
K51340:	BEQ	K51566
; HELD value != 0
K51342:	MOVB	K36264, R0
K51346:	MOV	#000005, R1
K51352:	MOVB	#000010, K01604
K51360:	MOV	#000105, R2
K51364:	DECB	R0
K51366:	BEQ	K51406
K51370:	MOV	#000000, R1
K51374:	MOVB	#000004, K01604
K51402:	MOV	#000100, R2
K51406:	MOVB	036210, R0
K51412:	ADD	R1, R0
K51414:	MOV	036212, R3
K51420:	ADD	R2, R3
K51422:	MOV	R3, K01610
K51426:	MOVB	K01610, K33471
K51434:	MOVB	K01611, K33472
K51442:	MOVB	R0, K33470
K51446:	MOVB	036211, R0
K51452:	ADD	#000002, R0
K51456:	MOVB	R0, K33467
K51462:	MOVB	K33464, R0		; get HELD value
K51466:	ASL	R0
K51470:	ADD	#000320, R0
K51474:	MOVB	R0, K33466
K51500:	CLR	R0
K51502:	MOVB	R0, K33464		; set HELD value
K51506:	CALL	K05040
K51512:	MOVB	K01604, R0
K51516:	MOVB	R0, K33473
K51522:	MOVB	R0, K33474
K51526:	CALL	K41176
K51532:	MOV	#K33474, R3
K51536:	BIT	#000010, R0
K51542:	BEQ	K51546
K51544:	BR	K51556
K51546:	BIT	#000004, R0
K51552:	BEQ	K51620
K51554:	INCB	(R3)
K51556:	INCB	(R3)
K51560:	CLRB	037662
K51564:	BR	K51630
K51566:	TSTB	037662
K51572:	BEQ	K51620
K51574:	MOV	#130764, R2
K51600:	MOVB	K36264, R0
K51604:	DECB	R0
K51606:	BNE	K51614
K51610:	MOV	#130771, R2
K51614:	CALL	K51646
K51620:	CLRB	037662
K51624:	CALL	K41176
K51630:	BIT	#000020, R0
K51634:	BNE	K51642
K51636:	JMP	K55262
K51642:	JMP	K25276
K51646:	MOV	036212, R3
K51652:	ADD	R2, R3
K51654:	MOVB	(R3), R0
K51656:	INCB	R0
K51660:	BEQ	K51702
K51662:	MOVB	#000001, R0
K51666:	MOVB	R0, K26672
K51672:	MOVB	#000001, K37662
K51700:	RETURN
K51702:	MOVB	001100(R3), R0
K51706:	INCB	R0
K51710:	BNE	K51714
K51712:	RETURN
K51714:	MOVB	#000002, R0
K51720:	BR	K51666
K51722:	MOVB	#000002, K37662
K51730:	MOV	#051744, R3
K51734:	MOV	#047410, R2
K51740:	JMP	K55246
K51744:	MOV	#037662, R3
K51750:	DECB	(R3)
K51752:	BNE	K51770
K51754:	MOV	#052030, R3
K51760:	MOV	#047336, R2
K51764:	JMP	K55246
K51770:	MOVB	050117, R0
K51774:	INCB	R0
K51776:	BEQ	K52024
K52000:	MOV	#130765, R2
K52004:	MOVB	K36264, R0
K52010:	DECB	R0
K52012:	BNE	K52020
K52014:	MOV	#130770, R2
K52020:	CALL	K51646
K52024:	JMP	K25276
K52030:	JMP	K55262
;
K52034:	.WORD	1
;
K52036:	MOV	#K52034, R3
K52042:	DECB	(R3)
K52044:	BEQ	K52050
K52046:	RETURN
K52050:	MOVB	#000002, (R3)
K52054:	CMPB	114510, #000016
K52062:	BNE	K52076
K52064:	CMPB	114536, #000001
K52072:	BNE	K52076
K52074:	RETURN
K52076:	CALL	L14442
	MOV	#000001, R1
	CALL	L14502
	JMP	L14442
	NOP1
K52120:	CALL	K52036
K52124:	CALL	K50274
K52130:	BNE	K52162
K52132:	MOV	#047606, R2
K52136:	MOV	#000001, R0
K52142:	MOV	R0, 054512
K52146:	MOVB	R0, K33542
K52152:	MOV	#K54302, R3
K52156:	JMP	K55246
K52162:	MOVB	K17200, R0
K52166:	CMPB	R0, #000020
K52172:	BNE	K52200
K52174:	JMP	K53066
K52200:	CMPB	R0, #000310
K52204:	BNE	K52212
K52206:	JMP	L14674
K52212:	CALL	K41176
K52216:	BIT	#000020, R0
K52222:	BNE	K52230
K52224:	JMP	K53042
K52230:	MOVB	050134, R0
K52234:	INCB	R0
K52236:	BNE	K52244
K52240:	JMP	K52772
K52244:	MOV	036212, R3
K52250:	ADD	#126666, R3
K52254:	CMPB	(R3), #000212
K52260:	BEQ	K52266
K52262:	JMP	K52772
K52266:	MOV	013334, R3
K52272:	CMPB	(R3), #000075
K52276:	BEQ	K52446
K52300:	CMPB	(R3), #000115
K52304:	BNE	K52312
K52306:	JMP	K52402
K52312:	MOVB	060610, 001602
K52320:	MOV	#000356, R0
K52324:	XOR	R0, 001602
K52330:	MOVB	001602, 060610
K52336:	COMB	K60677			; invert LIFT position
K52342:	MOV	#K52702, R3		; " LIFT IS DOWN "
K52346:	MOVB	K60677, R0		; get LIFT position
K52352:	INCB	R0
K52354:	BEQ	K52362
K52356:	MOV	#K52720, R3		; "  LIFT IS UP  "
K52362:	MOV	#000016, R1		; 14.
K52366:	MOV	#050146, R2		; screen address
K52372:	CALL	K01704			; Print string
K52376:	JMP	K25276
K52402:	MOVB	013226, R0
K52406:	INCB	R0
K52410:	BEQ	K52312
K52412:	MOV	#031222, R3
K52416:	MOVB	(R3), R5
K52420:	MOV	#000021, R0
K52424:	XOR	R0, R5
K52426:	MOVB	R5, (R3)
K52430:	MOV	#052754, R3
K52434:	INCB	R5
K52436:	BEQ	K52362
K52440:	MOV	#052736, R3
K52444:	BR	K52362
K52446:	MOV	#050146, R2
K52452:	MOV	#000016, R1
K52456:	MOV	#051145, R3
K52462:	MOVB	051146, R0
K52466:	BEQ	K52472
K52470:	MOVB	R0, (R3)
K52472:	MOVB	(R3), R0
K52474:	BEQ	K52576
K52476:	CMPB	052626, (R3)
K52502:	BHIS	052612
K52504:	MOVB	051146, R0
K52510:	BNE	K52526
K52512:	PUSH	R2
K52514:	PUSH	R1
K52516:	CALL	L15506
K52522:	POP	R1
K52524:	POP	R2
K52526:	MOVB	051145, 051146
K52534:	MOV	#052646, R3
K52540:	CALL	K01704			; Print string
K52544:	MOV	#050205, R2
K52550:	MOV	R2, K51142
K52554:	INC	R2
K52556:	MOV	#110560, R3
K52562:	MOV	#000016, R1
K52566:	CALL	K01704			; Print string
K52572:	JMP	K25276
K52576:	MOV	#052630, R3
K52602:	CALL	K01704			; Print string
K52606:	JMP	K25276
K52612:	BEQ	K52504
K52614:	MOV	#052664, R3
K52620:	CALL	K01704			; Print string
K52624:	BR	K52544
;
	.WORD	0
;
K52630:	.ASCII	/ CODE  NEEDED /
K52646:	.ASCII	/CODE  ACCEPTED/
K52664:	.ASCII	/CODE  REJECTED/
K52702:	.ASCII	/ LIFT IS DOWN /
K52720:	.ASCII	/  LIFT IS UP  /
K52736:	.ASCII	/  FENCE IS ON/
K52753:	.ASCII	/  FENCE IS OFF /
;
K52772:	TSTB	033465
K52776:	BEQ	K53020
K53000:	MOV	#000002, R0
K53004:	MOV	#047212, R2
K53010:	MOV	#051002, R3
K53014:	JMP	K55242
K53020:	MOVB	#000001, K37662
K53026:	MOV	#051324, R3
K53032:	MOV	#046704, R2
K53036:	JMP	K55246
K53042:	BIT	#000002, R0
K53046:	BEQ	K53106
K53050:	TSTB	K36264
K53054:	BEQ	K53066
K53056:	DECB	K36264
K53062:	JMP	K25276
K53066:	CALL	K53612
K53072:	MOV	#040044, R3
K53076:	MOV	#046756, R2
K53102:	JMP	K55246
K53106:	BIT	#000004, R0
K53112:	BEQ	K53300
K53114:	MOVB	050162, R0
K53120:	TSTB	K36264
K53124:	BEQ	K53132
K53126:	MOVB	050167, R0
K53132:	CMPB	R0, #000324
K53136:	BNE	K53166
K53140:	MOVB	126471, R0
K53144:	CMPB	R0, #000010
K53150:	BNE	K53166
K53152:	CALL	L10300
K53156:	MOV	#054562, R3
K53162:	JMP	K55252
K53166:	MOVB	050164, R0
K53172:	TSTB	K36264
K53176:	BEQ	K53204
K53200:	MOVB	050165, R0
K53204:	CMPB	R0, #000054
K53210:	BEQ	K53240
K53212:	CMPB	R0, #000045
K53216:	BEQ	K53240
K53220:	CMPB	R0, #000011
K53224:	BEQ	K53240
K53226:	CMPB	R0, #000005
K53232:	BEQ	K53240
K53234:	JMP	K50744
K53240:	MOV	#053646, R3
K53244:	MOV	#046632, R2
K53250:	MOV	R2, <K36276+2>
K53254:	MOV	R3, <K25272+2>		; set JMP address
K53260:	JMP	K54172
K53264:	MOV	#053646, R3
K53270:	MOV	#046632, R2
K53274:	JMP	K55246
K53300:	BIT	#000001, R0
K53304:	BEQ	K53352
K53306:	MOVB	K36264, R0
K53312:	CMPB	R0, #000001
K53316:	BEQ	K53332
K53320:	INCB	R0
K53322:	MOVB	R0, K36264
K53326:	JMP	K25276
K53332:	CALL	K53612
K53336:	MOV	#037524, R3
K53342:	MOV	#046756, R2
K53346:	JMP	K55246
K53352:	BIT	#000010, R0
K53356:	BEQ	K53606
K53360:	TSTB	K36264
K53364:	BNE	K53440
K53366:	MOV	036212, R3
K53372:	ADD	#126624, R3
K53376:	CMPB	(R3), #000142
K53402:	BNE	K53440
K53404:	MOVB	#000376, K17200
K53412:	MOV	#040576, R3
K53416:	MOV	#046244, R2
K53422:	MOVB	#000375, K17200
K53430:	MOVB	#000155, R0
K53434:	JMP	K55242
K53440:	MOVB	050162, R0
K53444:	TSTB	K36264
K53450:	BEQ	K53456
K53452:	MOVB	050167, R0
K53456:	CMPB	R0, #000324
K53462:	BNE	K53512
K53464:	MOVB	126471, R0
K53470:	CMPB	R0, #000010
K53474:	BEQ	K53512
K53476:	CALL	L10300
K53502:	MOV	#054774, R3
K53506:	JMP	K55252
K53512:	MOVB	050156, R0
K53516:	TSTB	K36264
K53522:	BEQ	K53530
K53524:	MOVB	050157, R0
K53530:	CMPB	R0, #000011
K53534:	BNE	K53542
K53536:	JMP	K53264
K53542:	CMPB	R0, #000005
K53546:	BEQ	K53536
K53550:	CMPB	R0, #000045
K53554:	BEQ	K53536
K53556:	CMPB	R0, #000054
K53562:	BEQ	K53536
K53564:	CMPB	R0, #000020
K53570:	BEQ	K53536
K53572:	MOV	#051722, R3
K53576:	MOV	#047336, R2
K53602:	JMP	K55246
K53606:	JMP	K25276
K53612:	MOV	#047030, R3
K53616:	MOV	R3, 041152
K53622:	MOV	#047006, R2
K53626:	MOV	#000022, R1
K53632:	MOVB	(R3)+, (R2)+
K53634:	SOB	R1, K53632
K53636:	CLR	R0
K53640:	MOVB	R0, 041172
K53644:	RETURN
K53646:	MOVB	050156, R0
K53652:	TSTB	K36264
K53656:	BEQ	K53664
K53660:	MOVB	050157, R0
K53664:	CMPB	R0, #000005
K53670:	BEQ	K53742
K53672:	CMPB	R0, #000011
K53676:	BEQ	K53742
K53700:	CMPB	R0, #000020
K53704:	BEQ	K53742
K53706:	CMPB	R0, #000045
K53712:	BEQ	K53742
K53714:	CMPB	R0, #000054
K53720:	BEQ	K53742
K53722:	CMPB	R0, #000314
K53726:	BEQ	K53742
K53730:	CMPB	R0, #000377
K53734:	BEQ	K53742
K53736:	JMP	K55262
K53742:	CALL	K41176
K53746:	BIT	#000001, R0
K53752:	BEQ	K53764
K53754:	MOVB	#000001, K36264
K53762:	BR	K53776
K53764:	BIT	#000002, R0
K53770:	BEQ	K54032
K53772:	CLRB	K36264
K53776:	CMPB	050155, #000307
K54004:	BHIS	054026
K54006:	MOVB	050163, R0
K54012:	INCB	R0
K54014:	CMPB	R0, #000307
K54020:	BLO	K54026
K54022:	JMP	K55262
K54026:	JMP	K25276
K54032:	BIT	#000010, R0
K54036:	BEQ	K54134
K54040:	MOVB	036211, R0
K54044:	DECB	R0
K54046:	BMI	K54076
K54050:	MOV	036212, R3
K54054:	ADD	#125366, R3
K54060:	MOVB	(R3), R0
K54062:	CMPB	R0, #000314
K54066:	BEQ	K54076
K54070:	CMPB	R0, #000307
K54074:	BHIS	054026
K54076:	CALL	K40726
K54102:	DECB	036211
K54106:	SUB	#000040, K36212
K54114:	RORB	K36264
K54120:	BHIS	054124
K54122:	TST	#000261
K54126:	ROLB	K36264
K54132:	BR	K54026
K54134:	BIT	#000004, R0
K54140:	BEQ	K54026
K54142:	MOVB	050164, R0
K54146:	INCB	R0
K54150:	CMPB	R0, #000307
K54154:	BHIS	054022
K54156:	MOVB	050165, R0
K54162:	INCB	R0
K54164:	CMPB	R0, #000307
K54170:	BHIS	054022
K54172:	CALL	K54212
K54176:	INCB	036211
K54202:	ADD	#000040, K36212
K54210:	BR	K54114
K54212:	MOVB	036211, R0
K54216:	CMPB	R0, #000013
K54222:	BEQ	K54226
K54224:	RETURN
K54226:	MOV	#036214, R3
K54232:	INCB	(R3)
K54234:	POP	R3
K54236:	SUB	#000021, R0
K54242:	MOVB	R0, K36211
K54246:	MOV	036212, R3
K54252:	SUB	#001040, R3
K54256:	MOV	#000040, R2
K54262:	MOV	R3, K36212
K54266:	ADD	R2, <K13332+2>
K54272:	CLRB	003542
K54276:	JMP	K13072
;
K54302:	CALL	K54212
K54306:	CALL	K50274
K54312:	BEQ	K54530
K54314:	TSTB	K33540
K54320:	BEQ	K54510
K54322:	MOV	#000024, R1		; 20.
K54326:	MOV	#K54440, R2		; " MISSION TERMINATED "
K54332:	MOVB	K33540, R0
K54336:	DECB	R0
	BNE	K54346
; Dead
K54342:	MOV	#K54464, R2		; "  MISSION FAILURE  "
K54346:	MOV	#127132, R3		; address
K54352:	CALL	K04604			; Draw string as tiles
K54356:	MOVB	K17200, R0
K54362:	CMPB	R0, #000375
K54366:	BNE	K54404
K54370:	MOV	#K17204, R2
K54374:	MOV	#L26524, R1		; Front tile screen address??
K54400:	CALL	K40436
K54404:	MOV	#046162, R2
K54410:	MOV	#L24324, R1
K54414:	CALL	K40436
K54420:	MOV	#047534, R2
K54424:	MOV	#055224, R3
K54430:	MOVB	#000036, R0
K54434:	JMP	K55242
;
K54440:	.ASCII	/@MISSION@TERMINATED@/
K54464:	.ASCII	/@@MISSION@@FAILURE@@/
;
K54510:	MOV	#000001, R1
	CALL	L14472
K54520:	CALL	L15650			; Sound
K54524:	JMP	K50744
K54530:	MOV	#054512, R3
K54534:	CMPB	#000372, (R3)
K54540:	BEQ	K54544
K54542:	INCB	(R3)
K54544:	INCB	036211
K54550:	ADD	#000040, K36212
K54556:	JMP	K25276
K54562:	MOVB	#000021, 060610
K54570:	CLRB	K60677			; set LIFT position = UP
K54574:	CALL	K52036
K54600:	CALL	K54212
K54604:	INCB	036211
K54610:	MOV	036212, R3
K54614:	ADD	#000040, R3
K54620:	MOV	R3, K36212
K54624:	ADD	#125724, R3
K54630:	MOV	#000006, R1
K54634:	MOVB	#000010, (R3)+
K54640:	SOB	R1, K54634
K54642:	CMPB	036211, #000013
K54650:	BEQ	K54710
K54652:	ADD	#000032, R3
K54656:	MOV	#070602, R2
K54662:	MOV	#000006, R1
K54666:	MOVB	(R2)+, (R3)+
K54670:	SOB	R1, K54666
K54672:	SUB	#001100, R3
K54676:	MOV	#000006, R1
K54702:	MOVB	#000001, -(R3)
K54706:	SOB	R1, K54702
K54710:	CALL	K41176
K54714:	MOV	#054774, R3
K54720:	BIT	#000010, R0
K54724:	BEQ	K54732
K54726:	JMP	K55252
K54732:	MOVB	#177777, R0
K54736:	MOVB	R0, 060610
K54742:	MOVB	R0, K60677		; set LIFT position = DOWN
K54746:	MOV	036212, R3
K54752:	ADD	#126024, R3
K54756:	CMPB	(R3), #000372
K54762:	BEQ	K54770
K54764:	JMP	K25276
K54770:	JMP	K50744
K54774:	MOV	#177777, R0
K55000:	MOVB	R0, 060610
K55004:	MOVB	R0, K60677		; set LIFT position = DOWN
K55010:	CALL	K52036
K55014:	CALL	K40726
K55020:	DECB	036211
K55024:	MOV	036212, R3
K55030:	SUB	#000040, R3
K55034:	MOV	R3, K36212
K55040:	CMPB	036211, #000013
K55046:	BEQ	K55134
K55050:	ADD	#125764, R3
K55054:	MOV	#000006, R1
K55060:	MOV	#070602, R2
K55064:	MOVB	(R2)+, (R3)+
K55066:	SOB	R1, K55064
K55070:	CMPB	036211, #000012
K55076:	BEQ	K55134
K55100:	ADD	#000032, R3
K55104:	MOV	#000006, R1
K55110:	MOVB	#000010, (R3)+
K55114:	SOB	R1, K55110
K55116:	SUB	#001100, R3
K55122:	MOV	#000006, R1
K55126:	MOVB	#000001, -(R3)
K55132:	SOB	R1, K55126
K55134:	CALL	K41176
K55140:	MOV	#054562, R3
K55144:	BIT	#000004, R0
K55150:	BNE	K55252
K55152:	MOVB	#000021, 060610
K55160:	CLRB	K60677			; set LIFT position = UP
K55164:	MOV	036212, R3
K55170:	ADD	#125723, R3
K55174:	CMPB	(R3), #000010
K55200:	BEQ	K55206
K55202:	JMP	K25276
K55206:	DECB	036211
K55212:	SUB	#000040, K36212
K55220:	JMP	K55262
K55224:	DECB	037662
K55230:	BEQ	K55236
K55232:	JMP	K25276
K55236:	JMP	L10606
K55242:	MOVB	R0, K37662
K55246:	MOV	R2, <K36276+2>
K55252:	MOV	R3, <K25272+2>		; set JMP address
K55256:	JMP	K25276
;
K55262:	CLRB	K33542
K55266:	MOV	#052120, R3
K55272:	MOV	#046561, R2
K55276:	JMP	K55246
K55302:	PUSH	R4
K55304:	PUSH	R5
K55306:	MOV	R1, R5
K55310:	MOV	#050115, R1
K55314:	MOV	@#036212, R4
K55320:	ADD	#L25424, R4		; Back tile screen address
K55324:	MOVB	K01604, 055464
K55332:	ADD	#000005, R2
K55336:	MOVB	055464, K01604
K55344:	MOVB	047666, 001606
K55352:	CMPB	001606, #000040
K55360:	BHIS	055406
K55362:	CMPB	001607, #000022
K55370:	BHIS	055406
K55372:	MOVB	(R4), R0
K55374:	NOP
K55376:	CMPB	R0, #000307
K55402:	BHIS	055406
K55404:	MOVB	(R2), (R3)
K55406:	INCB	001606
K55412:	INC	R4
K55414:	DEC	R1
K55416:	INC	R3
K55420:	DEC	R2
K55422:	DECB	K01604
K55426:	BNE	K55352
K55430:	ADD	#000032, R3
K55434:	ADD	#000014, R2
K55440:	INCB	001607
K55444:	ADD	#000032, R4
K55450:	ADD	#000014, R1
K55454:	SOB	R5, K55336
K55456:	POP	R5
K55460:	POP	R4
K55462:	RETURN
;
K55464:	.WORD	6
;
K55466:	MOVB	036210, R0
K55472:	CMPB	R0, #000035
K55476:	BNE	K55504
K55500:	JMP	K37746
K55504:	CMPB	R0, #000032
K55510:	BHIS	055534
K55512:	MOV	036212, R3
K55516:	ADD	#125732, R3
K55522:	CMPB	(R3), #000307
K55526:	BHIS	055546
K55530:	MOVB	036210, R0
K55534:	INCB	R0
K55536:	MOVB	R0, K36210
K55542:	INC	036212
K55546:	CALL	K55736
K55552:	CALL	K41176
K55556:	BIT	#000001, R0
K55562:	BNE	K55570
K55564:	JMP	K50744
K55570:	MOV	#126666, R2
K55574:	CALL	K55630
K55600:	MOV	036212, R3
K55604:	ADD	R2, R3
K55606:	TSTB	(R3)
K55610:	BNE	K55624
K55612:	DECB	036211
K55616:	SUB	#000040, K36212
K55624:	JMP	K25276
;
; Procedure: ??
K55630:	CMPB	036210, #000375
K55636:	BNE	K55642
K55640:	INC	R2
K55642:	RETURN
K55644:	MOVB	036210, R0
K55650:	CMPB	R0, #000375
K55654:	BNE	K55662
K55656:	JMP	K40012
K55662:	CMPB	R0, #000001
K55666:	BPL	K55674
K55670:	BR	K55710
;
K55672:	.WORD	016703
;
K55674:	SUB	R3, (R4)
K55676:	ADD	#125723, R3
K55702:	CMPB	(R3), #000307
K55706:	BHIS	055720
K55710:	DECB	036210
K55714:	DEC	036212
K55720:	CALL	K55736
K55724:	CALL	K41176
K55730:	BIT	#000002, R0
K55734:	BR	K55562
K55736:	MOVB	047313, 001602
K55744:	MOV	#000007, R0
K55750:	XOR	R0, 001602
K55754:	MOVB	001602, 047313
K55762:	RETURN
;
; K55764 == ROOMS	Room sequences, 246. rooms
; K70572 == SMAP	World map, 32x28 bytes
; K72572 == ROOMSA	Room sequence addresses, 246. rooms
.INCLUDE /S2ROOM.MAC/
K60677 = K60640 + 37			; LIFT position byte: 377 = DOWN, 0 = UP
;
.INCLUDE /S2SPRT.MAC/
;K73550:
;	.BLKW	1467	;TODO
;
;	.BYTE	0	;TODO
; Sprite Puma, 8x3, 4 phases
;K76727:
;	.BYTE	0	;TODO
;
;	.BLKW	274	;TODO
;
;	.BYTE	0	;TODO
; Room tiles, 8x8, 9. bytes each, 256. tiles = 2304. bytes
;K77521:
;	.BYTE	0	;TODO
;
;	.BLKW	2177	;TODO
;
;L04120:
;
;	.BLKW	1046	;TODO

; Font regular, 8x8, 8. bytes each, 96. symbols = 768. bytes
.INCLUDE /S2FONT.MAC/

; Procedure: Draw Ninja for Menu
L07634:	MOV	#L04120, R3
L07640:	MOV	#L24324, R2		; Address where prepared picture will be placed
L07644:	MOVB	(R3), R0		; <
L07646:	CMPB	R0, #000173
L07652:	BEQ	L07710			; exit
L07654:	CMPB	R0, #000352
L07660:	BEQ	L07676
L07662:	MOV	#000001, R1
L07666:	MOVB	R0, (R2)+		; <
L07670:	SOB	R1, L07666		; repeat
L07672:	INC	R3
L07674:	BR	L07644			; repeat
L07676:	INC	R3
L07700:	CLR	R1
L07702:	BISB	(R3)+, R1
L07704:	MOVB	(R3), R0
L07706:	BR	L07666
;
L07710:	PUSH	R4
L07712:	MOV	#040052, R3
L07716:	MOV	#L24324, R2		; Address with prepared picture
L07722:	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
L07736:	MOV	#000013, R1
L07742:	MOV	#000030, R4		; <
L07746:	PUSH	R3
L07750:	MOVB	(R2)+, R5		;   <
	ASL	R5
	MOV	PXCONH(R5), (R3)
L07752:	ADD	#000100, R3
L07756:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L07760:	ADD	#000100, R3
L07764:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L07766:	ADD	#000100, R3
L07772:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L07774:	ADD	#000100, R3
L10000:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L10002:	ADD	#000100, R3
L10006:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L10010:	ADD	#000100, R3
L10014:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L10016:	ADD	#000100, R3
L10022:	MOVB	(R2)+, R5
	ASL	R5
	MOV	PXCONH(R5), (R3)
L10024:	ADD	#000100, R3
L10030:	SOB	R4, L07750		; | repeat
L10032:	POP	R3
L10034:	TST	(R3)+
L10036:	SOB	R1, L07742		; repeat
L10040:	NOP2	;MOV	#040011, R3
L10044:	MOV	#130424, R2
L10050:	MOV	#000030, R1
L10054:	MOV	#000040, R4		; <
L10060:	NOP1	;PUSH	R3			; | <
L10062:	;NOTE: Удалил
L10136:	NOP1	;POP	R3
L10140:	;NOTE: Удалил
L10144:	NOP1	;SOB	R4, L10060		;   repeat
L10146:	NOP2	;ADD	#001100, R3
L10152:	NOP1	;SOB	R1, L10054		; repeat
L10154:	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	POP	R4
	JMP	L10320			; Clear Menu left part, and return
	NOP1
	NOP3
;
; Procedure: ??
L10200:	MOV	#050110, R3
L10204:	MOV	#000030, R1		; 24.
L10210:	MOV	#177777, R2
L10214:	MOV	R2, (R3)+		; <
L10216:	SOB	R1, L10214		; repeat
L10220:	MOV	#110011, R0
L10224:	MOV	R0, 047776
L10230:	MOV	R0, 055374
L10234:	RETURN
;
; Procedure: ??
L10236:	MOV	#000240, R0
L10242:	BR	L10224
;
; Procedure: ??
L10244:	MOV	#012435, R3		; address
L10250:	MOV	#000006, R5		; 6.
L10254:	MOV	#000072, R0
L10260:	INCB	(R3)
L10262:	CMPB	R0, (R3)
L10264:	BNE	L10276
L10266:	MOVB	#000060, (R3)
L10272:	DEC	R3
L10274:	SOB	R5, L10260		; repeat
L10276:	SOB	R1, L10244		; repeat
L10300:	MOV	#050146, R2
L10304:	MOV	#000016, R1		; 14.
L10310:	MOV	#K12422, R3		; " PAY $0000000 "
L10314:	JMP	K01704			; Print string and return
;
; Procedure: Clear Menu left part
L10320:	PUSH	R4
L10322:	MOV	#000030, R4		; 24. lines
L10326:	MOV	#040000, R2
L10332:	PUSH	R2		; <
L10334:	MOV	#000025, R1		; |  21.
L10340:	MOV	#L10560, R3		; |  21. space char string
L10344:	CALL	K01704			; |  Print string
L10350:	POP	R2		; |
L10352:	ADD	#000040, R2		; | +32.
L10356:	BIT	#000340, R2		; |
L10362:	BNE	L10374			; |
L10364:	SUB	#000400, R2		; |
L10370:	ADD	#004000, R2		; |
L10374:	SOB	R4, L10332		; repeat
; Clear atributes
;NOTE удалил, не нужно на БК
L10554:	POP	R4
L10556:	RETURN

;TODO: Поместить в буферную память, используется один раз на старте
PREPAR:
; Создать таблицу PXCONV, для конвертации пикселей
	MOV	#L33124, R2
	MOV	#-128., R3		; R3 бежит от -128. до +127.
1$:	CLR	R5			; в R5 будет готовое слово
	MOV	#8., R4			; в R4 счётчик по разрядам
	MOV	R3, R1
2$:	ASR	R1			; 0-й бит идёт в C
	ROL	R5			; забираем из C
	ROL	R5
	SOB	R4, 2$
	MOV	R5, (R2)+		; записываем результат
	INC	R3
	CMP	R3, #128.
	BLT	1$
	RETURN

	.BLKW	45	;NOTE: Свободное место

L10560:	.ASCIZ	/                     /	; 21. space char
;
L10606:	CALL	L07634			; Draw Ninja for Menu
L10612:	MOVB	#000017, R1
L10616:	MOV	#114017, R3
L10622:	MOV	#012430, R2
L10626:	PUSH	R3
L10630:	MOVB	#000006, K01604
L10636:	CMPB	(R2), (R3)
L10640:	BNE	L10670
L10642:	INC	R3
L10644:	INC	R2
L10646:	DECB	K01604
L10652:	BNE	L10636
L10654:	POP	R3
L10656:	ADD	#000021, R3
L10662:	SOB	R1, L10622
L10664:	JMP	L11054
L10670:	BLO	L10654
L10672:	POP	R3
L10674:	PUSH	R1
L10676:	MOV	#040103, R2
L10702:	MOV	#L13706, R3		; "CONGRATULATIONS"
L10706:	MOV	#000017, R1		; 15.
L10712:	CALL	K01704			; Print string "CONGRATULATIONS"
L10716:	MOV	#040242, R2
L10722:	MOV	#000022, R1		; 18.
L10726:	CALL	K01704			; Print string "YOU ARE NOW A TRUE"
L10732:	MOV	#040344, R2
L10736:	MOV	#000016, R1		; 14.
L10742:	CALL	K01704			; Print string "NINJA SABOTEUR"
L10746:	MOV	#044143, R2
L10752:	MOV	#000017, R1		; 15.
L10756:	CALL	K01704			; Print string "ENTER YOUR NAME"
L10762:	CALL	L12570
L10766:	POP	R1
L10770:	MOV	#114437, R3
L10774:	MOV	#114416, R2
L11000:	MOVB	#000021, K01604
L11006:	MOVB	-(R2), -(R3)
L11010:	DECB	K01604
L11014:	BNE	L11006
L11016:	SOB	R1, L11000
L11020:	MOV	#012430, R3
L11024:	MOV	#000006, R1
L11030:	MOVB	(R3)+, (R2)+
L11032:	SOB	R1, L11030
L11034:	INC	R3
L11036:	INC	R3
L11040:	MOV	#000013, R1
L11044:	MOVB	(R3)+, (R2)+
L11046:	SOB	R1, L11044
;
; Show the score table
L11050:	CALL	L10320			; Clear Menu left part
L11054:	MOV	#000013, R1		; 11.
L11060:	MOV	#L14004, R3		; "HIGH SCORES"
L11064:	MOV	#040143, R2
L11070:	CALL	K01704			; Print string
L11074:	MOV	#L14017, R3		; score table address
L11100:	MOV	#040301, R2
L11104:	PUSH	R4
L11106:	MOV	#000017, R4		; 15.
L11112:	PUSH	R2		; <
L11114:	MOV	#000006, R1
L11120:	CALL	K01704			;   Print string
L11124:	PUSH	R3
L11126:	MOV	#L14437, R3		;   "0 "
L11132:	MOV	#000002, R1
L11136:	ADD	#000006, R2
L11142:	CALL	K01704			;   Print string
L11146:	POP	R3
L11150:	MOV	#000013, R1		;   11.
L11154:	ADD	#000002, R2
L11160:	CALL	K01704			;   Print string
L11164:	POP	R2
L11166:	ADD	#000040, R2
L11172:	BIT	#000340, R2
L11176:	BNE	L11210
L11200:	SUB	#000400, R2
L11204:	ADD	#004000, R2
L11210:	SOB	R4, L11112		; repeat
L11212:	POP	R4
L11214:	CALL	L13024			; Empty keyboard buffer
L11220:	CALL	L13100			; Get a key
; Entering the Menu; Ninja at right drawn already
L11224:	CALL	L10320			; Clear Menu left part
L11230:	MOV	#L13502, R3		; "K  KEYBOARD" etc.
L11234:	MOV	#000013, R1		; 11.
L11240:	MOV	#040203, R2
L11244:	CALL	K01704			; Print string "K  KEYBOARD"
L11250:	MOV	#000011, R1		; 9.
L11254:	MOV	#040303, R2
L11260:	CALL	K01704			; Print string "P  PROTEK"
L11264:	MOV	#000013, R1		; 11.
L11270:	MOV	#044003, R2
L11274:	CALL	K01704			; Print string "J  KEMPSTON"
L11300:	MOV	#000020, R1		; 16.
L11304:	MOV	#044143, R2
L11310:	CALL	K01704			; Print string "R REDEFINE KEYS "
L11314:	MOV	#000020, R1		; 16.
L11320:	MOV	#044243, R2
L11324:	CALL	K01704			; Print string "M  ALTER MISSION"
L11330:	MOV	#000015, R1		; 13.
L11334:	MOV	#050003, R2
L11340:	CALL	K01704			; Print string "S  START GAME"
L11344:	CALL	L13024			; Empty keyboard buffer
L11350:	CALL	L13474			; Show Menu selection
L11354:	MOV	#072460, R1
; Menu waiting loop
L11360:	PUSH	R1
L11362:	CALL	L13036			; Read a key
L11366:	CMPB	R0, #000113		; 'K' - KEYBOARD
L11372:	BNE	L11400
L11374:	JMP	L13146			; Keyboard selected
L11400:	CMPB	R0, #000120		; 'P' - PROTEK
L11404:	BNE	L11412
L11406:	JMP	L13162			; Protek selected
L11412:	CMPB	R0, #000112		; 'J' - KEMPSTON
L11416:	BNE	L11424
L11420:	JMP	L13206			; Kempston selected
L11424:	CMPB	R0, #000122		; 'R' - REDEFINE KEYS
L11430:	BNE	L11436
L11432:	JMP	L12316			; Redefine Keys selected
L11436:	CMPB	R0, #000115		; 'M' - ALTER MISSION
L11442:	BNE	L11450
L11444:	JMP	L11476			; Alter Mission selected
L11450:	CMPB	R0, #000123		; 'S' - START GAME
L11454:	BNE	L11464
; Start Game selected
L11456:	POP	R1
L11460:	JMP	K10624			; Start the game
L11464:	POP	R1
L11466:	DEC	R1			; decrease timer
L11470:	BNE	L11360
L11472:	JMP	L11050			; Time is out, switch to score table
; Alter Mission selected
L11476:	CALL	L10320			; Clear Menu left part
L11502:	MOV	#040104, R2
L11506:	MOV	#L12225, R3		; "TYPE REQUIRED"
L11512:	MOV	#000015, R1		; 13.
L11516:	CALL	K01704			; Print string "TYPE REQUIRED"
L11522:	MOV	#040204, R2
L11526:	MOV	#000014, R1		; 12.
L11532:	CALL	K01704			; Print string "MISSION CODE"
L11536:	MOV	#040343, R2
L11542:	MOV	#000016, R1		; 14.
L11546:	CALL	K01704			; Print string "OR PRESS ENTER"
L11552:	MOV	#044042, R2
L11556:	MOV	#000021, R1		; 17.
L11562:	CALL	K01704			; Print string "FOR FIRST MISSION"
L11566:	CALL	L13024
L11572:	CALL	L12570
L11576:	MOV	#000011, R5
L11602:	MOV	#112062, R3
L11606:	MOV	#012440, R2
L11612:	MOV	#000013, R1
L11616:	PUSH	R3
L11620:	CMPB	(R2)+, (R3)+
L11622:	BNE	L11712
L11624:	SOB	R1, L11620
L11626:	POP	R3
L11630:	MOV	R5, L11666		; Level
L11634:	ADD	#000060, R5		; +'0'
L11640:	MOVB	R5, <L11670+10>
L11644:	MOV	#L11670, R3		; "MISSION X SELECTED"
L11650:	MOV	#000022, R1		; 18.
L11654:	MOV	#044242, R2		; screen address
L11660:	CALL	K01704			; Print string
L11664:	BR	L11756
;
L11666:	.WORD	1			; Level number
;
L11670:	.ASCII	/MISSION X SELECTED/
;
L11712:	POP	R3
L11714:	ADD	#000013, R3
L11720:	SOB	R5, L11606
L11722:	MOV	#L12030, R3		; "MISSION CODE"
L11726:	MOV	#044245, R2
L11732:	MOV	#000014, R1		; 12.
L11736:	CALL	K01704			; Print string "MISSION CODE"
L11742:	MOV	#044304, R2
L11746:	MOV	#000016, R1		; 14.
L11752:	CALL	K01704			; Print string "NOT RECOGNISED"
L11756:	MOV	#K07336, R3		; "PRESS ANY KEY TO CONTINUE"
L11762:	MOV	#050244, R2
L11766:	MOV	#000015, R1
L11772:	CALL	K01704			; Print string
L11776:	MOV	#050304, R2
L12002:	MOV	#000014, R1
L12006:	CALL	K01704			; Print string
L12012:	CALL	L13024
L12016:	CALL	L13100
L12022:	POP	R1
L12024:	JMP	L11224			; Return to Menu
;
L12030:	.ASCII	/MISSION CODE/
L12044:	.ASCII	/NOT RECOGNISED/
L12062:	.ASCII	/SATORI     /
	.ASCII	/DIM MAK    /
	.ASCII	/MI LU KATA /
	.ASCII	/GENIN      /
	.ASCII	/SAIMENJITSU/
	.ASCII	/KUJI KIRI  /
	.ASCII	/KIME       /
	.ASCII	/JONIN      /
	.ASCII	/           /
L12225:	.ASCII	/TYPE REQUIRED/
	.ASCII	/MISSION CODE/
	.ASCII	/OR PRESS ENTER/
	.ASCIZ	/FOR FIRST MISSION/
	.EVEN

; Redefine Keys selected in Menu
L12316:	CALL	L10320			; Clear Menu left part
L12322:	MOV	#040106, R2
L12326:	MOV	#<L13540+2>, R3		; "REDEFINE KEYS"
L12332:	MOV	#000015, R1		; 13.
L12336:	CALL	K01704			; Print string
L12342:	CALL	L13024			; Empty keyboard buffer
L12346:	MOV	#040204, R2
L12352:	MOV	#L13115, R3		; "UP   " etc.
L12356:	PUSH	R5
L12360:	MOV	#000005, R5		; 5 keys
L12364:	MOV	#L15775, R4		; Redefined keys address
L12370:	MOV	#000005, R1		; <  5.
L12374:	MOV	R2, #000000		;WARN: mutable argument
L12400:	CALL	K01704			; Print string
L12404:	PUSH	R3
L12406:	CALL	L13036			; Read a key
L12412:	CMPB	R0, #000133
L12416:	BHIS	L12406
L12420:	CMPB	R0, #000040		; ' '
L12424:	BEQ	L12450
L12426:	CMPB	R0, #000060
L12432:	BLO	L12406
L12434:	CMPB	R0, #000072
L12440:	BLO	L12450
L12442:	CMPB	R0, #000101
L12446:	BLO	L12406
L12450:	MOVB	R0, <L13112+1>		; set key name
L12454:	MOV	<L12374+2>, R2
L12460:	ADD	#000006, R2
L12464:	MOV	#L13112, R3		; String - key name in quotes
L12470:	MOV	#000003, R1		; 3-char
L12474:	CALL	K01704			; Print string
L12500:	MOVB	<L13112+1>, R0		; get key name
L12504:	MOVB	R0, (R4)+
L12506:	ADD	#000002, R4
L12512:	CALL	L13024			; Empty keyboard buffer
L12516:	MOV	<L12374+2>, R2
L12522:	MOV	#000002, R3
L12526:	ADD	#000040, R2		; <
L12532:	BIT	#000340, R2
L12536:	BNE	L12550
L12540:	SUB	#000400, R2
L12544:	ADD	#004000, R2
L12550:	SOB	R3, L12526		; repeat
L12552:	POP	R3
L12554:	DEC	R5
L12556:	BNE	L12370			; repeat
L12560:	POP	R5
L12562:	POP	R1
L12564:	JMP	L11224			; Return to Menu
;
L12570:	MOV	#000013, R1
L12574:	MOV	#012440, R3
L12600:	MOVB	#000040, (R3)+
L12604:	SOB	R1, L12600
L12606:	MOV	#000001, R1
L12612:	MOV	#054646, 001606
L12620:	MOV	#044246, R2
L12624:	MOV	#012440, R3
L12630:	PUSH	R1
L12632:	PUSH	R2
L12634:	MOV	001606, R2
L12640:	MOVB	#000343, R0
L12644:	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
L12650:	POP	R2
L12652:	CALL	L13036
L12656:	CMPB	R0, #000177
L12662:	BNE	L12670
L12664:	JMP	L13616
L12670:	CMPB	R0, #000015
L12674:	BEQ	L13004
L12676:	CMP	(SP), #000014
L12702:	BHIS	L12652
L12704:	CMPB	R0, #000040
L12710:	BEQ	L12736
L12712:	CMPB	R0, #000101
L12716:	BHIS	112724
L12720:	JMP	L12652
L12724:	CMPB	R0, #000134
L12730:	BLO	L12736
L12732:	JMP	L12652
L12736:	MOVB	R0, (R3)
L12740:	MOV	#000001, R1
L12744:	PUSH	R2
L12746:	CALL	K01704			; Print string
L12752:	MOV	001606, R2		; screen coords
L12756:	MOVB	#000016, R0
L12762:	CALL	L13224			; calc screen attr address and set attrs for 8x8 block
L12766:	INC	001606
L12772:	POP	R2
L12774:	INC	R2
L12776:	INC	(SP)
L13000:	POP	R1
L13002:	BR	L12630
L13004:	POP	R1
L13006:	MOV	001606, R2		; screen coords
L13012:	MOV	#000016, R0
	JMP	L13224			; calc screen attr address and set attrs for 8x8 block
	NOP1
;
; Procedure: Empty keyboard buffer
L13024:	CALL	L13036			; Read a key
L13030:	TSTB	R0
L13032:	BNE	L13024
L13034:	RETURN
; Procedure: Read a key
L13036:
	TSTB	@#177660
	BPL	10$		; no key => exit
	MOVB	@#177662, R0
	RETURN
10$:	CLR	R0		; empty key
	RETURN
	NOP3
	NOP3
	NOP3
; Procedure: Get a key
L13100:	CALL	L13036			; Read a key
L13104:	TSTB	R0
L13106:	BEQ	L13100
L13110:	RETURN

L13112:	.ASCII	/"/<000>/"/
L13115:	.ASCII	/UP   /
	.ASCII	/DOWN /
	.ASCII	/LEFT /
	.ASCII	/RIGHT/
	.ASCII	/FIRE /

; Keyboard selected in Menu
L13146:	CALL	L13424			; Clear Menu selection
L13152:	MOV	#054202, R3
L13156:	CLR	R0
L13160:	BR	L13176			; Show Menu selection and Continue to Menu
; Protek selected
L13162:	CALL	L13424			; Clear Menu selection
L13166:	MOV	#K54302, R3
L13172:	MOV	#000002, R0
L13176:	CALL	L13464			; Show Menu selection
L13202:	JMP	L11464			; Continue to Menu
; Kempston selected
L13206:	CALL	L13424			; Clear Menu selection
L13212:	MOV	#054402, R3
L13216:	MOV	#000001, R0
L13222:	BR	L13176			; Show Menu selection and Continue to Menu
;
; Procedure: Calculate screen attr address and set attributes for 8x8 block
L13224:	CALL	L13242			; calculate screen attr address
L13230:	CALL	L13312			; set attributes for 8x8 block
L13234:	MOV	<L13242+2>, R2		; restore R2
L13240:	RETURN
;
; Procedure: ??? Calculate screen attr address
L13242:	MOV	R2, #000000		;WARN: mutable argument
L13246:	BIC	#176037, R2		; keep bits: 001111100000
L13252:	PUSH	R2
L13254:	ASL	R2
L13256:	ASR	(SP)
L13260:	ADD	(SP), R2
L13262:	ASL	R2
L13264:	ASL	R2
L13266:	ASL	R2			; *8
L13270:	MOV	<L13242+2>, (SP)
L13274:	BIC	#177740, (SP)		; 0..31.
L13300:	ASL	(SP)
L13302:	ADD	(SP)+, R2
L13304:	ADD	#040001, R2		; screen attr address
L13310:	RETURN
;
; Procedure: Set attributes for 8x8 block; R0 = attribute, R2 = screen address
L13312:	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
	NOP3
L13326:	MOVB	R0, (R2)		; #0
L13330:	ADD	#000100, R2
L13334:	MOVB	R0, (R2)		; #1
L13336:	ADD	#000100, R2
L13342:	MOVB	R0, (R2)		; #2
L13344:	ADD	#000100, R2
L13350:	MOVB	R0, (R2)		; #3
L13352:	ADD	#000100, R2
L13356:	MOVB	R0, (R2)		; #4
L13360:	ADD	#000100, R2
L13364:	MOVB	R0, (R2)		; #5
L13366:	ADD	#000100, R2
L13372:	MOVB	R0, (R2)		; #6
L13374:	ADD	#000100, R2
L13400:	MOVB	R0, (R2)		; #7
L13402:	ADD	#000100, R2
L13406:	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	NOP3
L13422:	RETURN
; Procedure: Clear Menu selection
L13424:	MOV	#000016, R0		; attribute
L13430:	MOV	#054202, R2		; WARN: mutable argument
L13434:	CALL	L13242
L13440:	MOV	#000015, R1		; 13.
L13444:	PUSH	R2		; <
L13446:	CALL	L13312			; |  set attributes for 8x8 block
L13452:	POP	R2		; |
L13454:	INC	R2			; |  next column
L13456:	INC	R2			; |
L13460:	SOB	R1, L13444		; repeat
L13462:	RETURN
; Procedure: Show Menu selection
L13464:	MOVB	R0, 041304		; Save input method selection
L13470:	MOV	R3, <L13430+2>
L13474:	MOV	#000061, R0		; attribute
L13500:	BR	L13430
;
; Text for Menu
L13502:	.ASCII	/K  KEYBOARD/
	.ASCII	/P  PROTEK/
	.ASCII	/J  KEMPSTON/
L13540:	.ASCII	/R REDEFINE KEYS /
	.ASCII	/M  ALTER MISSION/
	.ASCII	/S  START GAME/
;
L13616:	POP	R1
L13620:	CMPB	R1, #000001
L13624:	BNE	L13632
L13626:	JMP	L12630
L13632:	DECB	R1
L13634:	PUSH	R1
L13636:	DEC	R2
L13640:	MOVB	#000040, -(R3)
L13644:	MOV	#000001, R1
L13650:	PUSH	R2
L13652:	CALL	K01704			; Print string
L13656:	MOV	001606, R2		; screen coords
L13662:	MOVB	#000016, R0
L13666:	CALL	L13224			; calc screen attr address and set attributes for 8x8 block
L13672:	DEC	001606
L13676:	POP	R2
L13700:	DEC	R3
L13702:	JMP	L13000
;
L13706:	.ASCII	/CONGRATULATIONS/
	.ASCII	/YOU ARE NOW A TRUE/
	.ASCII	/NINJA SABOTEUR/
	.ASCII	/ENTER YOUR NAME/
;
L14004:	.ASCII	/HIGH SCORES/
L14017:	.ASCII	/001000IGOR IWAN  /
	.ASCII	/000140IWAN ALEKS /
	.ASCII	/000130GENNADIJ P./
	.ASCII	/000120JURIJ IGOR /
	.ASCII	/000110LENA       /
	.ASCII	/000100DARREN     /
	.ASCII	/000090NOEL       /
	.ASCII	/000080BRAD       /
	.ASCII	/000070NICKY      /
	.ASCII	/000060JUSTIN     /
	.ASCII	/000050CLAIRE     /
	.ASCII	/000040JOE T ARAO /
	.ASCII	/000030ALAN       /
	.ASCII	/000020RICH       /
	.ASCII	/000010DIV        /

	.ASCII	/SPARE SCORE+NAME /

L14437:	.ASCII	/0 /
	.EVEN
;
; Procedure ??
L14442:	MOV	#114536, R3
L14446:	CLC
L14450:	RORB	(R3)
L14452:	BLO	L14456
L14454:	RETURN
L14456:	BISB	#000200, (R3)
L14462:	MOV	#114510, R3
L14466:	INCB	(R3)
L14470:	RETURN
;
; Procedure: Change energy value/indicator ??, R1 = ??
L14472:	MOV	#000001, R0
L14476:	BNE	L14502
L14500:	RETURN
L14502:	PUSH	R1
L14504:	PUSH	R5
L14506:	MOV	#000000, R2		;WARN: mutable argument
L14512:	ADD	#050245, R2		; screen coords
L14516:	PUSH	R4
L14520:	CALL	K02056			; screen coords R2 to screen address
L14524:	POP	R4
L14526:	MOV	#001200, R3
	ADD	R2, R3
L14534:	MOVB	#000000, R5		;WARN: mutable argument
	ASL	R5		;
	MOV	PXCONH(R5), R5	;
	MOV	#000010, R1		; 8.
	MOV	#MMODE5, @#177716	; Включаем режим памяти 5
L14560:	MOV	(R3), R0		; <
	XOR	R5, R0
	MOV	R0, (R3)
	MOV	(R2), R0
L14570:	XOR	R5, R0
L14572:	MOV	R0, (R2)
L14574:	ADD	#000100, R2		; next line
L14600:	ADD	#000100, R3
L14604:	SOB	R1, L14560		; repeat
L14606:	MOV	#MMODE1, @#177716	; Включаем режим памяти 1
	NOP3
L14622:	MOV	#114536, R3
L14626:	ASLB	(R3)
L14630:	BHIS	114664
L14632:	INCB	(R3)
L14634:	MOV	#114510, R3
L14640:	DECB	(R3)
L14642:	BNE	L14664
L14644:	POP	R5
L14646:	POP	R1
L14650:	MOVB	#000001, K33540
L14656:	CLRB	114474
L14662:	RETURN
L14664:	POP	R5
L14666:	POP	R1
L14670:	SOB	R1, L14502
L14672:	RETURN
L14674:	CALL	L15506
L14700:	MOV	#165140, R1
L14704:	DEC	R1
L14706:	MOVB	#000006, R0
L14712:	DECB	R0
L14714:	BNE	L14712
L14716:	TST	R1
L14720:	BNE	L14704
L14722:	CALL	L07634			; Draw Ninja for Menu
L14726:	MOVB	011770, R5
L14732:	MOVB	051146, R0
L14736:	DECB	R5
L14740:	BEQ	L14746
L14742:	MOVB	051145, R0
L14746:	MOV	#052626, R3
L14752:	CMPB	R0, (R3)
L14754:	BHIS	114762
L14756:	JMP	L10606
L14762:	CALL	L15506
L14766:	CALL	L15506
L14772:	MOV	#050141, R2
L14776:	MOV	#115274, R3
L15002:	MOVB	#000005, R1
L15006:	CALL	K01704			; Print string
L15012:	MOV	#L15530, R3		; "CONGRATULATIONS"
L15016:	MOV	#040103, R2
L15022:	MOV	#000017, R1		; 15.
L15026:	CALL	K01704			; Print string "CONGRATULATIONS"
L15032:	MOV	#040241, 001606
L15040:	MOV	#000022, R1		; 18.
L15044:	CALL	K01704			; Print string "YOU HAVE COMPLETED"
L15050:	MOV	#040340, R2
L15054:	MOV	#000025, R1		; 21.
L15060:	CALL	K01704			; Print string "YOUR ASSIGNED MISSION"
L15064:	MOVB	L11666, R0		; Level number
L15070:	CMPB	R0, #000011		; 9.
L15074:	BNE	L15302
L15076:	MOV	#L15166, R3		; "YOU HAVE REACHED"
L15102:	MOV	#044042, R2
L15106:	MOV	#000020, R1		; 16.
L15112:	CALL	K01704			; Print string "YOU HAVE REACHED"
L15116:	MOV	#044141, R2
L15122:	MOV	#000022, R1		; 18.
L15126:	CALL	K01704			; Print string "THE ULTIMATE LEVEL"
L15132:	MOV	#044302, R2
L15136:	MOV	#000021, R1		; 17.
L15142:	CALL	K01704			; Print string "YOU HAVE MASTERED"
L15146:	MOV	#050001, R2
L15152:	MOV	#000023, R1		; 19.
L15156:	CALL	K01704			; Print string "THE ART OF NINJITSU"
L15162:	JMP	L15436
;
L15166:	.ASCII	/YOU HAVE REACHED/
	.ASCII	/THE ULTIMATE LEVEL/
	.ASCII	/YOU HAVE MASTERED/
	.ASCII	/THE ART OF NINJITSU/
	.ASCII	/TOTAL/
	.EVEN
;
L15302:	ADD	#000061, R0
L15306:	MOVB	R0, 115640
L15312:	MOV	#L15616, R3		; "THE CODE FOR"
L15316:	MOV	#044144, R2
L15322:	MOV	#000014, R1		; 12.
L15326:	CALL	K01704			; Print string "THE CODE FOR"
L15332:	MOV	#044245, R2
L15336:	MOV	#000012, R1		; 10.
L15342:	CALL	K01704			; Print string "STAGE X IS"
L15346:	MOV	#044345, R2
L15352:	MOV	#000001, R1		; 1.
L15356:	CALL	K01704			; Print string
L15362:	CLR	R0
L15364:	BISB	L11666, R0		; Level
L15370:	MOV	#112212, R3
L15374:	SUB	#000013, R3
L15400:	SOB	R0, L15374
L15402:	MOV	#000013, R1
L15406:	ADD	#000001, R2
L15412:	CALL	K01704			; Print string
L15416:	MOV	#113114, R3
L15422:	MOV	#000001, R1
L15426:	ADD	#000013, R2
L15432:	CALL	K01704			; Print string
L15436:	MOV	#K07336, R3		; "PRESS ANY KEY"...
L15442:	MOV	#050244, R2
L15446:	MOV	#000015, R1		; 13.
L15452:	CALL	K01704			; Print string "PRESS ANY KEY"
L15456:	MOV	#050304, R2
L15462:	MOV	#000014, R1		; 12.
L15466:	CALL	K01704			; Print string " TO CONTINUE"
L15472:	CALL	L13024
L15476:	CALL	L13100
L15502:	JMP	L10606
L15506:	MOV	#000372, R1
L15512:	CALL	L10244
L15516:	MOV	#000372, R1
	JMP	L10244
	NOP1
;
L15530:	.ASCII	/CONGRATULATIONS/
L15547:	.ASCII	/YOU HAVE COMPLETED/
L15571:	.ASCII	/YOUR ASSIGNED MISSION/
L15616:	.ASCII	/THE CODE FOR/
L15632:	.ASCII	/STAGE X IS"/
	.EVEN

	.WORD	0	;TODO

; Procedure ?? sound
L15650:	MOV	#000144, R1
L15654:	CALL	K01314
L15660:	BICB	#177417, R0
L15664:	BISB	#000340, R0
L15670:	MOV	R0, R3
L15672:	SWAB	R3
; Sound
L15674:	NOP3	;BIC	#000140, @#157706	; sound
L15702:	NOP3	;BIS	#000200, @#157706	; sound timer
L15710:	NOP3	;MOV	@#157706, @#177604	; set SysRegC MS0515
L15716:	MOVB	(R3)+, K01604
L15722:	DECB	K01604
L15726:	BNE	L15722
L15730:	NOP3	;BIC	#000200, @#157706	; sound timer
L15736:	NOP3	;BIS	#000140, @#157706	; sound
L15744:	NOP3	;MOV	@#157706, @#177604	; set SysRegC MS0515
L15752:	SOB	R1, L15674
L15754:	RETURN
;
L15756:
	.BYTE	070,001,010, 062,002,004, 064,010,002
	.BYTE	066,004,001, 065,001,020
; Redefined keys stored here
L15775:
	.BYTE	070,001,010, 062,002,004, 064,010,002
	.BYTE	066,004,001, 065,001,020
;
; Computerized font, 59 chars 8x8
;L16014:
.INCLUDE /S2FNT2.MAC/
;
.INCLUDE /S29DE4.MAC/
;
.IIF	NE <.-122624>, ERRORA
; Table for byte mirroring, but starting from 200, 256. bytes; see K06660
L22624:	;.BLKB	256.
L23024 = L22624 + 200


;	.BLKW	440

; Tile screen 32x18 = 576. bytes; also used as a buffer for Ninja picture for Menu
L24324 = 124324			; Contact tile screen address
; Tile screen 32x18 = 576. bytes
L25424 = 125424			; Back tile screen address
; Tile screen 32x18 = 576. bytes
L26524 = 126524			; Front tile screen address
; Tile screen 32x18 = 576. bytes
L27624 = 127624			; Ninja tile screen address
; Tile screen 32x18 = 576. bytes
L30724 = 130724			; Enemy 0 tile screen address
; Tile screen 32x18 = 576. bytes
L32024 = 132024			; Enemy 1 tile screen address

; Таблица под расширение байта в слово для вывода на экран
L33124 = 133124
PXCONH = L33124 + <128.*2.>	; Середина таблицы конвертации

	.END
